[
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#content",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nSee what your team could do with The DevSecOps Platform. Take GitLab for a spin.Mozilla ads\n\nSee what your team could do with The DevSecOps Platform. Take GitLab for a spin.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#top-nav-search-input",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#languages-switcher-button",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/plus/ai-help",
    "title": "AI Help | MDN Plus",
    "h1": "Utilize AI Help to boost your productivity",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nReceive MDN-sourced answers complete with consulted links\n\nSave your history to revisit your chats at anytime\n\nAsk queries about browser compatibility data\n\nUnlock GPT-4's potential with our paid subscriptions\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/",
    "title": "MDN Web Docs",
    "h1": "Resources for Developers,\nby Developers",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nDocumenting web technologies, including CSS, HTML, and JavaScript, since 2005.\n\nThe JavaScript console is an essential tool for web development. Learn new and fun ways to use the console to display data and debug your code.\n\nWhat can web designers and developers do to build a more sustainable web? This post explores the environmental impacts of web technologies and looks at some of the ways we can build greener websites.\n\nThe CSS Custom Highlight API provides a mechanism for styling arbitrary text ranges on a document by using JavaScript to create the ranges, and CSS to style them.\n\nThe <color> CSS data type represents a color. A <color> may also include an alpha-channel transparency value, indicating how the color should composite with its background.\n\nLift-off: The MDN Curriculum launch\ndeveloper.mozilla.org\n\nBaseline's evolution on MDN\ndeveloper.mozilla.org\n\nIntroducing the MDN Playground: Bring your code to life!\ndeveloper.mozilla.org\n\nchore(api): Remove screenshots from EmbedLiveSample calls\nmdn/content\n\n[es] sync translated content\nmdn/translated-content\n\nImprove the links meaning for the Accessibility and SEO.\nmdn/content\n\nRemove page for SVG onclick attribute\nmdn/content\n\nfeat(CSS): Add interactive example for `text-wrap`\nmdn/content\n\nUpdate index.md\nmdn/content\n\n[zh-cn] sync translated content\nmdn/translated-content\n\nzh-cn: fix the broken link in Regular Expressions guide\nmdn/translated-content\n\n[ja] sync translated content\nmdn/translated-content\n\nchore(zh-cn): sync translate content\nmdn/translated-content\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web",
    "title": "Web technology for developers | MDN",
    "h1": "Web technology for developers",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.Mozilla ads\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nMozilla ads\n\nThe open Web presents incredible opportunities for developers. To take full advantage of these technologies, you need to know how to use them. Below you'll find links to our Web technology documentation.\n\nThe Web Developer Guide provides useful how-to content to help you actually use Web technologies to do what you want or need to do.\n\nTutorials to take you step-by-step through learning HTML, CSS, JavaScript, and Web APIs.\n\nEnabling as many people as possible to use websites, even when those people's abilities are limited in some way.\n\nMaking content as available and interactive as possible, as soon as possible.\n\nProtecting users from data leaks and data theft, side-channel attacks, and attacks such as cross-site scripting, content injection, and click-jacking.\n\nJavaScript programming APIs you can use to build apps on the Web.\n\nHTML provides the fundamental building blocks for structuring Web documents and apps.\n\nCascading Style Sheets are used to describe the appearance of Web documents and apps.\n\nJavaScript is the Web's native programming language.\n\nWebAssembly allows programs written in C, C++, Rust, Swift, C#, Go, and more to run on the Web.\n\nEvents are what you build Web apps to react to; for example, when a Web page finishes loading, or a user selects something, presses a key, resizes a window, submits a form, or pauses a video.\n\nHTTP is the fundamental Internet protocol for fetching documents, stylesheets, scripts, images, videos, fonts, and other resources over the Web — and for sending data back to Web servers.\n\nFormats, codecs, protocols, APIs, and techniques for embedding and streaming video, audio, and image content in Web documents and apps.\n\nScalable Vector Graphics lets you create images that scale smoothly to any size.\n\nMathML lets you display complex mathematical notation on the Web.\n\nWeb Components are custom elements that you can define and reuse in your Web apps.\n\nWebDriver is a browser-automation mechanism for remotely controlling a browser by emulating the actions of a real person using the browser. It's widely used for cross-browser testing of Web apps.\n\nWeb Extensions are a way for you to give users enhanced capabilities in their browsers — for doing things such as blocking ads and other content, customizing the appearance of pages, and more.\n\nWeb App Manifests let you enable users to install Web apps to their device home screens, with aspects such as portrait/landscape screen orientation and display mode (e.g., full screen) pre-set.\n\nProgressive Web Apps provide a user experience similar to native mobile apps.\n\nDocumentation for the set of web-developer tools built into Firefox.\n\nDocumentation for the set of web-developer tools built into Chrome.\n\nDocumentation for the set of web-developer tools built into Safari.\n\nDocumentation for the set of web-developer tools built into Edge.\n\nThis page was last modified on Jul 19, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/HTML",
    "title": "HTML: HyperText Markup Language | MDN",
    "h1": "HTML: HyperText Markup Language",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nLoved by developers. Trusted by enterprises. Start your free 30 day trial.Mozilla ads\n\nLoved by developers. Trusted by enterprises. Start your free 30 day trial.\nMozilla ads\n\nHTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page's appearance/presentation (CSS) or functionality/behavior (JavaScript).\n\n\"Hypertext\" refers to links that connect web pages to one another, either within a single website or between websites. Links are a fundamental aspect of the Web. By uploading content to the Internet and linking it to pages created by other people, you become an active participant in the World Wide Web.\n\nHTML uses \"markup\" to annotate text, images, and other content for display in a Web browser. HTML markup includes special \"elements\" such as <head>, <title>, <body>, <header>, <footer>, <article>, <section>, <p>, <div>, <span>, <img>, <aside>, <audio>, <canvas>, <datalist>, <details>, <embed>, <nav>, <search>, <output>, <progress>, <video>, <ul>, <ol>, <li> and many others.\n\nAn HTML element is set off from other text in a document by \"tags\", which consist of the element name surrounded by \"<\" and \">\". The name of an element inside a tag is case-insensitive. That is, it can be written in uppercase, lowercase, or a mixture. For example, the <title> tag can be written as <Title>, <TITLE>, or in any other way. However, the convention and recommended practice is to write tags in lowercase.\n\nThe articles below can help you learn more about HTML.\n\nIf you're new to web development, be sure to read our HTML Basics article to learn what HTML is and how to use it.\n\nFor articles about how to use HTML, as well as tutorials and complete examples, check out our HTML Learning Area.\n\nIn our extensive HTML reference section, you'll find the details about every element and attribute in HTML.\n\nOur HTML Learning Area features multiple modules that teach HTML from the ground up — no previous knowledge required.\n\nThis module sets the stage, getting you used to important concepts and syntax such as looking at applying HTML to text, how to create hyperlinks, and how to use HTML to structure a web page.\n\nThis module explores how to use HTML to include multimedia in your web pages, including the different ways that images can be included, and how to embed video, audio, and even entire other webpages.\n\nRepresenting tabular data on a webpage in an understandable, accessible way can be a challenge. This module covers basic table markup, along with more complex features such as implementing captions and summaries.\n\nForms are a very important part of the Web — these provide much of the functionality you need for interacting with websites, e.g. registering and logging in, sending feedback, buying products, and more. This module gets you started with creating the client-side/front-end parts of forms.\n\nProvides links to sections of content explaining how to use HTML to solve very common problems when creating a web page: dealing with titles, adding images or videos, emphasizing content, creating a basic form, etc.\n\nThe crossorigin attribute, in combination with an appropriate CORS header, allows images defined by the <img> element to be loaded from foreign origins and used in a <canvas> element as if they were being loaded from the current origin.\n\nSome HTML elements that provide support for CORS, such as <img> or <video>, have a crossorigin attribute (crossOrigin property), which lets you configure the CORS requests for the element's fetched data.\n\nThe preload value of the <link> element's rel attribute allows you to write declarative fetch requests in your HTML <head>, specifying resources that your pages will need very soon after loading, which you therefore want to start preloading early in the lifecycle of a page load, before the browser's main rendering machinery kicks in. This ensures that they are made available earlier and are less likely to block the page's first render, leading to performance improvements. This article provides a basic guide to how preload works.\n\nHTML consists of elements, each of which may be modified by some number of attributes. HTML documents are connected to each other with links.\n\nBrowse a list of all HTML elements.\n\nElements in HTML have attributes. These are additional values that configure the elements or adjust their behavior in various ways.\n\nGlobal attributes may be specified on all HTML elements, even those not specified in the standard. This means that any non-standard elements must still permit these attributes, even though those elements make the document HTML5-noncompliant.\n\nHTML elements are usually \"inline-level\" or \"block-level\" elements. An inline-level element occupies only the space bounded by the tags that define it. A block-level element occupies the entire space of its parent element (container), thereby creating a \"block box\".\n\nThe <audio> and <video> elements allow you to play audio and video media natively within your content without the need for external software support.\n\nHTML is comprised of several kinds of content, each of which is allowed to be used in certain contexts and is disallowed in others. Similarly, each context has a set of other content categories it can contain and elements that can or can't be used in them. This is a guide to these categories.\n\nHistorical information on quirks mode and standards mode.\n\nThis article covers most of the ways you use CSS to add color to HTML content, listing what parts of HTML documents can be colored and what CSS properties to use when doing so. Includes examples, links to palette-building tools, and more.\n\nThis page was last modified on Mar 5, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS",
    "title": "CSS: Cascading Style Sheets | MDN",
    "h1": "CSS: Cascading Style Sheets",
    "paragraphs": "Add video calling functionality to your website or app with Whereby’s powerful SDK.\nGet started\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nCascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.\n\nCSS is among the core languages of the open web and is standardized across Web browsers according to W3C specifications. Previously, the development of various parts of CSS specification was done synchronously, which allowed the versioning of the latest recommendations. You might have heard about CSS1, CSS2.1, or even CSS3. There will never be a CSS3 or a CSS4; rather, everything is now CSS without a version number.\n\nAfter CSS 2.1, the scope of the specification increased significantly and the progress on different CSS modules started to differ so much, that it became more effective to develop and release recommendations separately per module. Instead of versioning the CSS specification, W3C now periodically takes a snapshot of the latest stable state of the CSS specification and individual modules progress. CSS modules now have version numbers, or levels, such as CSS Color Module Level 5.\n\nIf you're new to web development, be sure to read our CSS basics article to learn what CSS is and how to use it.\n\nOur CSS learning area contains a wealth of tutorials to take you from beginner level to proficiency, covering all the fundamentals.\n\nOur exhaustive CSS reference for seasoned Web developers describes every property and concept of CSS.\n\nOur CSS Learning Area features multiple modules that teach CSS from the ground up — no previous knowledge required.\n\nCSS (Cascading Style Sheets) is used to style and layout web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. This module provides a gentle beginning to your path towards CSS mastery with the basics of how it works, what the syntax looks like, and how you can start using it to add styling to HTML.\n\nThis module carries on where CSS first steps left off — now you've gained familiarity with the language and its syntax, and got some basic experience with using it, it's time to dive a bit deeper. This module looks at the cascade and inheritance, all the selector types we have available, units, sizing, styling backgrounds and borders, debugging, and lots more.\n\nThe aim here is to provide you with a toolkit for writing competent CSS and help you understand all the essential theory, before moving on to more specific disciplines like text styling and CSS layout.\n\nWith the basics of the CSS language covered, the next CSS topic for you to concentrate on is styling text — one of the most common things you'll do with CSS. Here we look at text styling fundamentals, including setting font, boldness, italics, line and letter spacing, drop shadows, and other text features. We round off the module by looking at applying custom fonts to your page, and styling lists and links.\n\nAt this point we've already looked at CSS fundamentals, how to style text, and how to style and manipulate the boxes that your content sits inside. Now it's time to look at how to place your boxes in the right place in relation to the viewport, and to each other. We have covered the necessary prerequisites so we can now dive deep into CSS layout, looking at different display settings, modern layout tools like flexbox, CSS grid, and positioning, and some of the legacy techniques you might still want to know about.\n\nThis module provides links to sections of content explaining how to use CSS to solve common problems when creating a web page.\n\nThe CSS layout cookbook aims to bring together recipes for common layout patterns, things you might need to implement in your sites. In addition to providing code you can use as a starting point in your projects, these recipes highlight the different ways layout specifications can be used and the choices you can make as a developer.\n\nThis page was last modified on Mar 5, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
    "title": "JavaScript | MDN",
    "h1": "JavaScript",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nJavaScript (JS) is a lightweight interpreted (or just-in-time compiled) programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles.\n\nJavaScript's dynamic capabilities include runtime object construction, variable parameter lists, function variables, dynamic script creation (via eval), object introspection (via for...in and Object utilities), and source-code recovery (JavaScript functions store their source text and can be retrieved through toString()).\n\nThis section is dedicated to the JavaScript language itself, and not the parts that are specific to Web pages or other host environments. For information about APIs that are specific to Web pages, please see Web APIs and DOM.\n\nThe standards for JavaScript are the ECMAScript Language Specification (ECMA-262) and the ECMAScript Internationalization API specification (ECMA-402). As soon as one browser implements a feature, we try to document it. This means that cases where some proposals for new ECMAScript features have already been implemented in browsers, documentation and examples in MDN articles may use some of those new features. Most of the time, this happens between the stages 3 and 4, and is usually before the spec is officially published.\n\nDo not confuse JavaScript with the Java programming language — JavaScript is not \"Interpreted Java\". Both \"Java\" and \"JavaScript\" are trademarks or registered trademarks of Oracle in the U.S. and other countries. However, the two programming languages have very different syntax, semantics, and use.\n\nJavaScript documentation of core language features (pure ECMAScript, for the most part) includes the following:\n\nFor more information about JavaScript specifications and related technologies, see JavaScript technologies overview.\n\nLearn how to program in JavaScript with guides and tutorials.\n\nHead over to our Learning Area JavaScript topic if you want to learn JavaScript but have no previous experience with JavaScript or programming. The complete modules available there are as follows:\n\nAnswers some fundamental questions such as \"what is JavaScript?\", \"what does it look like?\", and \"what can it do?\", along with discussing key JavaScript features such as variables, strings, numbers, and arrays.\n\nContinues our coverage of JavaScript's key fundamental features, turning our attention to commonly-encountered types of code blocks such as conditional statements, loops, functions, and events.\n\nThe object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language and write more efficient code, therefore we've provided this module to help you.\n\nDiscusses asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations such as fetching resources from a server.\n\nExplores what APIs are, and how to use some of the most common APIs you'll come across often in your development work.\n\nA much more detailed guide to the JavaScript language, aimed at those with previous programming experience either in JavaScript or another language.\n\nJavaScript frameworks are an essential part of modern front-end web development, providing developers with proven tools for building scalable, interactive web applications. This module gives you some fundamental background knowledge about how client-side frameworks work and how they fit into your toolset, before moving on to a series of tutorials covering some of today's most popular ones.\n\nAn overview of the basic syntax and semantics of JavaScript for those coming from other programming languages to get up to speed.\n\nOverview of available data structures in JavaScript.\n\nJavaScript provides three different value comparison operations: strict equality using ===, loose equality using ==, and the Object.is() method.\n\nHow different methods that visit a group of object properties one-by-one handle the enumerability and ownership of properties.\n\nA closure is the combination of a function and the lexical environment within which that function was declared.\n\nExplanation of the widely misunderstood and underestimated prototype-based inheritance.\n\nMemory life cycle and garbage collection in JavaScript.\n\nJavaScript has a runtime model based on an \"event loop\".\n\nBrowse the complete JavaScript reference documentation.\n\nGet to know standard built-in objects Array, Boolean, Date, Error, Function, JSON, Math, Number, Object, RegExp, String, Map, Set, WeakMap, WeakSet, and others.\n\nLearn more about the behavior of JavaScript's operators instanceof, typeof, new, this, the operator precedence, and more.\n\nLearn how do-while, for-in, for-of, try-catch, let, var, const, if-else, switch, and more JavaScript statements and keywords work.\n\nLearn how to work with JavaScript's functions to develop your applications.\n\nJavaScript classes are the most appropriate way to do object-oriented programming.\n\nThis page was last modified on Mar 5, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP",
    "title": "HTTP | MDN",
    "h1": "HTTP",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nHypertext Transfer Protocol (HTTP) is an application-layer protocol for transmitting hypermedia documents, such as HTML. It was designed for communication between web browsers and web servers, but it can also be used for other purposes. HTTP follows a classical client-server model, with a client opening a connection to make a request, then waiting until it receives a response. HTTP is a stateless protocol, meaning that the server does not keep any data (state) between two requests.\n\nLearn how to use HTTP with guides and tutorials.\n\nThe basic features of the client-server protocol: what it can do and its intended uses.\n\nCaching is very important for fast websites. This article describes different methods of caching and how to use HTTP Headers to control them.\n\nHow cookies work is defined by RFC 6265. When serving an HTTP request, a server can send a Set-Cookie HTTP header with the response. The client then returns the cookie's value with every request to the same server in the form of a Cookie request header. The cookie can also be set to expire on a certain date, or restricted to a specific domain and path.\n\nCross-site HTTP requests are HTTP requests for resources from a different domain than the domain of the resource making the request. For instance, an HTML page from Domain A (http://domaina.example/) makes a request for an image on Domain B (http://domainb.foo/image.jpg) via the img element. Web pages today very commonly load cross-site resources, including CSS stylesheets, images, scripts, and other resources. CORS allows web developers to control how their site reacts to cross-site requests.\n\nClient Hints are a set of response headers that a server can use to proactively request information from a client about the device, network, user, and user-agent-specific preferences. The server can then determine which resources to send, based on the information that the client chooses to provide.\n\nA brief description of the changes between the early versions of HTTP, to the modern HTTP/2, the emergent HTTP/3 and beyond.\n\nA collection of tips to help operational teams with creating secure web applications.\n\nDescribes the type and structure of the different kind of messages of HTTP/1.x and HTTP/2.\n\nShows and explains the flow of a usual HTTP session.\n\nDescribes the three connection management models available in HTTP/1.x, their strengths, and their weaknesses.\n\nBrowse through detailed HTTP reference documentation.\n\nHTTP message headers are used to describe a resource, or the behavior of the server or the client. Header fields are maintained in an IANA HTTP Field Name Registry, which includes information about their status, which may be \"permanent\" (standards-defined), \"provisional\" (new), \"deprecated\" (use not recommended), or \"obsolete\" (no longer in use).\n\nThe different operations that can be done with HTTP: GET, POST, and also less common requests like OPTIONS, DELETE, or TRACE.\n\nHTTP response codes indicate whether a specific HTTP request has been successfully completed. Responses are grouped in five classes: informational responses, successful responses, redirections, client errors, and servers errors.\n\nThe Content-Security-Policy response header fields allows website administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints.\n\nHelpful tools and resources for understanding and debugging HTTP.\n\nNetwork monitor\n\nA project designed to help developers, system administrators, and security professionals configure their sites safely and securely.\n\nTools to check your cache-related headers.\n\nA very comprehensive article on browser internals and request flow through HTTP protocol.\n\nThis page was last modified on Mar 3, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/API",
    "title": "Web APIs | MDN",
    "h1": "Web APIs",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nWhen writing code for the Web, there are a large number of Web APIs available. Below is a list of all the APIs and interfaces (object types) that you may be able to use while developing your Web app or site.\n\nWeb APIs are typically used with JavaScript, although this doesn't always have to be the case.\n\nThis is a list of all the APIs that are available.\n\nThis is a list of all the interfaces (that is, types of objects) that are available.\n\nThis page was last modified on Feb 20, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Unrivaled cloud expertise with DoiT. A global team of cloud experts with decades of experience on AWS - all on call for you.\nLearn more\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Learn",
    "title": "Learn web development | MDN",
    "h1": "Learn web development",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nWelcome to the MDN learning area. This set of articles aims to provide complete beginners to web development with fundamental skills for coding websites. The aim is not to take you from \"beginner\" to \"expert\" but to take you from \"beginner\" to \"comfortable.\" From there, you should be able to start making your way, learning from the rest of MDN, and other intermediate to advanced resources that assume a lot of previous knowledge.\n\nIf you are a complete beginner, web development can be challenging — we will hold your hand and provide enough detail for you to feel comfortable and learn the topics properly. You should feel at home whether you are a student learning web development (on your own or as part of a class), a teacher looking for class materials, a hobbyist, or someone who just wants to understand more about how web technologies work.\n\nIf you are not sure about committing to learning web development in-depth and want to begin with a taster session, we'd recommend that you start by working through our Getting started with the web guides. Beyond that, you should start by learning the following topics:\n\nHTML provides structure for web content, whereas CSS provides instructions to style and lay out that content. See Introduction to HTML and CSS first steps for essential starter information.\n\nJavaScript allows you to code interactive functionality on websites. Begin with JavaScript first steps.\n\nAfter mastering the essentials of vanilla HTML, CSS, and JavaScript, you should learn about client-side web development tools, and then consider digging into client-side JavaScript frameworks. You should also consider learning the basic concepts of server-side website programming.\n\nNote: Our glossary provides terminology definitions. Besides, if you have a specific question about web development, our Common questions section may have something to help you.\n\nIf you want to become a front-end web developer and are not sure what to learn first, we'd suggest using the MDN Curriculum to plan your learning. It provides a structured learning pathway covering the essential skills and practices for being a successful front-end developer, along with recommended learning resources.\n\nGet started\n\nThe following is a list of all the topics we cover in the MDN learning area.\n\nProvides a practical introduction to web development for complete beginners.\n\nHTML is the language that we use to structure the different parts of our content and define what their meaning or purpose is. This topic teaches HTML in detail.\n\nCSS is the language that we use to control our web content's style and layout, as well as adding behavior like animation. This topic provides comprehensive coverage of CSS.\n\nJavaScript is the scripting language used to add dynamic functionality to web pages. This topic teaches all the essentials needed to become comfortable with writing and understanding JavaScript.\n\nWeb forms are a potent tool for interacting with users — most commonly, they are used for collecting data from users, or allowing them to control a user interface. In the articles listed below, we'll cover all the essential aspects of structuring, styling, and interacting with web forms.\n\nAccessibility is the practice of making web content available to as many people as possible regardless of disability, device, locale, or other differentiating factors. This topic gives you all you need to know.\n\nWeb performance is the art of making sure web applications download fast and are responsive to user interaction, regardless of a user's bandwidth, screen size, network, or device capabilities.\n\nMathML is the language that we can use to write mathematical formulas in web pages using fractions, scripts, radicals, matrices, integrals, series, etc. This topic covers MathML.\n\nThis topic covers the tools developers use to facilitate their work, such as cross-browser testing tools, linters, formatters, transformation tools, version control systems, deployment tools, and client-side JavaScript frameworks.\n\nEven if you are concentrating on client-side web development, it is still useful to know how servers and server-side code features work. This topic provides a general introduction to how the server-side works and detailed tutorials showing how to build up a server-side app using two popular frameworks: Django (Python) and Express (Node.js).\n\nIn the Learn web development section of MDN, there are many self-contained tasks and assessments for you to complete. These come in two main types:\n\nEach one has an associated marking guide and recommended solution available to help you assess your work. There are patterns that make it easier to find these resources, for example:\n\nNote: Most of the marking guides and other resources for the tasks and assessments are available in mdn/learning-area, although some are in mdn/css-examples.\n\nThe code examples you'll encounter in the Learning Area are all available on GitHub. If you want to copy them all to your computer, the easiest way is to download a ZIP of the latest master code branch.\n\nIf you prefer to copy the repo in a more flexible way that allows for automatic updates, you can follow the more complex instructions:\n\nYou can update the learning-area repository with any changes made to the master version on GitHub with the following steps:\n\nIf you want to get in touch with us about anything, use the communication channels. We'd like to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items you don't understand, or any other questions or concerns.\n\nIf you're interested in helping develop/improve the content, take a look at how you can help and get in touch! We are more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the learning experience.\n\nAn excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.\n\nA great interactive site for learning programming languages from scratch.\n\nInteractive site with tutorials and projects to learn web development.\n\nFeatures a free and open-source full-stack curriculum, from beginner to advanced.\n\nThe MDN blog has articles from the MDN team and guest writers about new developments on the site, HTML, CSS, JavaScript, and other web development news.\n\nOur newsletter for web developers, which is an excellent resource for all levels of experience.\n\nThis page was last modified on Mar 6, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Learn/HTML",
    "title": "Structuring the web with HTML - Learn web development | MDN",
    "h1": "Structuring the web with HTML",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nTo build websites, you should know about HTML — the fundamental technology used to define the structure of a webpage. HTML is used to specify whether your web content should be recognized as a paragraph, list, heading, link, image, multimedia player, form, or one of many other available elements or even a new element that you define.\n\nBefore starting this topic, you should have at least basic familiarity with using computers and using the web passively (i.e., just looking at it, consuming the content). You should have a basic work environment set up as detailed in Installing basic software, and understand how to create and manage files, as detailed in Dealing with files — both are parts of our Getting started with the web complete beginner's module.\n\nIt is recommended that you work through Getting started with the web before attempting this topic. However, this isn't absolutely necessary; much of what is covered in the HTML basics article is also covered in our Introduction to HTML module, albeit in a lot more detail.\n\nAfter learning HTML, you can then move on to learning about more advanced topics such as:\n\nThis topic contains the following modules, in a suggested order for working through them. You should definitely start with the first one.\n\nThis module sets the stage, getting you used to important concepts and syntax, looking at applying HTML to text, how to create hyperlinks, and how to use HTML to structure a webpage.\n\nThis module explores how to use HTML to include multimedia in your web pages, including the different ways that images can be included, and how to embed video, audio, and even entire other webpages.\n\nRepresenting tabular data on a webpage in an understandable, accessible way can be a challenge. This module covers basic table markup, along with more complex features such as implementing captions and summaries.\n\nUse HTML to solve common problems provides links to sections of content explaining how to use HTML to solve very common problems when creating a webpage: dealing with titles, adding images or videos, emphasizing content, creating a basic form, etc.\n\nThis module provides a series of articles that will help you master the essentials of web forms. Web forms are a very powerful tool for interacting with users — most commonly they are used for collecting data from users, or allowing them to control a user interface. However, for historical and technical reasons it's not always obvious how to use them to their full potential. We'll cover all the essential aspects of Web forms including marking up their HTML structure, styling form controls, validating form data, and submitting data to the server.\n\nThe main entry point for HTML reference documentation on MDN, including detailed element and attribute references — if you want to know what attributes an element has or what values an attribute has, for example, this is a great place to start.\n\nThis page was last modified on Mar 5, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Learn/CSS",
    "title": "Learn to style HTML using CSS - Learn web development | MDN",
    "h1": "Learn to style HTML using CSS",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nCascading Style Sheets — or CSS — is the first technology you should start learning after HTML. While HTML is used to define the structure and semantics of your content, CSS is used to style it and lay it out. For example, you can use CSS to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features.\n\nYou should learn the basics of HTML before attempting any CSS. We recommend that you work through our Introduction to HTML module first.\n\nOnce you understand the fundamentals of HTML, we recommend that you learn further HTML and CSS at the same time, moving back and forth between the two topics. This is because HTML is far more interesting and much more fun to learn when you apply CSS, and you can't learn CSS without knowing HTML.\n\nBefore starting this topic, you should also be familiar with using computers and using the web passively (i.e., just looking at it, consuming the content). You should have a basic work environment set up, as detailed in Installing basic software, and understand how to create and manage files, as detailed in Dealing with files — both of which are parts of our Getting started with the web complete beginner's module.\n\nIt is also recommended that you work through Getting started with the web before proceeding with this topic, especially if you are completely new to web development. However, much of what is covered in its CSS basics article is also covered in our CSS first steps module, albeit in a lot more detail.\n\nThis topic contains the following modules, in a suggested order for working through them. You should start with the first one.\n\nCSS (Cascading Style Sheets) is used to style and layout web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. This module provides a gentle beginning to your path towards CSS mastery with the basics of how it works, what the syntax looks like, and how you can start using it to add styling to HTML.\n\nThis module carries on where CSS first steps left off — now you've gained familiarity with the language and its syntax, and got some basic experience with using it, it's time to dive a bit deeper. This module looks at the cascade and inheritance, all the selector types we have available, units, sizing, styling backgrounds and borders, debugging, and lots more.\n\nThe aim here is to provide you with a toolkit for writing competent CSS and help you understand all the essential theory, before moving on to more specific disciplines like text styling and CSS layout.\n\nWith the basics of the CSS language covered, the next CSS topic for you to concentrate on is styling text — one of the most common things you'll do with CSS. Here we look at text styling fundamentals, including setting font, boldness, italics, line and letter spacing, drop shadows, and other text features. We round off the module by looking at applying custom fonts to your page, and styling lists and links.\n\nAt this point, we've already looked at CSS fundamentals, how to style text, and how to style and manipulate the boxes that your content sits inside. Now it's time to look at how to place your boxes in the right place with respect to the viewport, and one another. We have covered the necessary prerequisites so we can now dive deep into CSS layout, looking at different display settings, modern layout tools like flexbox, CSS grid, and positioning, and some of the legacy techniques you might still want to know about.\n\nUse CSS to solve common problems provides links to sections of content explaining how to use CSS to solve very common problems when creating a web page.\n\nFrom the beginning, you'll primarily apply colors to HTML elements and their backgrounds; change the size, shape, and position of elements; and add and define borders on elements. But there's not much you can't do once you have a solid understanding of even the basics of CSS. One of the best things about learning CSS is that once you know the fundamentals, usually you have a pretty good feel for what can and can't be done, even if you don't know how to do it yet!\n\nCSS works a bit differently from most programming languages and design tools you'll come across. Why does it work the way it does? In the following video, Miriam Suzanne provides a useful explanation of why CSS works as it does, and why it has evolved as it has:\n\nThe main entry point for CSS documentation on MDN, where you'll find detailed reference documentation for all features of the CSS language. Want to know all the values a property can take? This is a good place to go.\n\nThis page was last modified on Mar 5, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript",
    "title": "JavaScript — Dynamic client-side scripting - Learn web development | MDN",
    "h1": "JavaScript — Dynamic client-side scripting",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nJavaScript is a programming language that allows you to implement complex functionalities on web pages. Every time a web page does more than just sit there and display static information for you to look at—displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, or more—you can bet that JavaScript is probably involved.\n\nJavaScript is arguably more difficult to learn than related technologies such as HTML and CSS. Before attempting to learn JavaScript, you are strongly advised to get familiar with at least these two technologies first, and perhaps others as well. Start by working through the following modules:\n\nHaving previous experience with other programming languages might also help.\n\nAfter getting familiar with the basics of JavaScript, you should be in a position to learn about more advanced topics, for example:\n\nOur policy on modern JavaScript\n\nJavaScript is an actively evolving language and has changed greatly over the years. In particular, the 6th edition of the language (sometimes known as ECMAScript 2015 or ES6), introduced in 2015, added many new features. At the same time, to maintain backwards compatibility with older websites, old features of the language have been retained, even when they are no longer considered good practice.\n\nWe think that the features added to JavaScript in ECMAScript 2015 and subsequent versions enable developers to write more readable, reliable, and expressive code, and that it's important to learn about them.\n\nThe features we teach in this course are stable and have been supported by all major browsers for several years.\n\nThis topic contains the following modules, in a suggested order for working through them.\n\nIn our first JavaScript module, we first answer some fundamental questions such as \"what is JavaScript?\", \"what does it look like?\", and \"what can it do?\", before moving on to taking you through your first practical experience of writing JavaScript. After that, we discuss some key JavaScript features in detail, such as variables, strings, numbers and arrays.\n\nIn this module, we continue our coverage of all JavaScript's key fundamental features, turning our attention to commonly-encountered types of code block such as conditional statements, loops, functions, and events. You've seen this stuff already in the course, but only in passing — here we'll discuss it all explicitly.\n\nIn JavaScript, most things are objects, from core JavaScript features like strings and arrays to the browser APIs built on top of JavaScript. You can even create your own objects to encapsulate related functions and variables into efficient packages. The object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language and write more efficient code, therefore we've provided this module to help you. Here we teach object theory and syntax in detail, look at how to create your own objects, and explain what JSON data is and how to work with it.\n\nIn this module we take a look at asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations such as fetching resources from a server.\n\nWhen writing client-side JavaScript for websites or applications, you won't go very far before you start to use APIs — interfaces for manipulating different aspects of the browser and operating system the site is running on, or even data from other websites or services. In this module we will explore what APIs are, and how to use some of the most common APIs you'll come across often in your development work.\n\nSolve common problems in your JavaScript code provides a little advice on how to avoid common beginner JavaScript programming mistakes, along with many helpful links to topics that show how to solve common JavaScript programming problems.\n\nThe main entry point for core JavaScript documentation on MDN — this is where you'll find extensive reference docs on all aspects of the JavaScript language, and some advanced tutorials aimed at experienced JavaScripters.\n\nAn excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free.\n\nAn excellent series of video tutorials to teach the math you need to understand to be an effective programmer, by Keith Peters.\n\nThis page was last modified on Mar 5, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/Accessibility",
    "title": "Accessibility | MDN",
    "h1": "Accessibility",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nAccessibility (often abbreviated to A11y — as in, \"a\", then 11 characters, and then \"y\") in web development means enabling as many people as possible to use websites, even when those people's abilities are limited in some way.\n\nFor many people, technology makes things easier. For people with disabilities, technology makes things possible. Accessibility means developing content to be as accessible as possible, no matter an individual's physical and cognitive abilities and how they access the web.\n\n\"The Web is fundamentally designed to work for all people, whatever their hardware, software, language, location, or ability. When the Web meets this goal, it is accessible to people with a diverse range of hearing, movement, sight, and cognitive ability.\" (W3C - Accessibility)\n\nThe MDN Accessibility Learning Area contains modern, up-to-date tutorials covering the following accessibility essentials:\n\nThis article starts off the module with a good look at what accessibility actually is — this includes what groups of people we need to consider and why, what tools different people use to interact with the Web, and how we can make accessibility part of our web development workflow.\n\nA great deal of web content can be made accessible just by making sure that the correct HTML elements are used for the correct purpose at all times. This article looks in detail at how HTML can be used to ensure maximum accessibility.\n\nCSS and JavaScript, when used properly, also have the potential to allow for accessible web experiences. They can significantly harm accessibility if misused. This article outlines some CSS and JavaScript best practices that should be considered to ensure that even complex content is as accessible as possible.\n\nFollowing on from the previous article, sometimes making complex UI controls that involve unsemantic HTML and dynamic JavaScript-updated content can be difficult. WAI-ARIA is a technology that can help with such problems by adding in further semantics that browsers and assistive technologies can recognize and let users know what is going on. Here we'll show how to use it at a basic level to improve accessibility.\n\nAnother category of content that can create accessibility problems is multimedia — video, audio, and image content need to be given proper textual alternatives so that they can be understood by assistive technologies and their users. This article shows how.\n\nWith web access on mobile devices being so popular and popular platforms such as iOS and Android having fully-fledged accessibility tools, it is important to consider the accessibility of your web content on these platforms. This article looks at mobile-specific accessibility considerations.\n\nThis set of articles provides quick explanations to help you understand the steps that need to be taken to conform to the recommendations outlined in the W3C Web Content Accessibility Guidelines 2.0 (WCAG 2.0 or just WCAG, for the purposes of this writing).\n\nThis article discusses our perception of light and color, provides a foundation for the use of color in accessible designs, and demonstrates best practices for visual and readable content.\n\nUntil now, web developers who wanted to make their styled <div> and <span> based widgets accessible have lacked proper techniques. Keyboard accessibility is part of the minimum accessibility requirements, which a developer should be aware of.\n\nThis is a collection of articles to learn how to use Accessible Rich Internet Applications (ARIA) to make your HTML documents more accessible.\n\nThis article provides a concise checklist of accessibility requirements for mobile app developers.\n\nThis article explains how to ensure that the web content you're creating is accessible to people with cognitive impairments.\n\nSome types of visual web content can induce seizures in people with certain brain disorders. This article helps you understand the types of content that can be problematic and find tools and strategies to help you avoid them.\n\nThis page was last modified on Apr 12, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/plus",
    "title": "MDN Plus",
    "h1": "More MDN. Your MDN.",
    "paragraphs": "Integrate delightful video calls into your platform with Whereby.\nGet started\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nNo need to scroll through page after page to find your answers. Introducing an AI assistant that can answer all your web development questions in real time. Powered by OpenAI GPT-3.5 and GPT-4.\n\nYour playground to learn and share your amazing work with the world. By simply logging in, you can now spread your creativity far and wide.\n\nThe Web doesn't have a changelog, but MDN can help. You can personalize and filter compatibility changes based on browsers or the tech category you are interested in whether that is JavaScript, CSS, etc.\n\nNo more haphazard hunting through the vast virtual library: unleash your inner curator and collect your favorite articles in one place for convenient consultation.\n\nTaking your projects beyond the nearest wifi signal? Say goodbye to inaccessible pages or cluttered tabs. With MDN Plus, have the fully navigable resources of MDN at your disposal even when offline.\n\nSupport MDN and enjoy a focused, ad-free experience alongside other features such as curated collections, custom web platform updates, offline access, and more. Subscribers to paid tiers of MDN Plus have the option to browse MDN without ads.\n\nFree\n\nIncludes:\n\nUS$5.00\n/month\nBilled monthly\n\nIncludes unlimited access to:\n\nUS$10.00\n/month\nBilled monthly\n\nIncludes unlimited access to:\n\n* Do you need MDN Plus for your company? Let us know and we’ll get back to you when it becomes available.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/plus/updates",
    "title": "Updates | MDN Plus",
    "h1": "   ////////////   ////////////   ////////////   ////////////   ////////////   ////////////   ////////////\n  ++++++  ++++++  ++++++  ++++++  ++++++  ++++++  ++++++\n{{{{ }}}}  {{{{ }}}}  {{{{ }}}}  {{{{ }}}}  {{{{ }}}}  {{{{ }}}}  \n   ../../    ../../    ../../    ../../    ../../    ../../    ../../\n<></><></><></><></><></><></><></><></><></><></><></><></><></><></><></><></>\nUpdates",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nStay up-to-date with the latest browser features.\nWe'd love to hear your feedback!\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/plus/docs/features/overview",
    "title": "Feature Overview | MDN Plus",
    "h1": "OVERVIEW",
    "paragraphs": "Unrivaled cloud expertise with DoiT. A global team of cloud experts with decades of experience on AWS - all on call for you.\nLearn more\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nMore MDN. Your MDN. Get started.\n\nThis page is an overview of the MDN Plus documentation and related resources.\n\nMDN Plus is a premium subscription service launched by Mozilla. The service allows users to customize their MDN Web Docs experience through premium features such as Collections, filtering Updates and MDN Offline.\n\nLearn more about MDN Plus on our website or in this blogpost.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/plus/docs/faq",
    "title": "FAQ | MDN Plus",
    "h1": "FREQUENTLY ASKED QUESTIONS",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nMDN Plus is a premium subscription service launched in March 2022 by Mozilla. The service allows users to customize their MDN Web Docs experience through premium features such as Updates, Collections and MDN Offline.\n\nThe extensive research we have done in 2020 and 2021 showed us that MDN users would appreciate a customized experience on MDN. We’ve got information on what you would find useful and what you would be interested in. All the premium features we propose today reflect that feedback. MDN Plus is an initial step towards making the experience on the site more interactive and helpful for our users.\n\nA three-tiered pricing model has been put in place in order to try and accommodate our users’ needs as much as possible:\n\nSubscribing for a yearly plan activates a 20% discount for all the paid options.\n\nCurrently, you can only upgrade your plan. For getting a downgrade, please cancel your current subscription first and then activate the new one.\n\nNothing. We will continue to develop & maintain our web documentation that will remain free and accessible for everyone. There will be no change there. Even more, we believe that MDN Web Docs will benefit from MDN Plus, as we plan to reinvest part of the gains from MDN Plus and improve our documentation as well as the overall user experience on the website.\n\nMDN content is made available under a CC BY-SA 2.5 license. That license doesn't preclude Mozilla (or other users of MDN content) from having a paid product. MDN Plus adds premium features like updates and collections on top of the free content. Regular users can still access and reuse MDN content under the Creative Commons license.\n\nSince its beginning in 2005, MDN Web Docs has been a project hosted and provided by Mozilla. Mozilla covers the cost of infrastructure, development and maintenance of the MDN platform, including a team of engineers and its own team of dedicated writers.\n\nMozilla wants MDN Plus to help ensure that MDN's open source content continues to be supported into the future. MDN Plus has been built only with Mozilla resources, and any revenue generated by MDN Plus will stay within Mozilla. We are looking into ways to reinvest some of these additional funds into open source projects contributing to MDN but it is still in the early stages.\n\nThe existence of a new subscription model will not detract from MDN's current free Web Docs offering in any way. The current experience of accessing web documentation will not change for users who do not wish to sign up for a premium subscription. Open Web Docs (OWD) and Mozilla will continue to work closely together on MDN for the best possible web platform documentation for everyone. For more information about how our organizations work together, please check this article.\n\nThe free version of MDN Plus is available worldwide. Anyone can create an MDN Plus account and try out a limited version of the premium features. As for the paid plans, they are currently available as follows: in the United States, Canada (since March 24th, 2022), Austria, Belgium, Finland, France, the United Kingdom, Germany, Ireland, Italy, Malaysia, the Netherlands, New Zealand, Puerto Rico, Sweden, Singapore, Switzerland, Spain (since April 28th, 2022), Estonia, Greece, Latvia, Lithuania, Portugal, Slovakia and Slovenia (since June 15th, 2022). We are working on expanding this list even further.\n\nIn case you have an idea you would like to share about MDN Plus, you can add your suggestions to our mdn-community repo.\n\nIf a subscriber, you can also leave us feedback by accessing the ‘Feedback’ option in the user menu.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/curriculum/",
    "title": "MDN Curriculum",
    "h1": "MDN Curriculum",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nThe MDN Curriculum provides a structured guide to the essential skills and practices for being a successful front-end developer, along with recommended learning resources.\n\nLast updated: February 2024\n\nThe go-to resource for the essential skills and knowledge every front-end developer needs for career success and industry relevance.\n\nDeveloped by Mozilla and refined with insights from the broader MDN community.\n\nLearn more\n\nDevelop a great attitude towards learning, researching, and collaborating to enhance your chances of success.\n\nBest Practices\n\nFamiliarize yourself with your development environment and the tools you'll use to build websites.\n\nTooling\n\nUnderstand how the web works at a high level, and the process for creating web technologies.\n\nWeb Standards & Semantics\n\nLearn the fundamentals of HTML, the language used to define and structure web content.\n\nWeb Standards & Semantics\n\nDive into the fundamentals of CSS, the language you'll use to style and layout websites.\n\nStyling\n\nFocus on using CSS to style text and apply custom web fonts.\n\nStyling\n\nLearn modern techniques for creating flexible layouts that work on a wide variety of devices.\n\nStyling\n\nFocus on the core JavaScript language and fundamental surrounding topics.\n\nScripting\n\nUnderstand the need for universal access to web content and how to write accessible code.\n\nBest Practices\n\nAppreciate basic design theory, how to speak design language, and what makes websites look good.\n\nBest Practices\n\nUnderstand why version control is necessary, and use GitHub to store code and collaborate with others.\n\nTooling\n\nAdd animations to your toolbox to enhance user experience and perceived performance.\n\nWeb Standards & Semantics\n\nCreate custom JavaScript objects to gain a deeper understanding of object-oriented programming.\n\nScripting\n\nStudy common WebAPIs in depth to appreciate how WebAPIs work in general.\n\nScripting\n\nExplore how to create performant, fast-loading websites and enhance perceived performance.\n\nBest Practices\n\nLearn how to protect data from unauthorized access and how to treat user data responsibly.\n\nBest Practices\n\nExplore the need for testing, and learn how to implement common test types.\n\nBest Practices\n\nStudy the features of popular JavaScript frameworks, and use them to implement common use cases.\n\nTooling\n\nLook at popular CSS tooling and understand what code problems they can solve.\n\nTooling\n\nUnderstand the purpose and usage of other tooling types commonly found in a web project.\n\nTooling\n\nHow can you\nboost your employability\nwith the MDN\nCurriculum?\n\nLearn about research collaboration and other essential soft skills.\nBalance between modern tooling and long-term best practices.\nGet access to hight-quality recommended resources.\nGet guidance from trusted voices.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/blog/",
    "title": "MDN Blog",
    "h1": "Blog it better",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nThis post reflects on the conventional test automation methods using Selenium and Appium. Learn how you can use TestGrid's unified testing platform to enhance the conventional methods and also leverage the modern codeless testing techniques.\n\nThe long-awaited MDN Curriculum is now live on MDN, providing a structured guide to the essential front-end development skills and best practices for industry newcomers. Learn all the key details in this article.\n\nThis article provides an overview of the core components required for creating effective technical documentation. Learn the best practices to make your documentation clear, consistent, and well-structured.\n\nThis guide explains Bun functionalities as a runtime package manager and a bundler. It also explains the benefits of built-in Bun APIs and how to use Bun's Vultr marketplace application.\n\nAligning with Interop 2023's emphasis on cross-browser consistency, this post walks you through various `border-image` properties that you can control to create captivating web designs. Learn how to use custom graphics for enhancing the look of your websites that appear consistent across different browsers.\n\nLearn how to build AI-powered apps using OpenLLM and Vultr Cloud GPU. This guide shows how to generate API responses using a Large Language Model. It also covers instructions for setting up an Nginx server and implementing SSL security.\n\nThe tail end of 2023 welcomes positive news for web privacy, as Chrome announces it is to join Firefox and Safari in deprecating third-party cookies in 2024. Find out more details about these changes, and what they mean for web developers.\n\nToday we're updating the Baseline widgets and introducing a new one, along with the updated definition of Baseline.\n\nThe JavaScript console is an essential tool for web development. Learn new and fun ways to use the console to display data and debug your code.\n\nCSS container queries are a powerful new tool for our CSS layout toolbox. In this post we'll dive into the practicalities of building a layout with container queries.\n\nLearn how to deploy a Node.js application on Vultr using PM2 to create persistent services. This guide shows how to efficiently use resources via PM2 cluster mode. It also covers Nginx server setup and SSL security.\n\nDiscover essential tips and tricks for using Visual Studio Code (VS Code), a powerful IDE. Learn how to leverage its integrated editing features and Git support, and explore a few extensions.\n\nObservatory 2.0 is launching soon as part of the Mozilla Developer Network as the MDN Observatory with new security scoring standards and other exciting updates.\n\nThis guide explores the various types of CI/CD pipelines and helps you understand their specific use cases. Learn how to leverage rules to create highly efficient DevSecOps workflows.\n\nWhat can web designers and developers do to build a more sustainable web? This post explores the environmental impacts of web technologies and looks at some of the ways we can build greener websites.\n\nThinking about making the move from GitHub to GitLab? This guide demystifies the migration process, addressing common concerns for DevSecOps teams that are looking to seamlessly transition between the two platforms. This post provides a step-by-step guided tutorial on how to migrate your data from GitHub into GitLab.\n\nMDN has created a curriculum for aspiring front-end developers to build a rewarding and successful career. Take a look at the curriculum, who it's for, and the research it's based on.\n\nThe new CSS linear() timing function enables custom easing in animations. Explore how linear() works compared with other timing functions used for easing, with practical examples.\n\nRelying on external resources for your website is always fraught with risks. Learn how to protect your website and its visitors by using SRI to secure third-party content.\n\nScroll-driven animations are coming to CSS! In this post, we'll look at a few types of animations and learn how to link them to the scroll progress of a container.\n\nWe recently launched a feature called AI Explain, but we have rolled this back for now. In this post, we look into the story behind AI Explain: its development, launch, and the reasons that led us to press the pause button.\n\ngrep is a powerful tool for searching code from the terminal. This post will show you how to use grep and why it's an essential developer tool.\n\nWe're introducing an AI assistant powered by MDN and OpenAI GPT 3.5 to answer all your web development questions in real time.\n\nHues are a bright way to define colors in CSS. Learn about hues, color wheels, how to use color functions, and how you can create vibrant color palettes for your website using hue.\n\nMDN is launching a code Playground. Users can prototype ideas and expand all live samples into an interactive experience.\n\nDiscover CSS :lang(), experimental media queries, manipulating graphics with WebGPU, client-server communication with WebTransport, ECMAScript module support, and more.\n\nLearn how to use JavaScript to draw any regular shape to a HTML canvas with a single function, and how to modify it to draw multiple shapes.\n\nSee the latest updates to the MDN reference pages about JavaScript regular expressions, including new sections on sub-features and browser compatibility information.\n\nIn celebration of Global Accessibility Awareness Day in 2023, we share some tools and guidelines to help you make the web more accessible.\n\nLearn what HTML landmark roles are, how they improve accessibility, and how you can include them on your website effectively.\n\nMDN leads the way in implementing WebDX community group's efforts, delivering a clear and simple baseline for the web platform to developers.\n\nLearn how the CSS `:not()` pseudo-class behaves when multiple selectors are passed as argument.\n\nLearn what's new in CSS Colors Module Level 4, including color spaces, color functions, fancy gradients, and support for wide-gamut displays.\n\nThe MDN blog publishes web development news, tutorials, and insights as an extension of MDN Web Docs, helping you discover, learn, and create for the web.\n\nGet the MDN newsletter and never miss an update on the latest web development trends, tips, and best practices.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/play",
    "title": "Playground | MDN",
    "h1": "PLAYGROUND",
    "paragraphs": "See what your team could do with The DevSecOps Platform. Take GitLab for a spin.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://accounts.firefox.com/oauth/?response_type=code&client_id=720bc80adfa6988d&state=d4w8wADBGIMtoSVFJkKOEw&redirect_uri=https%3A%2F%2Fdeveloper.mozilla.org%2Fusers%2Ffxa%2Flogin%2Fcallback%2F&scope=openid%2Bopenid%2Bprofile%2Bemail%2Bprofile%3Asubscriptions&access_type=offline&nonce=-idded3kPayxplSuYYRcxg",
    "title": "Enter your email Continue to MDN Plus",
    "h1": "Enter your email\nContinue to MDN Plus",
    "paragraphs": ""
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla",
    "title": "Mozilla | MDN",
    "h1": "Mozilla",
    "paragraphs": "Unrivaled cloud expertise with DoiT. A global team of cloud experts with decades of experience on Google Cloud - all on call\nLearn more\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nThe articles below include content about downloading and building Mozilla code. In addition, you'll find helpful articles about how the code works, how to build add-ons for Mozilla applications and the like.\n\nAdd-ons allow developers to extend and modify the functionality of Firefox. They are written using standard Web technologies - JavaScript, HTML, and CSS - plus some dedicated JavaScript APIs.\n\nFirefox is Mozilla's popular Web browser, available for multiple platforms including Windows, macOS, and Linux on the desktop and all Android and iOS mobile devices. With broad compatibility, the latest in Web technologies, and powerful development tools, Firefox is a great choice for both Web developers and end users.\n\nThis page was last modified on Jul 4, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons",
    "title": "Add-ons - Mozilla | MDN",
    "h1": "Add-ons",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nAdd-ons allow developers to extend and modify the functionality of Firefox. They are written using standard Web technologies - JavaScript, HTML, and CSS - plus some dedicated JavaScript APIs.\n\nAmong other things, an add-on could:\n\nThere are several types of add-ons, but the most common type are extensions.\n\nIn the past, there were several toolsets for developing Firefox extensions, but as of November 2017, extensions must be built using WebExtensions APIs. Other toolsets, such as overlay add-ons, bootstrapped add-ons, and the Add-on SDK, are no longer supported.\n\nExtensions written using WebExtensions APIs for Firefox are designed to be cross-browser compatible. In most cases, it will run in Chrome, Edge, and Opera with few if any changes. They are also fully compatible with multiprocess Firefox. You can see the APIs currently supported in Firefox and other browsers.\n\nThe Firefox Extension Workshop can help you develop extensions for Firefox and give your users simple, yet powerful ways to customize their browsing experience. You'll find:\n\nIn 2020, Mozilla will release a new Firefox for Android experience. This new, high-performance browser for Android has been rebuilt from the ground up using GeckoView, Mozilla's mobile browser engine. We are currently building support for the WebExtensions API on GeckoView.\n\nIf you maintain a legacy extension, such as an XUL overlay, bootstrapped, or Add-on SDK-based extension, you can still port it to use WebExtension APIs. There are some porting resources on Firefox Extension Workshop, our site for Firefox-specific development resources.\n\nFor more information about transition support, please visit our wiki page.\n\nAddons.mozilla.org, commonly known as \"AMO,\" is Mozilla's official site for developers to list add-ons, and for users to discover them. By uploading your add-on to AMO, you can participate in our community of users and creators and find an audience for your add-on.\n\nYou are not required to list your add-on on AMO, but your add-on must be signed by Mozilla else users will not be able to install it.\n\nFor an overview for the process of publishing your add-on see Signing and distributing your add-on.\n\nIn addition to extensions, there are a few other add-on types that allow users to customize Firefox. Those add-ons include:\n\nCheck out the contact us page for details on how to get help, keep up to date with add-ons news, and give us feedback.\n\nThis page was last modified on Sep 12, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#key_resources",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#get_started",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#concepts",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#user_interface",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "AI and large language models (LLMs) are revolutionizing the way businesses use and process data.\nGet Started free\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#how_to",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "DoiT: Cloud, simplified. Technology and expertise to buy, optimize and manage the cloud. All from an a Google Cloud Partner.\nLearn more\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#firefox_workflow_2",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#reference",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "GitLab is the only place where enterprises build mission‑critical software.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/What_are_WebExtensions",
    "title": "What are extensions? - Mozilla | MDN",
    "h1": "What are extensions?",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nNote: If you are already familiar with the basic concepts of browser extensions, skip this section to see how extension files are put together. Then, use the reference documentation to start building your extension. Visit Firefox Extension Workshop to learn more about the workflow for testing, publishing, and extensions for Firefox.\n\nAn extension adds features and functions to a browser. It's created using familiar web-based technologies — HTML, CSS, and JavaScript. It can take advantage of the same web APIs as JavaScript on a web page, but an extension also has access to its own set of JavaScript APIs. This means that you can do a lot more in an extension than you can with code in a web page. Here are just a few examples of the things you can do:\n\nEnhance or complement a website: Use an add-on to deliver additional in-browser features or information from your website. Allow users to collect details from pages they visit to enhance the service you offer.\n\nExamples: Amazon Assistant for Firefox, OneNote Web Clipper, and Grammarly for Firefox.\n\nLet users show their personality: Browser extensions can manipulate the content of web pages; for example, letting users add their favorite logo or picture as a background to every page they visit. Extensions may also enable users to update the look of the Firefox UI, the same way standalone theme add-ons do.\n\nExamples: MyWeb New Tab, Tabliss, and VivaldiFox.\n\nAdd or remove content from web pages: You might want to help users block intrusive ads from web pages, provide access to a travel guide whenever a country or city is mentioned in a web page, or reformat page content to offer a consistent reading experience. With the ability to access and update both a page's HTML and CSS, extensions can help users see the web the way they want to.\n\nExamples: uBlock Origin, Reader, and Toolbox for Google Play Store™.\n\nAdd tools and new browsing features: Add new features to a taskboard, or generate QR code images from URLs, hyperlinks, or page text. With flexible UI options and the power of the WebExtensions APIs you can easily add new features to a browser. And, you can enhance almost any website's features or functionality, it doesn't have to be your website.\n\nExamples: Swimlanes for Trello and Tomato Clock.\n\nGames: Offer traditional computer games with off-line play features, or explore new game possibilities; for example, by incorporating gameplay into everyday browsing.\n\nExamples: Solitaire Card Game, and 2048 Prime.\n\nAdd development tools: You may provide web development tools as your business or have developed a useful technique or approach to web development that you want to share. Either way, you can enhance the built-in Firefox developer tools by adding a new tab to the developer toolbar.\n\nExamples: Web Developer, Web React Developer Tools, and aXe Developer Tools.\n\nExtensions for Firefox are built using the WebExtensions APIs, a cross-browser system for developing extensions. To a large extent, the API is compatible with the extension API supported by Google Chrome and Opera. Extensions written for these browsers will in most cases run in Firefox or Microsoft Edge with just a few changes.\n\nIf you have ideas or questions, you can reach us on the Add-ons Discourse or in the Add-ons room on Matrix.\n\nThis page was last modified on Jan 3, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension",
    "title": "Your first extension - Mozilla | MDN",
    "h1": "Your first extension",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nNote: If you're familiar with the basic concepts of browser extensions, skip this section to see how extension files are put together. Then, use the reference documentation to start building your extension. Visit Firefox Extension Workshop to learn more about the workflow for testing, publishing, and extensions for Firefox.\n\nThis article walks through creating an extension for Firefox, from start to finish. The extension adds a red border to any pages loaded from \"mozilla.org\" or any of its subdomains.\n\nThe source code for this example is on GitHub: https://github.com/mdn/webextensions-examples/tree/main/borderify.\n\nIn a suitable location, such as in the Documents directory, create a new directory called borderify and navigate to it. You can do this using your computer's file explorer or command line terminal. Understanding how to use the command line terminal is a handy skill, as it helps with your more advanced extension development. Using the terminal, you create the directory like this:\n\nUsing a suitable text editor, create a new file called \"manifest.json\" directly under the \"borderify\" directory. Give it the following contents:\n\nThe most interesting key here is content_scripts, which tells Firefox to load a script into Web pages whose URL matches a specific pattern. In this case, we're asking Firefox to load a script called \"borderify.js\" into all HTTP or HTTPS pages served from \"mozilla.org\" or any of its subdomains.\n\nWarning: In some situations you need to specify an ID for your extension. If you do need to specify an add-on ID, include the browser_specific_settings key in manifest.json and set its gecko.id property:\n\nThe extension should have an icon. This will be shown next to the extension's listing in the Add-ons Manager. Our manifest.json promised that we would have an icon at \"icons/border-48.png\".\n\nCreate the \"icons\" directory directly under the \"borderify\" directory. Save an icon there named \"border-48.png\". You could use the one from our example, which is taken from the Google Material Design iconset, and is used under the terms of the Creative Commons Attribution-ShareAlike license.\n\nIf you choose to supply your own icon, It should be 48x48 pixels. You could also supply a 96x96 pixel icon, for high-resolution displays, and if you do this it will be specified as the 96 property of the icons object in manifest.json:\n\nAlternatively, you could supply an SVG file here, and it will be scaled correctly. (Though: if you're using SVG and your icon includes text, you may want to use your SVG editor's \"convert to path\" tool to flatten the text, so that it scales with a consistent size/position.)\n\nFinally, create a file called \"borderify.js\" directly under the \"borderify\" directory. Give it this content:\n\nThis script will be loaded into the pages that match the pattern given in the content_scripts manifest.json key. The script has direct access to the document, just like scripts loaded by the page itself.\n\nFirst, double check that you have the right files in the right places:\n\nIn Firefox: Open the about:debugging page, click the This Firefox option, click the Load Temporary Add-on button, then select any file in your extension's directory.\n\nThe extension now installs, and remains installed until you restart Firefox.\n\nAlternatively, you can run the extension from the command line using the web-ext tool.\n\nNote: By default extensions don't work in private browsing. If you want to test this extension in private browsing open \"about:addons\", click on the extension, and select the Allow radio button for Run in Private Windows.\n\nNow visit a page under \"https://www.mozilla.org/en-US/\", and you should see the red border round the page.\n\nNote: Don't try it on \"addons.mozilla.org\", though! Content scripts are currently blocked on that domain.\n\nTry experimenting a bit. Edit the content script to change the color of the border, or do something else to the page content. Save the content script, then reload the extension's files by clicking the Reload button in \"about:debugging\". You can see the changes right away.\n\nFor other people to use your extension, you need to package it and submit it to Mozilla for signing. To learn more about that, see \"Publishing your extension\".\n\nNow you've had an introduction to the process of developing a WebExtension for Firefox:\n\nThis page was last modified on Aug 2, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_second_WebExtension",
    "title": "Your second extension - Mozilla | MDN",
    "h1": "Your second extension",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nIf you've been through the Your first extension article, you've already got an idea of how to write an extension. In this article, you'll write a slightly more complex extension that demonstrates a few more of the APIs.\n\nThe extension adds a new button to the Firefox toolbar. When the user clicks the button, we display a popup enabling them to choose an animal. Once they choose an animal, we'll replace the current page's content with a picture of the chosen animal.\n\nTo implement this, we will:\n\nYou could visualize the overall structure of the extension like this:\n\nIt's a simple extension, but shows many of the basic concepts of the WebExtensions API:\n\nYou can find complete source code for the extension on GitHub.\n\nCreate a new directory and navigate to it:\n\nNow create a new file called \"manifest.json\", and give it the following contents:\n\nNote that all paths given are relative to manifest.json itself.\n\nThe extension should have an icon. This will be shown next to the extension's listing in the Add-ons Manager (you can open this by visiting the URL \"about:addons\"). Our manifest.json promised that we would have an icon for the toolbar at \"icons/beasts-48.png\".\n\nCreate the \"icons\" directory and save an icon there named \"beasts-48.png\". You could use the one from our example, which is taken from the Aha-Soft's Free Retina iconset, and used under the terms of its license.\n\nIf you choose to supply your own icon, It should be 48x48 pixels. You could also supply a 96x96 pixel icon, for high-resolution displays, and if you do this it will be specified as the 96 property of the icons object in manifest.json:\n\nThe toolbar button also needs an icon, and our manifest.json promised that we would have an icon for the toolbar at \"icons/beasts-32.png\".\n\nSave an icon named \"beasts-32.png\" in the \"icons\" directory. You could use the one from our example, which is taken from the IconBeast Lite icon set and used under the terms of its license.\n\nIf you don't supply a popup, then a click event is dispatched to your extension when the user clicks the button. If you do supply a popup, the click event is not dispatched, but instead, the popup is opened. We want a popup, so let's create that next.\n\nThe function of the popup is to enable the user to choose one of three beasts.\n\nCreate a new directory called \"popup\" under the extension root. This is where we'll keep the code for the popup. The popup will consist of three files:\n\nThe HTML file looks like this:\n\nWe have a <div> element with an ID of \"popup-content\" that contains a button for each animal choice and a reset button. We have another <div> with an ID of \"error-content\" and a class \"hidden\". We'll use that in case there's a problem initializing the popup.\n\nNote that we include the CSS and JS files from this file, just like a web page.\n\nThe CSS fixes the size of the popup, ensures that the three choices fill the space, and gives them some basic styling. It also hides elements with class=\"hidden\": this means that our <div id=\"error-content\"... element will be hidden by default.\n\nHere's the JavaScript for the popup:\n\nThe place to start here is line 99. The popup script executes a content script in the active tab as soon as the popup is loaded, using the browser.tabs.executeScript() API. If executing the content script is successful, then the content script will stay loaded in the page until the tab is closed or the user navigates to a different page.\n\nA common reason the browser.tabs.executeScript() call might fail is that you can't execute content scripts in all pages. For example, you can't execute them in privileged browser pages like about:debugging, and you can't execute them on pages in the addons.mozilla.org domain. If it does fail, reportExecuteScriptError() will hide the <div id=\"popup-content\"> element, show the <div id=\"error-content\"... element, and log an error to the console.\n\nIf executing the content script is successful, we call listenForClicks(). This listens for clicks on the popup.\n\nThe beastify() function does three things:\n\nThe reset() function essentially undoes a beastify:\n\nCreate a new directory, under the extension root, called \"content_scripts\" and create a new file in it called \"beastify.js\", with the following contents:\n\nThe first thing the content script does is to check for a global variable window.hasRun: if it's set the script returns early, otherwise it sets window.hasRun and continues. The reason we do this is that every time the user opens the popup, the popup executes a content script in the active tab, so we could have multiple instances of the script running in a single tab. If this happens, we need to make sure that only the first instance is actually going to do anything.\n\nAfter that, the place to start is line 40, where the content script listens for messages from the popup, using the browser.runtime.onMessage API. We saw above that the popup script can send two different sorts of messages: \"beastify\" and \"reset\".\n\nFinally, we need to include the images of the beasts.\n\nCreate a new directory called \"beasts\", and add the three images in that directory, with the appropriate names. You can get the images from the GitHub repository, or from here:\n\nFirst, double check that you have the right files in the right places:\n\nNow load the extension as a temporary add-on. Open \"about:debugging\" in Firefox, click \"Load Temporary Add-on\", and select your manifest.json file. You should then see the extension's icon appear in the Firefox toolbar:\n\nOpen a web page, click the icon, select a beast, and see the web page change:\n\nYou can automate the temporary installation step by using the web-ext tool. Try this:\n\nNow that you've created a more advanced WebExtension for Firefox:\n\nThis page was last modified on Aug 2, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Anatomy_of_a_WebExtension",
    "title": "Anatomy of an extension - Mozilla | MDN",
    "h1": "Anatomy of an extension",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.Mozilla ads\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nMozilla ads\n\nAn extension consists of a collection of files, packaged for distribution and installation. In this article, we will quickly go through the files that might be present in an extension.\n\nThis is the only file that must be present in every extension. It contains basic metadata such as its name, version, and the permissions it requires. It also provides pointers to other files in the extension.\n\nThe manifest can also contain pointers to several other types of files:\n\nScripts that respond to browser events.\n\nFor the extension and any buttons it might define.\n\nHTML documents that provide content for various user interface components.\n\nJavaScript included with your extension, that you will inject into web pages.\n\nMake packaged content accessible to web pages and content scripts.\n\nSee the manifest.json reference page for all the details.\n\nAlong with those already listed in the manifest, an extension may also include additional Extension pages and supporting files.\n\nExtensions often need to respond to events that occur in the browser independently of the lifetime of any particular web page or browser window. That is what background scripts are for.\n\nBackground scripts can be persistent or non-persistent. Persistent background scripts load as soon as the extension loads and stay loaded until the extension is disabled or uninstalled. This background script behavior is only available in Manifest V2. Non-persistent background scripts load when needed to respond to an event and unload when they become idle. This background script behavior is an option in Manifest V2 and the only background script behavior available in Manifest V3.\n\nYou can use any of the WebExtension APIs in the script, if you have requested the necessary permissions.\n\nSee the background scripts article to learn more.\n\nYour extension can include various user interface components whose content is defined using an HTML document:\n\nA pane that is displayed at the left-hand side of the browser window, next to the web page.\n\nA dialog that you can display when the user clicks on a toolbar button or address bar button\n\nA page that's shown when the user accesses your add-on's preferences in the browser's native add-ons manager.\n\nFor each of these components, you create an HTML file and point to it using a specific property in manifest.json. The HTML file can include CSS and JavaScript files, just like a normal web page.\n\nAll of these are a type of Extension pages. Unlike a normal web page, your JavaScript can use all the same privileged WebExtension APIs as your background script.\n\nYou can also include HTML documents in your extension which are not attached to some predefined user interface component. Unlike the documents you might provide for sidebars, popups, or options pages, these don't have an entry in manifest.json. However, they do also get access to all the same privileged WebExtension APIs as your background script.\n\nYou'd typically load a page like this using windows.create() or tabs.create().\n\nSee Extension pages to learn more.\n\nUse content scripts to access and manipulate web pages. Content scripts are loaded into web pages and run in the context of that particular page.\n\nContent scripts are extension-provided scripts which run in the context of a web page; this differs from scripts which are loaded by the page itself, including those which are provided in <script> elements within the page.\n\nContent scripts can see and manipulate the page's DOM, just like normal scripts loaded by the page.\n\nUnlike normal page scripts, content scripts can:\n\nContent scripts cannot directly access normal page scripts but can exchange messages with them using the standard window.postMessage() API.\n\nUsually, when we talk about content scripts, we are referring to JavaScript, but you can inject CSS into web pages using the same mechanism.\n\nSee the content scripts article to learn more.\n\nWeb accessible resources are resources—such as images, HTML, CSS, and JavaScript—that you include in the extension and want to make accessible to content scripts and page scripts. Resources which are made web-accessible can be referenced by page scripts and content scripts using a special URI scheme.\n\nFor example, if a content script wants to insert some images into web pages, you could include them in the extension and make them web accessible. Then the content script could create and append img tags which reference the images via the src attribute.\n\nTo learn more, see the documentation for the \"web_accessible_resources\" manifest.json key.\n\nThis page was last modified on Jul 18, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Examples",
    "title": "Example extensions - Mozilla | MDN",
    "h1": "Example extensions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nTo illustrate how to use the WebExtension APIs, we maintain a repository of example extensions at https://github.com/mdn/webextensions-examples. This article describes how to run these examples and lists the examples along with the WebExtension APIs they demonstrate.\n\nThese examples work in Firefox Nightly: most work in earlier versions of Firefox, but check the strict_min_version key in the extension's manifest.json to make sure.\n\nWarning: Some examples work only on specific domains or pages. Details of any restrictions are provided in each example's readme file. None of the examples work in private browsing windows by default, see Extensions in Private Browsing for details.\n\nTo try these examples, clone the repository, then install and run the extension using one of these options:\n\nThe extension stays loaded until you restart Firefox.\n\nWarning: Please do not submit these WebExtension examples to addons.mozilla.org (AMO); you do not have to sign the add-on WebExtension examples to run them.\n\nIf you want to contribute to the repository, send us a pull request.\n\nThis page was last modified on Aug 25, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/What_next",
    "title": "What next? - Mozilla | MDN",
    "h1": "What next?",
    "paragraphs": "GitLab is the only place where enterprises build mission‑critical software.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.Mozilla ads\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nMozilla ads\n\nYou'll now be ready to start turning your idea for a browser extension into reality. Before you start that journey, it's worth being aware of a few things that will help to make it a smooth one.\n\nYou can find more about many of the things discussed on this page on Extension Workshop, a website dedicated to helping you write, test, publish, and distribute extensions for Firefox.\n\nYou don't need any special development or build environment tools to create browser extensions: It's entirely possible to create great browser extensions with no more than a text editor. However, you may have been developing for the web and have a set of tools and an environment you want to reuse. If you do, you need to be aware of a couple of things.\n\nIf you use minification or obfuscation tools to deliver your final code, you'll need to provide your source code to the AMO review process. Also, the tools you use—those for minification, obfuscation, and build processes—will need to be open source (or offer unlimited free use) and be available to run on the reviewer's computer (Windows, Mac, or Linux). Unfortunately, our reviewers can't work with commercial or web-based tools.\n\nLearn more about development tools on Extension Workshop\n\nThird-party libraries are a great way to add complex features or functionality to your browser extensions quickly. When you submit an extension to the AMO review process, the process will also consider any third-party libraries used. To streamline the review, make sure you always download third-party libraries from their official website or repository, and if the library is minified provide a link to the source code. Please note that third-party libraries cannot be modified in any way.\n\nLearn more about submitting source code on Extension Workshop\n\nBrowser extensions need to be signed to install into the release or beta versions of Firefox. Signing takes place in addons.mozilla.org (AMO) and is subject to the terms and conditions of the Firefox Add-on Distribution Agreement. The goal of the agreement is to ensure Firefox users get access to well supported, quality add-ons that enhance the Firefox experience.\n\nRead the agreement on Extension Workshop\n\nLearn more about signing on Extension Workshop\n\nWhen a browser extension is submitted for signing, it's subject to automated review. It may also be subject to a manual review, when the automated review determines that a manual review is needed. Your browser extension won't be signed until it's passed the automated review and may have its signing revoked if it fails to pass the manual review. The review process follows a strict set of guidelines, so it's easy to check and avoid any likely review problems.\n\nCheck out the review policy and guidelines on Extension Workshop\n\nIf you choose to list your browser extension on AMO, your extension could be featured on the AMO website, in the Firefox browser's add-on manager, or elsewhere on a Mozilla website. We've compiled a list of guidelines about how extensions are selected for featuring, by following these guidelines you give your extension the best chance of being featured.\n\nLearn more about getting your add-ons featured on Extension Workshop\n\nNow you know what lies ahead, it's time to dive into more details about browser extension development. In the sections that follow, you'll discover:\n\nYou'll also want to head on over to Extension Workshop where you'll find everything you need to know about creating extensions for Firefox, including:\n\nThis page was last modified on Jul 6, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API",
    "title": "JavaScript APIs - Mozilla | MDN",
    "h1": "JavaScript APIs",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nJavaScript APIs for WebExtensions can be used inside the extension's background scripts and in any other documents bundled with the extension, including browser action or page action popups, sidebars, options pages, or new tab pages. A few of these APIs can also be accessed by an extension's content scripts. (See the list in the content script guide.)\n\nTo use the more powerful APIs, you need to request permission in your extension's manifest.json.\n\nYou can access the APIs using the browser namespace:\n\nMany of the APIs are asynchronous, returning a Promise:\n\nNote that this is different from Google Chrome's extension system, which uses the chrome namespace instead of browser, and which uses callbacks instead of promises for asynchronous functions. As a porting aid, the Firefox implementation of WebExtensions APIs supports chrome and callbacks as well as browser and promises. Mozilla has also written a polyfill which enables code that uses browser and promises to work unchanged in Chrome: https://github.com/mozilla/webextension-polyfill.\n\nFirefox also implements these APIs under the chrome namespace using callbacks. This allows code written for Chrome to run largely unchanged in Firefox for the APIs documented here.\n\nMicrosoft Edge uses the browser namespace, but doesn't yet support promise-based asynchronous APIs. In Edge, for the time being, asynchronous APIs must use callbacks.\n\nNot all browsers support all the APIs: for the details, see Browser support for JavaScript APIs and Chrome incompatibilities.\n\nThroughout the JavaScript API listings, short code examples illustrate how the API is used. You can experiment with most of these examples using the console in the Toolbox. However, you need Toolbox running in the context of a web extension. To do this, open about:debugging then This Firefox, click Inspect against any installed or temporary extension, and open Console. You can then paste and run the example code in the console.\n\nFor example, here is the first code example on this page running in the Toolbox console in Firefox Developer Edition:\n\nSee below for a complete list of JavaScript APIs:\n\nAdds a button to the browser's toolbar.\n\nSchedule code to run at a specific time in the future. This is like setTimeout() and setInterval(), except that those functions don't work with background pages that are loaded on demand.\n\nThe WebExtensions bookmarks API lets an extension interact with and manipulate the browser's bookmarking system. You can use it to bookmark pages, retrieve existing bookmarks, and edit, remove, and organize bookmarks.\n\nAdds a button to the browser's toolbar.\n\nEnables an extension to modify certain global browser settings. Each property of this API is a types.BrowserSetting object, providing the ability to modify a particular setting.\n\nEnables extensions to clear the data that is accumulated while the user is browsing.\n\nDetermine the captive portal state of the user's connection. A captive portal is a web page displayed when a user first connects to a Wi-Fi network. The user provides information or acts on the captive portal web page to gain broader access to network resources, such as accepting terms and conditions or making a payment.\n\nThe WebExtension clipboard API (which is different from the standard Clipboard API) enables an extension to copy items to the system clipboard. Currently the WebExtension clipboard API only supports copying images, but it's intended to support copying text and HTML in the future.\n\nListen for the user executing commands that you have registered using the commands manifest.json key.\n\nUse this API to register content scripts. Registering a content script instructs the browser to insert the given content scripts into pages that match the given URL patterns.\n\nWork with contextual identities: list, create, remove, and update contextual identities.\n\nEnables extensions to get and set cookies, and be notified when they change.\n\nThis API enables extensions to specify conditions and actions that describe how network requests should be handled. These declarative rules enable the browser to evaluate and modify network requests without notifying extensions about individual network requests.\n\nEnables extensions to interact with the browser's Developer Tools. You use this API to create Developer Tools pages, interact with the window that is being inspected, inspect the page network usage.\n\nEnables an extension to resolve domain names.\n\nAccess special extension only DOM features.\n\nEnables extensions to interact with the browser's download manager. You can use this API module to download files, cancel, pause, resume downloads, and show downloaded files in the file manager.\n\nCommon types used by APIs that dispatch events.\n\nUtilities related to your extension. Get URLs to resources packages with your extension. Get the Window object for your extension's pages. Get the values for various settings.\n\nSome common types used in other WebExtension APIs.\n\nFinds text in a web page, and highlights matches.\n\nUse the history API to interact with the browser history.\n\nFunctions to internationalize your extension. You can use these APIs to get localized strings from locale files packaged with your extension, find out the browser's current language, and find out the value of its Accept-Language header.\n\nUse the identity API to get an OAuth2 authorization code or access token, which an extension can then use to access user data from a service that supports OAuth2 access (such as Google or Facebook).\n\nFind out when the user's system is idle, locked, or active.\n\nGet information about installed add-ons.\n\nAdd items to the browser's menu system.\n\nDisplay notifications to the user, using the underlying operating system's notification mechanism. Because this API uses the operating system's notification mechanism, the details of how notifications appear and behave may differ according to the operating system and the user's settings.\n\nEnables extensions to implement customized behavior when the user types into the browser's address bar.\n\nThe API to control address bar button.\n\nEnables extensions to request extra permissions at runtime, after they have been installed.\n\nThe pkcs11 API enables an extension to enumerate PKCS #11 security modules and to make them accessible to the browser as sources of keys and certificates.\n\nAccess and modify various privacy-related browser settings.\n\nUse the proxy API to proxy web requests. You can use the proxy.onRequest event listener to intercept web requests, and return an object that describes whether and how to proxy them.\n\nThis module provides information about your extension and the environment it's running in.\n\nInserts JavaScript and CSS into websites. This API offers two approaches to inserting content:\n\nUse the search API to retrieve the installed search engines and execute searches.\n\nUse the sessions API to list, and restore, tabs and windows that have been closed while the browser has been running.\n\nGets and sets properties of an extension's sidebar.\n\nEnables extensions to store and retrieve data, and listen for changes to stored items.\n\nInteract with the browser's tab system.\n\nEnables browser extensions to get details of the browser's theme and update the theme.\n\nUse the topSites API to get an array containing pages that the user has visited frequently.\n\nDefines the BrowserSetting type, which is used to represent a browser setting.\n\nUse this API to register user scripts, third-party scripts designed to manipulate webpages or provide new features. Registering a user script instructs the browser to attach the script to pages that match the URL patterns specified during registration.\n\nAdd event listeners for the various stages of a navigation. A navigation consists of a frame in the browser transitioning from one URL to another, usually (but not always) in response to a user action like clicking a link or entering a URL in the location bar.\n\nAdd event listeners for the various stages of making an HTTP request, which includes websocket requests on ws:// and wss://. The event listener receives detailed information about the request and can modify or cancel the request.\n\nInteract with browser windows. You can use this API to get information about open windows and to open, modify, and close windows. You can also listen for window open, close, and activate events.\n\nThis page was last modified on Jul 18, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_scripts",
    "title": "Content scripts - Mozilla | MDN",
    "h1": "Content scripts",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nA content script is a part of your extension that runs in the context of a particular web page (as opposed to background scripts which are part of the extension, or scripts which are part of the website itself, such as those loaded using the <script> element).\n\nBackground scripts can access all the WebExtension JavaScript APIs, but they can't directly access the content of web pages. So if your extension needs to do that, you need content scripts.\n\nJust like the scripts loaded by normal web pages, content scripts can read and modify the content of their pages using the standard DOM APIs. However, they can only do this when host permissions to the web page's origin have been granted.\n\nContent scripts can only access a small subset of the WebExtension APIs, but they can communicate with background scripts using a messaging system, and thereby indirectly access the WebExtension APIs.\n\nYou can load a content script into a web page:\n\nThere is only one global scope per frame, per extension. This means that variables from one content script can directly be accessed by another content script, regardless of how the content script was loaded.\n\nUsing methods (1) and (2), you can only load scripts into pages whose URLs can be represented using a match pattern.\n\nUsing method (3), you can also load scripts into pages packaged with your extension, but you can't load scripts into privileged browser pages (like \"about:debugging\" or \"about:addons\").\n\nNote: Dynamic JS module imports are now working in content scripts. For more details, see Firefox bug 1536094. Only URLs with the moz-extension scheme are allowed, which excludes data URLs (Firefox bug 1587336).\n\nRegistered content scripts are only executed if the extension is granted host permissions for the domain.\n\nTo inject scripts programmatically, the extension needs either the activeTab permission or host permissions. The scripting permission is required to use methods from the scripting API.\n\nStarting with Manifest V3, host permissions are not automatically granted at install time. Users may opt in or out of host permissions after installing the extension.\n\nBoth host permissions and the activeTab permission have exceptions for some domains. Content scripts are blocked from executing on these domains, for example, to protect the user from an extension escalating privileges through special pages.\n\nIn Firefox, this includes the following domains:\n\nOther browsers have similar restrictions over the websites extensions can be installed from. For example, access to chrome.google.com is restricted in Chrome.\n\nNote: Because these restrictions include addons.mozilla.org, users who try to use your extension immediately after installation may find that it doesn't work. To avoid this, you should add an appropriate warning or an onboarding page to move users away from addons.mozilla.org.\n\nThe set of domains can be restricted further through enterprise policies: Firefox recognizes the restricted_domains policy as documented at ExtensionSettings in mozilla/policy-templates. Chrome's runtime_blocked_hosts policy is documented at Configure ExtensionSettings policy.\n\nWhole tabs or frames may be loaded using data: URI, Blob objects, and other similar techniques. Support of content scripts injection into such special documents varies across browsers, see the Firefox bug #1411641 comment 41 for some details.\n\nContent scripts can access and modify the page's DOM, just like normal page scripts can. They can also see any changes that were made to the DOM by page scripts.\n\nHowever, content scripts get a \"clean\" view of the DOM. This means:\n\nAs noted at \"Content script environment\" at Chrome incompatibilities, the behavior differs across browsers:\n\nConsider a web page like this:\n\nThe script page-script.js does this:\n\nNow an extension injects a content script into the page:\n\nThe same is true in reverse; page scripts cannot see JavaScript properties added by content scripts.\n\nThis means that content scripts can rely on DOM properties behaving predictably, without worrying about its variables clashing with variables from the page script.\n\nOne practical consequence of this behavior is that a content script doesn't have access to any JavaScript libraries loaded by the page. So, for example, if the page includes jQuery, the content script can't see it.\n\nIf a content script needs to use a JavaScript library, then the library itself should be injected as a content script alongside the content script that wants to use it:\n\nNote: Firefox does provide some APIs that enable content scripts to access JavaScript objects created by page scripts, and to expose their own JavaScript objects to page scripts.\n\nSee Sharing objects with page scripts for more details.\n\nIn addition to the standard DOM APIs, content scripts can use the following WebExtension APIs:\n\nFrom extension:\n\nFrom runtime:\n\nFrom i18n:\n\nFrom menus:\n\nEverything from:\n\nContent scripts can make requests using the normal window.XMLHttpRequest and window.fetch() APIs.\n\nNote: In Firefox in Manifest V2, content script requests (for example, using fetch()) happen in the context of an extension, so you must provide an absolute URL to reference page content.\n\nIn Chrome and Firefox in Manifest V3, these requests happen in context of the page, so they are made to a relative URL. For example, /api is sent to https://«current page URL»/api.\n\nContent scripts get the same cross-domain privileges as the rest of the extension: so if the extension has requested cross-domain access for a domain using the permissions key in manifest.json, then its content scripts get access that domain as well.\n\nNote: When using Manifest V3, content scripts can perform cross-origin requests when the destination server opts in using CORS; however, host permissions don't work in content scripts, but they still do in regular extension pages.\n\nThis is accomplished by exposing more privileged XHR and fetch instances in the content script, which has the side effect of not setting the Origin and Referer headers like a request from the page itself would; this is often preferable to prevent the request from revealing its cross-origin nature.\n\nNote: In Firefox in Manifest V2, extensions that need to perform requests that behave as if they were sent by the content itself can use content.XMLHttpRequest and content.fetch() instead.\n\nFor cross-browser extensions, the presence of these methods must be feature-detected.\n\nThis is not possible in Manifest V3, as content.XMLHttpRequest and content.fetch() are not available.\n\nNote: In Chrome, starting with version 73, and Firefox, starting with version 101 when using Manifest V3, content scripts are subject to the same CORS policy as the page they are running within. Only backend scripts have elevated cross-domain privileges. See Changes to Cross-Origin Requests in Chrome Extension Content Scripts.\n\nAlthough content scripts can't directly use most of the WebExtension APIs, they can communicate with the extension's background scripts using the messaging APIs, and can therefore indirectly access all the same APIs that the background scripts can.\n\nThere are two basic patterns for communicating between the background scripts and content scripts:\n\nTo send one-off messages, with an optional response, you can use the following APIs:\n\nFor example, here's a content script that listens for click events in the web page.\n\nIf the click was on a link, it sends a message to the background page with the target URL:\n\nThe background script listens for these messages and displays a notification using the notifications API:\n\n(This example code is lightly adapted from the notify-link-clicks-i18n example on GitHub.)\n\nSending one-off messages can get cumbersome if you are exchanging a lot of messages between a background script and a content script. So an alternative pattern is to establish a longer-lived connection between the two contexts, and use this connection to exchange messages.\n\nBoth sides have a runtime.Port object, which they can use to exchange messages.\n\nTo create the connection:\n\nThis returns a runtime.Port object.\n\nOnce each side has a port, the two sides can:\n\nFor example, as soon as it loads, the following content script:\n\nThe corresponding background script:\n\nIf you have multiple content scripts communicating at the same time, you might want to store connections to them in an array.\n\nThe choice between one-off and connection-based messaging depends on how your extension expects to make use of messaging.\n\nThe recommended best practices are:\n\nBy default, content scripts don't get access to the objects created by page scripts. However, they can communicate with page scripts using the DOM window.postMessage and window.addEventListener APIs.\n\nFor example:\n\nFor a complete working example of this, visit the demo page on GitHub and follow the instructions.\n\nWarning: Be very careful when interacting with untrusted web content in this manner! Extensions are privileged code which can have powerful capabilities and hostile web pages can easily trick them into accessing those capabilities.\n\nTo give a trivial example, suppose the content script code that receives the message does something like this:\n\nNow the page script can run any code with all the privileges of the content script.\n\nNote: eval() not available in Manifest V3.\n\neval always runs code in the context of the content script, not in the context of the page.\n\nIf you call eval(), it runs code in the context of the content script.\n\nIf you call window.eval(), it runs code in the context of the page.\n\nFor example, consider a content script like this:\n\nThis code just creates some variables x and y using window.eval() and eval(), logs their values, and then messages the page.\n\nOn receiving the message, the page script logs the same variables:\n\nIn Chrome, this produces output like this:\n\nIn Firefox, this produces output like this:\n\nThe same applies to setTimeout(), setInterval(), and Function().\n\nWarning: Be very careful when running code in the context of the page!\n\nThe page's environment is controlled by potentially malicious web pages, which can redefine objects you interact with to behave in unexpected ways:\n\nThis page was last modified on Dec 12, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Background_scripts",
    "title": "Background scripts - Mozilla | MDN",
    "h1": "Background scripts",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nBackground scripts or a background page enable you to monitor and react to events in the browser, such as navigating to a new page, removing a bookmark, or closing a tab.\n\nBackground scripts or a page are:\n\nNote: In Firefox, if the extension process crashes:\n\nIn Manifest V2, background scripts or a page can be persistent or non-persistent. Non-persistent background scripts are recommended as they reduce the resource cost of your extension. In Manifest V3, only non-persistent background scripts or a page are supported.\n\nIf you have persistent background scripts or a page in Manifest V2 and want to prepare your extension for migration to Manifest V3, Convert to non-persistent provides advice on transitioning the scripts or page to the non-persistent model.\n\nBackground scripts run in the context of a special page called a background page. This gives them a window global, along with all the standard DOM APIs provided by that object.\n\nWarning: In Firefox, background pages do not support the use of alert(), confirm(), or prompt().\n\nBackground scripts can use any WebExtension APIs, as long as their extension has the necessary permissions.\n\nBackground scripts can make XHR requests to hosts they have host permissions for.\n\nBackground scripts do not get direct access to web pages. However, they can load content scripts into web pages and communicate with these content scripts using a message-passing API.\n\nBackground scripts are restricted from certain potentially dangerous operations, such as the use of eval(), through a Content Security Policy.\n\nSee Content Security Policy for more details.\n\nThis section describes how to implement a non-persistent background script.\n\nIn your extension, you include a background script or scripts, if you need them, using the \"background\" key in manifest.json. For Manifest V2 extensions, the persistent property must be false to create a non-persistent script. It can be omitted for Manifest V3 extensions or must be set to false, as script are always non-persistent in Manifest V3. Including \"type\": \"module\" loads the background scripts as ES modules.\n\nThese scripts execute in the extension's background page, so they run in the same context, like scripts loaded into a web page.\n\nHowever, if you need certain content in the background page, you can specify one. You then specify your script from the page rather than using the \"scripts\" property. Before the introduction of the \"type\" property to the \"background\" key, this was the only option to include ES modules. You specify a background page like this:\n\nYou cannot specify background scripts and a background page.\n\nListen to runtime.onInstalled to initialize an extension on installation. Use this event to set a state or for one-time initialization.\n\nFor extensions with event pages, this is where stateful APIs, such as a context menu created using menus.create, should be used. This is because stateful APIs don't need to be run each time the event page reloads; they only need to run when the extension is installed.\n\nStructure background scripts around events the extension depends on. Defining relevant events enables background scripts to lie dormant until those events are fired and prevents the extension from missing essential triggers.\n\nListeners must be registered synchronously from the start of the page.\n\nDo not register listeners asynchronously, as they will not be properly triggered. So, rather than:\n\nDo this:\n\nExtensions can remove listeners from their background scripts by calling removeListener, such as with runtime.onMessage removeListener. If all listeners for an event are removed, the browser no longer loads the extension's background script for that event.\n\nUse APIs that support event filters to restrict listeners to the cases the extension cares about. If an extension is listening for tabs.onUpdated, use the webNavigation.onCompleted event with filters instead, as the tabs API does not support filters.\n\nListeners exist to trigger functionality once an event has fired. To react to an event, structure the desired reaction inside the listener event.\n\nWhen responding to events in the context of a specific tab or frame, use the tabId and frameId from the event details instead of relying on the \"current tab\". Specifying the target ensures your extension does not invoke an extension API on the wrong target when the \"current tab\" changes while waking the event page.\n\nFor example, runtime.onMessage can respond to runtime.sendMessage calls as follows:\n\nData should be persisted periodically to not lose important information if an extension crashes without receiving runtime.onSuspend. Use the storage API to assist with this.\n\nMessage ports cannot prevent an event page from shutting down. If an extension uses message passing, the ports are closed when the event page idles. Listening to the runtime.Port onDisconnect lets you discover when open ports are closing, however the listener is under the same time constraints as runtime.onSuspend.\n\nBackground scripts unload after a few seconds of inactivity. However, if during the suspension of a background script another event wakes the background script, runtime.onSuspendCanceled is called and the background script continues running. If any cleanup is required, listen to runtime.onSuspend.\n\nHowever, persisting data should be preferred rather than relying on runtime.onSuspend. It doesn't allow for as much cleanup as may be needed and does not help in case of a crash.\n\nIf you've a persistent background script, this section provides instructions on converting it to the non-persistent model.\n\nIn your extension's manifest.json file, change the persistent property of \"background\" key to false for your script or page.\n\nListeners must be at the top-level to activate the background script if an event is triggered. Registered listeners may need to be restructured to the synchronous pattern and moved to the top-level.\n\nScripts now open and close as needed. So, do not rely on global variables.\n\nInstead, use the storage API to set and return states and values:\n\nThe preceding example sends an asynchronous response using a promise, which is not supported in Chrome until Chrome bug 1185241 is resolved. A cross-browser alternative is to return true and use sendResponse.\n\nDOM-based timers, such as setTimeout(), do not remain active after an event page has idled. Instead, use the alarms API if you need a timer to wake an event page.\n\nThen add a listener.\n\nExtensions commonly host their primary functionality in the background script. Some extensions access functions and variables defined in the background page through the window returned by extension.getBackgroundPage. The method returns null when:\n\nNote: The recommended way to invoke functionality in the background script is to communicate with it through runtime.sendMessage() or runtime.connect(). The getBackgroundPage() methods discussed in this section cannot be used in a cross-browser extension, because Manifest Version 3 extensions in Chrome cannot use background or event pages.\n\nIf your extension requires a reference to the window of the background page, use runtime.getBackgroundPage to ensure the event page is running. If the call is optional (that is, only needed if the event page is alive) then use extension.getBackgroundPage.\n\nThis page was last modified on Oct 28, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns",
    "title": "Match patterns - Mozilla | MDN",
    "h1": "Match patterns",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nMatch patterns are a way to specify groups of URLs: a match pattern matches a specific set of URLs. They are used in WebExtensions APIs in a few places, most notably to specify which documents to load content scripts into, and to specify which URLs to add webRequest listeners to.\n\nAPIs that use match patterns usually accept a list of match patterns, and will perform the appropriate action if the URL matches any of the patterns. See, for example, the content_scripts key in manifest.json.\n\nNote: Some browsers don't support certain schemes. Check the Browser compatibility table for details.\n\nAll match patterns are specified as strings. Apart from the special <all_urls> pattern, match patterns consist of three parts: scheme, host, and path. The scheme and host are separated by ://.\n\nThe scheme component may take one of two forms:\n\nThe host component may take one of three forms:\n\nhost must not include a port number.\n\nhost is optional only if the scheme is \"file\".\n\nNote that the wildcard may only appear at the start.\n\nThe path component must begin with a /.\n\nAfter that, it may subsequently contain any combination of the * wildcard and any of the characters that are allowed in URL paths or query strings. Unlike host, the path component may contain the * wildcard in the middle or at the end, and the * wildcard may appear more than once.\n\nThe value for the path matches against the string which is the URL path plus the URL query string. This includes the ? between the two, if the query string is present in the URL. For example, if you want to match URLs on any domain where the URL path ends with foo.bar, then you need to use an array of Match Patterns like ['*://*/*foo.bar', '*://*/*foo.bar?*']. The ?* is needed, rather than just bar*, in order to anchor the ending * as applying to the URL query string and not some portion of the URL path.\n\nNeither the URL fragment identifier, nor the # which precedes it, are considered as part of the path.\n\nNote: The path pattern string should not include a port number. Adding a port, as in: http://localhost:1234/* causes the match pattern to be ignored. However, http://localhost:1234 will match with http://localhost/*.\n\nThe special value <all_urls> matches all URLs under any of the supported schemes: that is \"http\", \"https\", \"ws\", \"wss\", \"ftp\", \"data\", and \"file\".\n\n<all_urls>\n\nMatch all URLs.\n\nhttp://example.org/\n\nhttps://a.org/some/path/\n\nws://sockets.somewhere.org/\n\nwss://ws.example.com/stuff/\n\nftp://files.somewhere.org/\n\nresource://a/b/c/\n(unsupported scheme)\n\nftps://files.somewhere.org/\n(unsupported scheme)\n\n*://*/*\n\nMatch all HTTP, HTTPS and WebSocket URLs.\n\nhttp://example.org/\n\nhttps://a.org/some/path/\n\nws://sockets.somewhere.org/\n\nwss://ws.example.com/stuff/\n\nftp://ftp.example.org/\n(unmatched scheme)\n\nfile:///a/\n(unmatched scheme)\n\n*://*.mozilla.org/*\n\nMatch all HTTP, HTTPS and WebSocket URLs that are hosted at \"mozilla.org\" or one of its subdomains.\n\nhttp://mozilla.org/\n\nhttps://mozilla.org/\n\nhttp://a.mozilla.org/\n\nhttp://a.b.mozilla.org/\n\nhttps://b.mozilla.org/path/\n\nws://ws.mozilla.org/\n\nwss://secure.mozilla.org/something\n\nftp://mozilla.org/\n(unmatched scheme)\n\nhttp://mozilla.com/\n(unmatched host)\n\nhttp://firefox.org/\n(unmatched host)\n\n*://mozilla.org/\n\nMatch all HTTP, HTTPS and WebSocket URLs that are hosted at exactly \"mozilla.org/\".\n\nhttp://mozilla.org/\n\nhttps://mozilla.org/\n\nws://mozilla.org/\n\nwss://mozilla.org/\n\nftp://mozilla.org/\n(unmatched scheme)\n\nhttp://a.mozilla.org/\n(unmatched host)\n\nhttp://mozilla.org/a\n(unmatched path)\n\nftp://mozilla.org/\n\nMatch only \"ftp://mozilla.org/\".\n\nhttp://mozilla.org/\n(unmatched scheme)\n\nftp://sub.mozilla.org/\n(unmatched host)\n\nftp://mozilla.org/path\n(unmatched path)\n\nhttps://*/path\n\nMatch HTTPS URLs on any host, whose path is \"path\".\n\nhttps://mozilla.org/path\n\nhttps://a.mozilla.org/path\n\nhttps://something.com/path\n\nhttp://mozilla.org/path\n(unmatched scheme)\n\nhttps://mozilla.org/path/\n(unmatched path)\n\nhttps://mozilla.org/a\n(unmatched path)\n\nhttps://mozilla.org/\n(unmatched path)\n\nhttps://mozilla.org/path?foo=1\n(unmatched path due to URL query string)\n\nhttps://*/path/\n\nMatch HTTPS URLs on any host, whose path is \"path/\" and which has no URL query string.\n\nhttps://mozilla.org/path/\n\nhttps://a.mozilla.org/path/\n\nhttps://something.com/path/\n\nhttp://mozilla.org/path/\n(unmatched scheme)\n\nhttps://mozilla.org/path\n(unmatched path)\n\nhttps://mozilla.org/a\n(unmatched path)\n\nhttps://mozilla.org/\n(unmatched path)\n\nhttps://mozilla.org/path/?foo=1\n(unmatched path due to URL query string)\n\nhttps://mozilla.org/*\n\nMatch HTTPS URLs only at \"mozilla.org\", with any URL path and URL query string.\n\nhttps://mozilla.org/\n\nhttps://mozilla.org/path\n\nhttps://mozilla.org/another\n\nhttps://mozilla.org/path/to/doc\n\nhttps://mozilla.org/path/to/doc?foo=1\n\nhttp://mozilla.org/path\n(unmatched scheme)\n\nhttps://mozilla.com/path\n(unmatched host)\n\nhttps://mozilla.org/a/b/c/\n\nMatch only this URL, or this URL with any URL fragment.\n\nhttps://mozilla.org/a/b/c/\n\nhttps://mozilla.org/a/b/c/#section1\n\nhttps://mozilla.org/*/b/*/\n\nMatch HTTPS URLs hosted on \"mozilla.org\", whose path contains a component \"b\" somewhere in the middle. Will match URLs with query strings, if the string ends in a /.\n\nhttps://mozilla.org/a/b/c/\n\nhttps://mozilla.org/d/b/f/\n\nhttps://mozilla.org/a/b/c/d/\n\nhttps://mozilla.org/a/b/c/d/#section1\n\nhttps://mozilla.org/a/b/c/d/?foo=/\n\nhttps://mozilla.org/a?foo=21314&bar=/b/&extra=c/\n\nhttps://mozilla.org/b/*/\n(unmatched path)\n\nhttps://mozilla.org/a/b/\n(unmatched path)\n\nhttps://mozilla.org/a/b/c/d/?foo=bar\n(unmatched path due to URL query string)\n\nfile:///blah/*\n\nMatch any FILE URL whose path begins with \"blah\".\n\nfile:///blah/\n\nfile:///blah/bleh\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Aug 2, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Working_with_files",
    "title": "Work with files - Mozilla | MDN",
    "h1": "Work with files",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nYour browser extension may need to work with files to deliver its full functionality. This article looks at the five mechanisms you have for handling files:\n\nFor each of these mechanisms, we introduce their use with references to the relevant API documentation, guides, and any examples that show how to use the API.\n\nThis mechanism enables you to get a file from your website (or any location you can define as a URL) to the user's computer. The key method is downloads.download(), which in its simplest form accepts a URL and downloads the file from that URL to the user's default downloads folder:\n\nYou can let the user download to a location of their choice by specifying the saveAs parameter.\n\nNote: Using URL.createObjectURL() you can also download files and blobs defined in your JavaScript, which can include local content retrieved from IndexedDB.\n\nThe downloads API also provides features to cancel, pause, resume, erase, and remove downloads; search for downloaded files in the download manager; show downloaded files in the computer's file manager; and open a file in an associated application.\n\nTo use this API, you need to have the \"downloads\" API permission specified in your manifest.json file.\n\nExample: Latest download API reference: downloads API\n\nIf you want to work with a file from the user's computer one option is to let the user select a file using the computer's file browser. Either create a new page or inject code into an existing page to use the file type of the HTML input element to offer the user a file picker. Once the user has picked a file or files, the script associated with the page can access the content of the file using the DOM File API, in the same way a web application does.\n\nExample: Imagify Guide: Using files from web applications API references: HTML input element | DOM File API\n\nNote: If you want to access or process all the files in a selected folder, you can do so using <input type=\"file\" webkitdirectory=\"true\"/> to select the folder and return all the files it contains.\n\nThe Web Drag and Drop API offers an alternative to using a file picker. To use this method, establish a 'drop zone' that fits with your UI, then add listeners for the dragenter, dragover, and drop events to the element. In the handler for the drop event, your code can access any file dropped by the user from the object offered by the dataTransfer property using DataTransfer.files. Your code can then access and manipulate the files using the DOM File API.\n\nExample: Imagify Guides: Using files from web applications | File drag and drop API references: DOM File API\n\nIf your extension needs to save files locally, the idb-file-storage library provides a simple Promise-based wrapper to the IndexedDB API to aid the storage and retrieval of files and blobs.\n\nThe key features of the library are:\n\nReturns an IDBFileStorage instance, creating the named storage if it does not exist.\n\nProvides the methods to save and retrieve files, such as:\n\nThe Store Collected Images example illustrates how to use most of these features.\n\nThe Store Collected Images example lets users add images to a collection using an option on the image context menu. Selected images are collected in a popup and can be saved to a named collection. A toolbar button (browserAction) opens a navigate collection page, on which the user can view and delete saved images, with a filter option to narrow choices. See the example in action.\n\nThe workings of the library can be understood by viewing image-store.js in /utils/:\n\nsaveCollectedBlobs is called when the user clicks save in the popup and has provided a name for the image collection.\n\nFirst, getFileStorage creates, if it does not exist already, or retrieves the IndexedDB database \"stored-images\" to the object storedImages. storedImages.put() then adds each collected image to the database, under the collection name, using the blob's unique id (the file name).\n\nIf the image being stored has the same name as one already in the database, it is overwritten. If you want to avoid this, query the database first using imagesStore.list() with a filter for the file name; and, if the list returns a file, add a suitable suffix to the name of the new image to store a separate item.\n\nloadStoredImages() is called when the user clicks view or reload in the navigate collection page. getFileStorage() opens the \"stored-images\" database, then imagesStore.list() gets a filtered list of the stored images. This list is then used to retrieve images with imagesStore.get() and build a list to return to the UI.\n\nNote the use of URL.createObjectURL(blob) to create a URL that references the image blob. This URL is then used in the UI (navigate-collection.js) to display the image.\n\nremoveStoredImages() is called when the user clicks delete in the navigate collection page. Again, getFileStorage() opens the \"stored-images\" database then imagesStore.remove() removes each image from the filtered list of images.\n\nNote the use of URL.revokeObjectURL() to explicitly revoke the blob URL. This enables the garbage collector to free the memory allocated to the URL. If this is not done, the memory will not get returned until the page on which it was created is closed. If the URL was created in an extension's background page, this is not unloaded until the extension is disabled, uninstalled, or reloaded, so holding this memory unnecessarily could affect browser performance. If the URL is created in an extension's page (new tab, popup, or sidebar) the memory is released when the page is closed, but it is still a good practice to revoke the URL when it is no longer needed.\n\nOnce the blob URL has been revoked, any attempt to load it will result in an error. For example, if the blob URL was used as the SRC attribute of an IMG tag, the image will not load and will not be visible. It is therefore good practice to remove any revoked blob URLs from generated HTML elements when the blob URL is revoked.\n\nExample: Store Collected Images API References: idb-file-storage library\n\nNote: You can also use the full Web IndexedDB API to store data from your extension. This can be useful where you need to store data that isn't handled well by the simple key/value pairs offered by the DOM Storage API.\n\nWhere you have a native app or want to deliver additional native features for file processing, use native messaging to pass a file to a native app for processing.\n\nYou have two options:\n\nHere you trigger the process with runtime.connectNative(), which returns a runtime.Port object. You can then pass a JSON message to the native application using the postMessage() function of Port. Using the onMessage.addListener() function of Port you can listen for messages from the native application. The native application is opened if it is not running when runtime.connectNative() is called and the application remains running until the extension calls Port.disconnect() or the page that connected to it is closed.\n\nHere you use runtime.sendNativeMessage() to send a JSON message to a new, temporary instance of the native application. The browser closes the native application after receiving any message back from the native application.\n\nTo add the file or blob you want the native application to process use JSON.stringify().\n\nTo use this method the extension must request the \"nativeMessaging\" permission or optional permission in its manifest.json file. Where optional permission is used, remember to check that permission has being granted and where necessary request permission from the user with the permissions API. Reciprocally, the native application must grant permission for the extension by including its ID in the \"allowed_extensions\" field of the app manifest.\n\nExample: Native Messaging (illustrates simple messaging only) Guides: Native messaging API references: runtime API\n\nThis page was last modified on Jan 22, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Internationalization",
    "title": "Internationalization - Mozilla | MDN",
    "h1": "Internationalization",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nThe WebExtensions API has a rather handy module available for internationalizing extensions — i18n. In this article we'll explore its features and provide a practical example of how it works. The i18n system for extensions built using WebExtension APIs is similar to common JavaScript libraries for i18n such as i18n.js.\n\nNote: The example extension featured in this article — notify-link-clicks-i18n — is available on GitHub. Follow along with the source code as you go through the sections below.\n\nAn internationalized extension can contain the same features as any other extension — background scripts, content scripts, etc. — but it also has some extra parts to allow it to switch between different locales. These are summarized in the following directory tree:\n\nLet's explore each of the new features in turn — each of the below sections represents a step to follow when internationalizing your extension.\n\nNote: You can look up language subtags using the Find tool on the Language subtag lookup page. Note that you need to search for the English name of the language.\n\nEvery i18n system requires the provision of strings translated into all the different locales you want to support. In extensions, these are contained within a directory called _locales, placed inside the extension root. Each individual locale has its strings (referred to as messages) contained within a file called messages.json, which is placed inside a subdirectory of _locales, named using the language subtag for that locale's language.\n\nNote that if the subtag includes a basic language plus a regional variant, then the language and variant are conventionally separated using a hyphen: for example, \"en-US\". However, in the directories under _locales, the separator must be an underscore: \"en_US\".\n\nSo for example, in our sample app we have directories for \"en\" (English), \"de\" (German), \"nl\" (Dutch), and \"ja\" (Japanese). Each one of these has a messages.json file inside it.\n\nLet's now look at the structure of one of these files (_locales/en/messages.json):\n\nThis file is standard JSON — each one of its members is an object with a name, which contains a message and a description. All of these items are strings; $URL$ is a placeholder, which is replaced with a substring at the time the notificationContent member is called by the extension. You'll learn how to do this in the Retrieving message strings from JavaScript section.\n\nNote: You can find much more information about the contents of messages.json files in our Locale-Specific Message reference.\n\nThere are a couple of different tasks to carry out to internationalize your manifest.json.\n\nYour manifest.json includes strings that are displayed to the user, such as the extension's name and description. If you internationalize these strings and put the appropriate translations of them in messages.json, then the correct translation of the string will be displayed to the user, based on the current locale, like so.\n\nTo internationalize strings, specify them like this:\n\nHere, we are retrieving message strings dependent on the browser's locale, rather than just including static strings.\n\nTo call a message string like this, you need to specify it like this:\n\nAnother field you should specify in your manifest.json is default_locale:\n\nThis specifies a default locale to use if the extension doesn't include a localized string for the browser's current locale. Any message strings that are not available in the browser locale are taken from the default locale instead. There are some more details to be aware of in terms of how the browser selects strings — see Localized string selection.\n\nNote that you can also retrieve localized strings from CSS files in the extension. For example, you might want to construct a locale-dependent CSS rule, like this:\n\nThis is useful, although you might be better off handling such a situation using Predefined messages.\n\nSo, you've got your message strings set up, and your manifest. Now you just need to start calling your message strings from JavaScript so your extension can talk the right language as much as possible. The actual i18n API is pretty simple, containing just four main methods:\n\nIn our notify-link-clicks-i18n example, the background script contains the following lines:\n\nThe first one just retrieves the notificationTitle message field from the available messages.json file most appropriate for the browser's current locale. The second one is similar, but it is being passed a URL as a second parameter. What gives? This is how you specify the content to replace the $URL$ placeholder we see in the notificationContent message field:\n\nThe \"placeholders\" member defines all the placeholders, and where they are retrieved from. The \"url\" placeholder specifies that its content is taken from $1, which is the first value given inside the second parameter of getMessage(). Since the placeholder is called \"url\", we use $URL$ to call it inside the actual message string (so for \"name\" you'd use $NAME$, etc.) If you have multiple placeholders, you can provide them inside an array that is given to i18n.getMessage() as the second parameter — [a, b, c] will be available as $1, $2, and $3, and so on, inside messages.json.\n\nLet's run through an example: the original notificationContent message string in the en/messages.json file is\n\nLet's say the link clicked on points to https://developer.mozilla.org. After the i18n.getMessage() call, the contents of the second parameter are made available in messages.json as $1, which replaces the $URL$ placeholder as defined in the \"url\" placeholder. So the final message string is\n\nIt is possible to insert your variables ($1, $2, $3, etc.) directly into the message strings, for example we could rewrite the above \"notificationContent\" member like this:\n\nThis may seem quicker and less complex, but the other way (using \"placeholders\") is seen as best practice. This is because having the placeholder name (e.g. \"url\") and example helps you to remember what the placeholder is for — a week after you write your code, you'll probably forget what $1 – $8 refer to, but you'll be more likely to know what your placeholder names refer to.\n\nIt is also possible to include hardcoded strings in placeholders, so that the same value is used every time, instead of getting the value from a variable in your code. For example:\n\nIn this case we are just hardcoding the placeholder content, rather than getting it from a variable value like $1. This can sometimes be useful when your message file is very complex, and you want to split up different values to make the strings more readable in the file, plus then these values could be accessed programmatically.\n\nIn addition, you can use such substitutions to specify parts of the string that you don't want to be translated, such as person or business names.\n\nLocales can be specified using only a language code, like fr or en, or they may be further qualified with a region code, like en_US or en_GB, which describes a regional variant of the same basic language. When you ask the i18n system for a string, it will select a string using the following algorithm:\n\nTake the following example:\n\nSuppose the default_locale is set to fr, and the browser's current locale is en_GB:\n\nThe i18n module provides us with some predefined messages, which we can call in the same way as we saw earlier in Retrieving localized strings in manifests and Locale-dependent CSS. For example:\n\nPredefined messages use exactly the same syntax, except with @@ before the message name, for example\n\nThe following table shows the different available predefined messages:\n\nThe extension's internally-generated UUID. You might use this string to construct URLs for resources inside the extension. Even unlocalized extensions can use this message.\n\nYou can't use this message in a manifest file.\n\nAlso note that this ID is not the add-on ID returned by runtime.id, and that can be set using the browser_specific_settings key in manifest.json. It's the generated UUID that appears in the add-on's URL. This means that you can't use this value as the extensionId parameter to runtime.sendMessage(), and can't use it to check against the id property of a runtime.MessageSender object.\n\nGoing back to our earlier example, it would make more sense to write it like this:\n\nNow we can just store our local specific images in directories that match the different locales we are supporting — en, de, etc. — which makes a lot more sense.\n\nLet's look at an example of using @@bidi_* messages in a CSS file:\n\nFor left-to-right languages such as English, the CSS declarations involving the predefined messages above would translate to the following final code lines:\n\nFor a right-to-left language like Arabic, you'd get:\n\nTo test your extension's localization, you use Firefox or Firefox Beta, the Firefox builds in which you can install language packs.\n\nThen, for each locale supported in the extension you want to test, follow the instructions to Use Firefox in another language to switch the Firefox UI language. (If you know your way around Settings, under Language, use Set Alternatives.)\n\nOnce Firefox is running in your test language, install the extension temporarily. After installing your extension, in about:debugging, if you've set up your extension correctly, you see the extension listed with its icon, name, and description in the chosen language. You can also see the localized extension details in about:addons. Now exercise the extension's features to ensure the translations you need are in place.\n\nIf you'd like to try this process out, you can use the notify-link-clicks-i18n extension. Set up Firefox to display one of the languages supported in this example (German, Dutch, or Japanese). Load the extension and go to a website. Click a link to see the translated version of the notification reporting the link's URL.\n\nThis page was last modified on Aug 2, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_Security_Policy",
    "title": "Content Security Policy - Mozilla | MDN",
    "h1": "Content Security Policy",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nExtensions developed with WebExtension APIs have a Content Security Policy (CSP) applied to them by default. This restricts the sources from which they can load code such as <script> and disallows potentially unsafe practices such as using eval(). This article briefly explains what a CSP is, what the default policy is and what it means for an extension, and how an extension can change the default CSP.\n\nContent Security Policy (CSP) is a mechanism to help prevent websites from inadvertently executing malicious content. A website specifies a CSP using an HTTP header sent from the server. The CSP is mostly concerned with specifying legitimate sources of various types of content, such as scripts or embedded plugins. For example, a website can use it to specify that the browser should only execute JavaScript served from the website itself, and not from any other sources. A CSP can also instruct the browser to disallow potentially unsafe practices, such as the use of eval().\n\nLike websites, extensions can load content from different sources. For example, a browser action's popup is specified as an HTML document, and it can include JavaScript and CSS from different sources, just like a normal web page:\n\nCompared to a website, extensions have access to additional privileged APIs, so if they are compromised by malicious code, the risks are greater. For this reason:\n\nThe default content security policy for extensions using Manifest V2 is:\n\nWhile for extensions using Manifest V3, the default content security policy is:\n\nThese policies are applied to any extension that has not explicitly set its own content security policy using the content_security_policy manifest.json key. It has the following consequences:\n\nUnder the default CSP, you can only load code that is local to the extension. The CSP limits script-src to secure sources only, which covers <script> resources, ES6 modules and web workers. In browsers that support obsolete plugins, the object-src directive is also restricted. For more information on object-src in extensions, see the WECG issue Remove object-src from the CSP (at least in MV3)).\n\nFor example, consider a line like this in an extension's document:\n\nThis doesn't load the requested resource: it fails silently, and any object that you expect to be present from the resource is not found. There are two main solutions to this:\n\nNote: If your modified CSP allows remote script injection, your extension will get rejected from addons.mozilla.org (AMO) during the review. For more information, see details about security best practices.\n\nUnder the default CSP, extensions cannot evaluate strings as JavaScript. This means that the following are not permitted:\n\nUnder the default CSP, inline JavaScript is not executed. This disallows both JavaScript placed directly in <script> tags and inline event handlers, meaning that the following are not permitted:\n\nIf you are currently using code like <body onload=\"main()\"> to run your script when the page has loaded, listen for DOMContentLoaded or load instead.\n\nExtensions wishing to use WebAssembly require 'wasm-unsafe-eval' to be specified in the script-src directive.\n\nFrom Firefox 102 and Chrome 103, 'wasm-unsafe-eval' can be included in the content_security_policy manifest.json key to enable the use of WebAssembly in extensions.\n\nManifest V2 extensions in Firefox can use WebAssembly without 'wasm-unsafe-eval' in their CSP for backward compatibility. However, this behavior isn't guaranteed, see Firefox bug 1770909. Extensions using WebAssembly are therefore encouraged to declare 'wasm-unsafe-eval' in their CSP.\n\nFor Chrome, extensions cannot use WebAssembly in version 101 or earlier. In 102, extensions can use WebAssembly (the same behavior as Firefox 101 and earlier). From version 103, extensions can use WebAssembly if they include 'wasm-unsafe-eval' in the content_security_policy in the manifest key.\n\nExtensions should use https: and wss: when communicating with external servers. To encourage this as the standard behavior, the default Manifest V3 CSP includes the upgrade-insecure-requests directive. This directive automatically upgrades network requests to http: to use https:.\n\nWhile requests are automatically upgraded, it is still recommended to use https:-URLs in the extension's source code where possible. In particular, entries in the host_permissions section of manifest.json should start with https:// or *:// instead of only http://.\n\nManifest V3 Extensions that need to make http: or ws: requests can opt out of this behavior by overriding the default CSP using the content_security_policy manifest.json key with a policy that excludes the upgrade-insecure-requests directive. However, to comply with the security requirements of the Add-on Policies, all user data must be transmitted securely.\n\nIn Manifest V2, content scripts have no CSP. As of Manifest V3, content scripts share the default CSP as extensions. It is currently not possible to specify a separate CSP for content scripts (source).\n\nThe extent to which the CSP controls loads from content scripts varies by browser. In Firefox, JavaScript features such as eval are restricted by the extension CSP. Generally, most DOM-based APIs are subjected to the CSP of the web page. In Chrome, many DOM APIs are covered by the extension CSP instead of the web page's CSP (crbug 896041).\n\nThis page was last modified on Dec 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging",
    "title": "Native messaging - Mozilla | MDN",
    "h1": "Native messaging",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nNative messaging enables an extension to exchange messages with a native application, installed on the user's computer. The native messaging serves the extensions without additional accesses over the web.\n\nPassword managers: The native application manages, stores, and encrypts passwords. Then the native application communicates with the extension to populate web forms.\n\nNative messaging also enables extensions to access resources that are not accessible through WebExtension APIs (e.g., particular hardware).\n\nThe native application is not installed or managed by the browser. The native application is installed, using the underlying operating system's installation machinery. Create a JSON file called the \"host manifest\" or \"app manifest\". Install the JSON file in a defined location. The app manifest file will describe how the browser can connect to the native application.\n\nThe extension must request the \"nativeMessaging\" permission or optional permission in the manifest.json file. Also, the native application must grant permission for the extension by including the ID in the \"allowed_extensions\" field of the app manifest.\n\nAfter installing, the extension can exchange JSON messages with the native application. Use a set of functions in the runtime API. On the native app side, messages are received using standard input (stdin) and sent using standard output (stdout).\n\nSupport for native messaging in extensions is mostly compatible with Chrome, with two main differences:\n\nThere's a complete example in the \"native-messaging\" directory of the \"webextensions-examples\" repository on GitHub. Most example code in this article is taken from that example.\n\nExtension communicating with a native application:\n\nExample manifest.json file:\n\nNote: Chrome does not support the browser_specific_settings key. You will need to use another manifest without this key to install an equivalent WebExtension on Chrome. See Chrome incompatibilities below.\n\nNote: When using optional permission, check that permission has been granted and, where necessary, request permission from the user with the permissions API before communicating with the native application.\n\nThe app manifest describes to the browser how it can connect to the native application.\n\nThe app manifest file must be installed along with the native application. The browser reads and validates app manifest files, but it does not install or manage them. The security model for when and how these files are installed and updated is much more like that for native applications than that for extensions using WebExtension APIs.\n\nFor details of native app manifest syntax and location, see Native manifests.\n\nFor example, here's a manifest for the \"ping_pong\" native application:\n\nThis allows the extension whose ID is \"ping_pong@example.org\" to connect, by passing the name \"ping_pong\" into the relevant runtime API function. The application itself is at \"/path/to/native-messaging/app/ping_pong.py\".\n\nNote: Chrome identifies allowed extensions with another key: allowed_origins, using the ID of the WebExtension. Refer to Chrome documentation for more details and see Chrome incompatibilities below.\n\nAs an example, you can also refer to the readme on the native messaging extension on GitHub. If you want to check your local setup after having forked this repository on a Windows machine, you may run check_config_win.py to troubleshoot some issues.\n\nIn the example above, the native application is a Python script. It can be difficult to get Windows to run Python scripts reliably in this way, so an alternative is to provide a .bat file, and link to that from the application's manifest:\n\n(See note above about Chrome compatibility regarding the allowed_extensions key and its counterpart in Chrome).\n\nThe batch file then invokes the Python script:\n\nThe browser finds the extension based on registry keys which are located in a specific location. You need to add them either programmatically with your final application or manually if you are using the example from GitHub. For more details, refer to Manifest location.\n\nFollowing with the ping_pong example, if using Firefox (see this page for Chrome), two registry entries should be created for the messaging to work:\n\nNote: If you base your work on the example located on GitHub, please read this part of the readme and check the output of check_config_win.py before installing the WebExtension on your browser.\n\nGiven the above setup, an extension can exchange JSON messages with a native application.\n\nNative messaging cannot directly be used in content scripts. You must do it indirectly via background scripts.\n\nThere are two patterns to use here: connection-based messaging and connectionless messaging.\n\nWith this pattern you call runtime.connectNative(), passing the name of the application (the value of the \"name\" property in the app's manifest). This launches the application if it is not already running and returns a runtime.Port object to the extension.\n\nTwo arguments are passed to the native app when it starts:\n\nNote: Chrome handles the passed arguments differently:\n\nThe application stays running until the extension calls Port.disconnect() or the page that connected to it is closed.\n\nTo send messages using Port, call its postMessage() function, passing the JSON message to send. To listen for messages using Port, add the listener using its onMessage.addListener() function.\n\nHere's an example background script that establishes a connection with the \"ping_pong\" app, listens for messages from it, then sends it a \"ping\" message whenever the user clicks the browser action:\n\nWith this pattern you call runtime.sendNativeMessage(), passing it:\n\nA new instance of the app is created for each message. The app passes two arguments when starting:\n\nThe first message sent by the app is treated as a response to the sendNativeMessage() call, and will be passed into the callback.\n\nHere's the example above, rewritten to use runtime.sendNativeMessage():\n\nOn the application side, you use standard input to receive messages and standard output to send them.\n\nEach message is serialized using JSON, UTF-8 encoded and is preceded with an unsigned 32-bit value containing the message length in native byte order.\n\nThe maximum size of a single message from the application is 1 MB. The maximum size of a message sent to the application is 4 GB.\n\nYou can quickly get started sending and receiving messages with this NodeJS code, nm_nodejs.mjs:\n\nHere's another example written in Python. It listens for messages from the extension. Note that the file has to be executable on Linux. If the message is \"ping\", then it responds with a message \"pong\".\n\nThis is the Python 2 version:\n\nIn Python 3, the received binary data must be decoded into a string. The content to be sent back to the addon must be encoded into binary data using a struct:\n\nIf you connected to the native application using runtime.connectNative(), then it stays running until the extension calls Port.disconnect() or the page that connected to it is closed. If you started the native application by sending runtime.sendNativeMessage(), then it is closed after it has received the message and sent a response.\n\nTo close the native application:\n\nIf something goes wrong, check the browser console. If the native application sends any output to stderr, the browser will redirect it to the browser console. So if you've got as far as launching the native application, you will see any error messages it emits.\n\nIf you haven't managed to run the application, you should see an error message giving you a clue about the problem.\n\nThere are a number of differences between browsers that affect native messaging in web extensions, including the arguments passed to the native app, location of the manifest file, etc. These differences are discussed in Chrome incompatibilities > Native messaging.\n\nThis page was last modified on Nov 23, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Differences_between_API_implementations",
    "title": "Differences between API implementations - Mozilla | MDN",
    "h1": "Differences between API implementations",
    "paragraphs": "Simplify infrastructure with MongoDB Atlas\nGet Started free\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nThe browser extensions API is an emerging standard. As a result, while it is supported by most major browsers – including Firefox, Chrome, Edge, and Opera – there are differences between the various implementations. This means some changes may be necessary to implement your extension for multiple browsers.\n\nAmong the various browsers supporting the extensions API, Firefox is the most compliant with the emerging standard and, therefore, is your best place to start when developing browser extensions.\n\nThe differences between browsers' API implementations fall into four areas: namespace, asynchronous event handling, API coverage, and manifest keys.\n\nYou reference all extensions API functions using a namespace. For example, browser.alarms.create({delayInMinutes}); creates an alarm in Firefox that goes off after the time specified in delayInMinutes.\n\nThere are two API namespaces in use:\n\nJavaScript provides several ways to handle asynchronous events. The proposed extensions API standard is to use promises. The promises approach offers significant advantages when dealing with chained asynchronous event calls.\n\nFirefox and Safari implement promises for the extensions API. All other browsers use callbacks. In Manifest V3, Chrome, Edge, and Opera provided for promises on most appropriate methods. (cf. Chrome bug 328932)\n\nIf you are unfamiliar with how JavaScript can handle asynchronous events or promises, look at Getting to know asynchronous JavaScript: Callbacks, Promises and Async/Await or the MDN Using promises page.\n\nThe differences in the extensions API function implementations among the browsers fall into three broad categories:\n\nThe differences in the supported manifest.json keys among the browsers fall broadly into two categories:\n\nYou can find more detailed information about the differences in the supported browser extensions API features in:\n\nThis page was last modified on Oct 2, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Chrome_incompatibilities",
    "title": "Chrome incompatibilities - Mozilla | MDN",
    "h1": "Chrome incompatibilities",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nThe WebExtension APIs aim to provide compatibility across all the main browsers, so extensions should run on any browser with minimal changes.\n\nHowever, there are significant differences between Chrome (and Chromium-based browsers), Firefox, and Safari. In particular:\n\nThe rest of this page details these and other incompatibilities.\n\nAs a porting aid, the Firefox implementation of WebExtensions supports chrome using callbacks and browser using promises. This means that many Chrome extensions work in Firefox without changes.\n\nNote: The browser namespace is supported by Firefox and Safari. Chrome does not offer the browser namespace, until Chrome bug 798169 is resolved.\n\nIf you choose to write your extension to use browser and promises, Firefox provides a polyfill that should enable it to run in Chrome: https://github.com/mozilla/webextension-polyfill.\n\nThe Browser support for JavaScript APIs page includes compatibility tables for all APIs that have any support in Firefox. Where there are caveats regarding support for an API method, property, type, or event, this is indicated in these tables with an asterisk \"*\". Selecting the asterisk expands the table to display a note explaining the caveat.\n\nThe tables are generated from compatibility data stored as JSON files in GitHub.\n\nThe rest of this section describes the main compatibility issues you may need to consider when building a cross-browser extension. Also, remember to check the browser compatibility tables, as they may contain additional compatibility information.\n\nFor notifications.create(), with type \"basic\":\n\nWhen the user clicks on a notification:\n\nIf you call notifications.create() more than once in rapid succession:\n\nFirefox and Chrome include a Proxy API. However, the design of these two APIs is incompatible.\n\nWhen using tabs.executeScript() or tabs.insertCSS():\n\nTo work cross-browser, you can specify the path as an absolute URL, starting at the extension's root, like this:\n\nWhen calling tabs.remove():\n\nNote: Any website may link or redirect to that URL, and extensions should treat any input (POST data, for example) as if it came from an untrusted source, as a normal web page should.\n\nSee tabs.ZoomSettingsScope.\n\nThe main manifest.json page includes a table describing browser support for manifest.json keys. Where there are caveats around support for a given key, this is indicated in the table with an asterisk \"*\". Selecting the asterisk expands the table to display a note explaining the caveat.\n\nThe tables are generated from compatibility data stored as JSON files in GitHub.\n\nOn Linux and Mac: Chrome passes one argument to the native app, which is the origin of the extension that started it, in the form of chrome-extension://«extensionID/» (trailing slash required). This enables the app to identify the extension.\n\nOn Windows: Chrome passes two arguments:\n\nSome extension APIs allow an extension to send data from one part of the extension to another, such as runtime.sendMessage(), tabs.sendMessage(), runtime.onMessage, the postMessage() method of runtime.port, and tabs.executeScript().\n\nThe Structured clone algorithm supports more types than the JSON serialization algorithm. A notable exception are (DOM) objects with a toJSON method. DOM objects are not cloneable nor JSON-serializable by default, but with a toJSON() method, these can be JSON-serialized (but still not cloned with the structured cloning algorithm). Examples of JSON-serializable objects that are not structured cloneable include instances of URL and PerformanceEntry.\n\nExtensions that rely on the toJSON() method of the JSON serialization algorithm can use JSON.stringify() followed by JSON.parse() to ensure that a message can be exchanged because a parsed JSON value is always structurally cloneable.\n\nThis page was last modified on Nov 15, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface",
    "title": "User interface - Mozilla | MDN",
    "h1": "User interface",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nExtensions that use WebExtension APIs are provided with several user interface options so that their functionality can be made available to the user. A summary of those options is provided below, with a more detailed introduction to each user interface option in this section.\n\nNote: For advice on using these UI components to create a great user experience in your extension, please see the User experience best practices article.\n\nAn HTML document displayed next to a web page, with the option for unique content per page. The sidebar is opened when the extension is installed, then obeys the user's sidebar visibility selection. User interaction within the sidebar is handled by its HTML document.\n\nThe following how-to guides provide step-by-step guidance to creating some of these user interface options:\n\nThis page was last modified on Dec 18, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Toolbar_button",
    "title": "Toolbar button - Mozilla | MDN",
    "h1": "Toolbar button",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nCommonly referred to as a browser action, this user interface option is a button added to the browser toolbar. Users click the button to interact with your extension.\n\nThe toolbar button (browser action) is very like the address bar button (page action). For the differences, and guidance on when to use what, see Page actions and browser actions.\n\nYou define the browser action's properties using the \"browser_action\" key in manifest.json:\n\nThere are no mandatory properties for this key. If you don't specify \"default_icon\" the extension icon is used, and the default web extension puzzle pace icon is used if the extension doesn't specify an icon. If \"default_title\" isn't specified, the extension name is used.\n\nThere are two ways to specify a browser action: with or without a popup. If you don't specify a popup, when the user clicks the button an event is dispatched to the extension, which the extension listens for using browserAction.onClicked:\n\nIf you specify a popup, the click event is not dispatched: instead, the popup is shown when the user clicks the button. The user can interact with the popup, which closes automatically when the user clicks outside it. See the Popup article for more details on creating and managing popups.\n\nNote that your extension can have only one browser action.\n\nYou can change many of the browser action properties programmatically using the browserAction API.\n\nFor details on how to create icons to use with your browser action, see Iconography in the Acorn Design System documentation.\n\nThe webextensions-examples repository on GitHub contains two examples of extensions that implement browser actions:\n\nThis page was last modified on Nov 17, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Page_actions",
    "title": "Address bar button - Mozilla | MDN",
    "h1": "Address bar button",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nCommonly referred to as a page action button, this user interface option is a button added to the browser address bar. Users click the button to interact with extensions.\n\nThe address bar button (or page action) is similar to the toolbar button (or browser action).\n\nThe differences are:\n\nUse a page action when the action relates to the current page. Use a browser action when the action relates to the browser as a whole or to many pages. For example:\n\nYou define the page action's properties using the page_action key in manifest.json:\n\nThe only mandatory key is default_icon.\n\nThere are two ways to specify a page action: with or without a popup.\n\nNote that your extension can have just one page action.\n\nYou can change any of the page action properties programmatically using the pageAction API.\n\nFor details on how to create icons to use with your page action, see Iconography in the Acorn Design System documentation.\n\nThe webextensions-examples repository on GitHub includes the chill-out example which implements a page action without a popup.\n\nThis page was last modified on Jul 19, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Sidebars",
    "title": "Sidebars - Mozilla | MDN",
    "h1": "Sidebars",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nAdd video calling functionality to your website or app with Whereby’s powerful SDK.Mozilla ads\n\nAdd video calling functionality to your website or app with Whereby’s powerful SDK.\nMozilla ads\n\nA sidebar is a pane that is displayed at the side of the browser window, next to the web page. This page describes sidebars, specifying them, designing them, and examples of use.\n\nThe browser provides a UI that enables the user to select a sidebar to display. For example, Firefox has the \"View\" > \"Sidebar\" menu. Each browser window can display its own sidebar, which is displayed on every tab in the window.\n\nThe browser may include a number of built-in sidebars. For example, Firefox includes a sidebar for interacting with bookmarks:\n\nUsing the sidebar_action manifest.json key, an extension can add its own sidebar to the browser. It will be listed alongside the built-in sidebars, and the user will be able to open it using the same mechanism as for the built-in sidebars.\n\nLike a browser action popup, the sidebar's contents are specified as an HTML document. When the user opens the sidebar, the sidebar's document is loaded into every open browser window. Each window gets its own instance of the document. When new windows are opened, they get their own sidebar documents as well.\n\nA document for a particular tab can be set using the sidebarAction.setPanel() function. A sidebar can figure out which window it belongs to using the windows.getCurrent() API:\n\nThis is useful if a sidebar wants to display different content for different windows. For an example of this, see the \"annotate-page\" example.\n\nSidebar documents get access to the same set of privileged JavaScript APIs that the extension's background and popup scripts get. They can get direct access to the background page (unless the sidebar belongs to an incognito mode window) using runtime.getBackgroundPage(), and can interact with content scripts or native applications using messaging APIs like tabs.sendMessage() and runtime.sendNativeMessage().\n\nSidebar documents are unloaded when their browser window is closed or when the user closes the sidebar. This means that unlike background pages, sidebar documents don't stay loaded all the time, but unlike browser action popups, they stay loaded while the user interacts with web pages.\n\nWhen an extension that defines a sidebar is first installed, its sidebar will be opened automatically. This is intended to help the user understand that the extension includes a sidebar. Note that it's not possible for an extension to open sidebars programmatically: sidebars can only be opened by the user.\n\nTo specify a sidebar, define the default document with the sidebar_action manifest.json key, alongside a default title and icon:\n\nThe title, panel, and icon can be changed programmatically using the sidebarAction API.\n\nTitle and icon are shown to the user in any UI provided by the browser to list sidebars, such as the \"View > Sidebar\" menu in Firefox.\n\nFor details on how to design a sidebar's web page to match the style of Firefox, see the Acorn Design System documentation.\n\nThe webextensions-examples repository on GitHub includes the annotate-page example which implements a sidebar.\n\nThis page was last modified on Jul 19, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Context_menu_items",
    "title": "Context menu items - Mozilla | MDN",
    "h1": "Context menu items",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nThis user interface option adds one or more items to a browser context menu. This is the menu available when a user right-clicks on a web page. Tabs and bookmarks can also have context menus, available through the menus API.\n\nYou use this option to expose features relevant to specific browser or web page contexts. For example, you can show features to open a graphic editor when the user clicks on an image or offer a feature to save page content when part of a page is selected. You can add plain menu items, checkbox items, radio button groups, and separators to menus. Once a context menu item has been added using menus.create it's displayed in all browser tabs, but you can hide it by removing it with menus.remove.\n\nThe full list of supported contexts is available at menus.ContextType and includes contexts outside of a web page, such as bookmark items in the browser UI. For example, the \"Open bookmark in Container Tab\" extension adds a menu item that allows the user to open a bookmark URL in a new container tab.\n\nYou can also override the context menus displayed in extension pages, such as custom sidebars and popups, to use either the tab or bookmark context menus instead of the default context menu, with menus.overrideContext. This is a helpful method when your extension provides a custom presentation of tabs or bookmarks. The menu automatically includes menu items for any other extensions that have defined tab or bookmark context menu items. You can choose whether to include the default context menu items. Hiding the default items gives the extension complete control over the items displayed in the rendered native context menu, as shown in the image below for the Tree Style Tab extension.\n\nYou manage context menu items programmatically, using the contextMenus API. However, you need to request the contextMenus permission in your manifest.json to be able to take advantage of the API.\n\nYou can then add (and update or delete) the context menu items in your extension's background script. To create a menu item you specify an id, its title, and the context menus it should appear on:\n\nYour extension then listens for clicks on the menu items. The passed information about the item clicked, the context where the click happened, and details of the tab where the click took place can then be used to invoke the appropriate extension functionality.\n\nFor details on how to create icons to use with your context menu, see Iconography in the Acorn Design System documentation.\n\nThe webextensions-examples repository on GitHub contains two examples of extensions that implement context menu items:\n\nThis page was last modified on Nov 6, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Options_pages",
    "title": "Options page - Mozilla | MDN",
    "h1": "Options page",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.Mozilla ads\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nMozilla ads\n\nAn Options page enables you to define preferences for your extension that your users can change. Users can access the options page for an extension from the browser's add-ons manager:\n\nThe way users access the page, and the way it's integrated into the browser's user interface, will vary from one browser to another.\n\nYou can open the page programmatically by calling runtime.openOptionsPage().\n\nOptions pages have a Content Security Policy that restricts the sources from which they can load resources, and disallows some unsafe practices such as the use of eval(). See Content Security Policy for more details.\n\nTo create an options page, write an HTML file defining the page. This page can include CSS and JavaScript files, like a normal web page. This page, from the favourite-color example, includes a JavaScript file:\n\nJavaScript running in the page can use all the WebExtension APIs that the add-on has permissions for. In particular, you can use the storage API to persist preferences.\n\nPackage the page's files in your extension.\n\nYou also need to include the options_ui key in your manifest.json file, giving it the URL to the page.\n\nSee the options_ui page for sharing options between your options page and background or content scripts.\n\nFor details on how to design your options content to match the style of Firefox, see the Acorn Design System.\n\nThe webextensions-examples repository on GitHub includes the favourite-color example which implements options page features.\n\nThis page was last modified on Jul 19, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Extension_pages",
    "title": "Extension pages - Mozilla | MDN",
    "h1": "Extension pages",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nYou can include HTML pages in your extension to provide forms, help, or any other content your extension needs.\n\nThese pages also get access to the same privileged JavaScript APIs that are available to your extension's background scripts. However, they are in their own tab, with their own JavaScript event queue, their own globals, etc.\n\nThink of the background page as a \"hidden extension page\".\n\nYou can include HTML files—and associated CSS or JavaScript files—in your extension. The files can be included in the root or organized within meaningful sub-folders.\n\nThere are two options for displaying extension pages: windows.create() and tabs.create().\n\nUsing windows.create(), for example, you can open an HTML page into a detached panel (a window without the normal browser UI of address bar, bookmark bar, and alike) to create a dialog-like user experience:\n\nWhen the window is no longer needed, it can be closed programmatically.\n\nFor example, after the user clicks a button, you may pass the current window's id to windows.remove():\n\nBy default, pages you open in this way will be stored in the user's history, just like normal web pages. If you don't want to have this behavior, use history.deleteUrl() to remove the browser's record:\n\nTo use the history API, you must request the \"history\" permission in your manifest.json file.\n\nFor details on how to design your web page's to match the style of Firefox, see the Acorn Design System.\n\nThe webextensions-examples repository on GitHub includes the window-manipulator example, which implements several of the options for creating windows.\n\nThis page was last modified on Jan 22, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Notifications",
    "title": "Notifications - Mozilla | MDN",
    "h1": "Notifications",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nNotifications allow you to communicate information about your extension or its content using the underlying operating system's notification service.\n\nNotifications can include a call to action for the user, and your add-on can listen for the user clicking the notification or the notification closing.\n\nYou manage notifications programmatically, using the notifications API. To use this API you must request the notifications permission in your manifest.json:\n\nYou then use notifications.create to create your notifications, as in this example from notify-link-clicks-i18n:\n\nThis code creates a notification with an icon, title, and message.\n\nIf the notification includes a call to action, you can listen for the user clicking the notification to call the function to handle the action:\n\nIf you are issuing calls to action through notifications, you will also want to define the optional notification id, so you can figure out which call to action the user has selected.\n\nFor details on how to create icons to use with your notification, see Iconography in the Acorn Design System documentation.\n\nThe webextensions-examples repository on GitHub includes the notify-link-clicks-i18n example which implements notifications.\n\nThis page was last modified on Feb 28, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Omnibox",
    "title": "Address bar suggestions - Mozilla | MDN",
    "h1": "Address bar suggestions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nUsing the omnibox API, extensions can customize the suggestions offered in the browser address bar's drop-down when the user enters a keyword.\n\nThis enables your extension to, for example, search a library of free ebooks or, as in the example above, a repository of code examples.\n\nYou tell your extension that it is going to customize the address bar suggestions by including the omnibox key and definition of the trigger keyword in its manifest.json file:\n\nIn the extension's background JavaScript file, using omnibox.setDefaultSuggestion(), you can optionally define the first suggestion to be displayed in the address bar drop-down. Use this to provide a hint on how to use the feature:\n\nYou can then add the code to provide the customized content by listening for omnibox.onInputStarted, which is dispatched when the user has typed the keyword and a space, and omnibox.onInputChanged, which is dispatched whenever the user updates the address bar entry. You can then populate the suggestions, in this case building a search of mozilla-central using the term entered by the user:\n\nIf the extension set a default suggestion using omnibox.setDefaultSuggestion(), then this will appear first in the drop-down.\n\nThe extension can then listen for the user clicking one of the suggestions, using omnibox.onInputEntered. If the default suggestion is clicked the user's custom term is returned, otherwise the suggestion's string is returned. This also passes information on the user's browser preferences for handling new links. In the code below the user's custom term is used to create a search, otherwise the suggested URL is opened:\n\nThe webextensions-examples repository on GitHub includes the firefox-code-search example which customizes the search bar.\n\nThis page was last modified on Jan 22, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/devtools_panels",
    "title": "devtools panels - Mozilla | MDN",
    "h1": "devtools panels",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nNote: This feature is available since Firefox 54.\n\nWhen an extension provides tools that are of use to developers, it's possible to add a UI for them to the browser's developer tools as a new panel.\n\nA developer tools panel is added using the devtools.panels API, which in turn needs to be run from a special devtools page.\n\nAdd the devtools page by including the devtools_page key in extension's manifest.json and provide the location of the page's HTML file in the extension:\n\nFrom the devtools page, call a script that will add the devtools panel:\n\nIn the script, create the devtools panel by specifying the panel's title, icon, and HTML file that provides the panel's content:\n\nThe extension can now run code in the inspected window using devtools.inspectedWindow.eval() or by injecting a content script via the background script by passing a message. You can find more details on how to do this in Extending the developer tools.\n\nFor details on how to design your developer panel's web page to match the style of Firefox, see the Acorn Design System documentation.\n\nFor details on how to create icons to use with your developer tools panel, see Iconography in the Acorn Design System documentation.\n\nThe webextensions-examples repository on GitHub includes the devtools-panels example which implements a devtools panel.\n\nThis page was last modified on Jul 19, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Intercept_HTTP_requests",
    "title": "Intercept HTTP requests - Mozilla | MDN",
    "h1": "Intercept HTTP requests",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nTo intercept HTTP requests, use the webRequest API. This API enables you to add listeners for various stages of making an HTTP request. In the listeners, you can:\n\nThis article looks at three different uses for the webRequest module:\n\nTo see how you can use webRequest to log requests, create a new directory called \"requests\". In that directory, create a file called \"manifest.json\" and add:\n\nNext, create a file called \"background.js\" and add:\n\nYou use onBeforeRequest to call the logURL() function just before starting the request. The logURL() function grabs the URL of the request from the event object and logs it to the browser console. The {urls: [\"<all_urls>\"]} pattern means you intercept HTTP requests to all URLs.\n\nTo test it:\n\nIn the Browser Console, you should see the URLs for any resources the browser requests. For example, this screenshot shows the URLs from loading a Wikipedia page:\n\nNow use webRequest to redirect HTTP requests. First, replace \"manifest.json\" with this:\n\nThe changes here:\n\nNext, replace \"background.js\" with this:\n\nAgain, you use the onBeforeRequest event listener to run a function just before each request is made. This function replaces the redirectUrl with the target URL specified in the function. In this case, the frog image from the your second extension tutorial.\n\nThis time you are not intercepting every request: the {urls:[pattern], types:[\"image\"]} option specifies that you only intercept requests (1) to URLs residing under \"https://developer.mozilla.org/\" and (2) for image resources. See webRequest.RequestFilter for more on this.\n\nAlso, note that you're passing an option called \"blocking\": you must pass this whenever you want to modify the request. It makes the listener function block the network request, so the browser waits for the listener to return before continuing. See the webRequest.onBeforeRequest documentation for more on \"blocking\".\n\nTo test it out, open a page on MDN that contains images (for example, the page listing extension user interface components), reload the extension, and then reload the MDN page. You see something like this:\n\nFinally, use webRequest to modify request headers. In this example, you change the \"User-Agent\" header so the browser identifies itself as Opera 12.16, but only when visiting pages under \"https://useragentstring.com/\".\n\nUpdate the \"manifest.json\" to include https://useragentstring.com/ like this:\n\nReplace \"background.js\" with code like this:\n\nYou use the onBeforeSendHeaders event listener to run a function just before the request headers are sent.\n\nThe listener function is called only for requests to URLs matching the targetPage pattern. Also, note that you again pass \"blocking\" as an option. You also pass \"requestHeaders\", meaning the listener is passed an array containing the request headers you expect to send. See webRequest.onBeforeSendHeaders for more information on these options.\n\nThe listener function looks for the \"User-Agent\" header in the array of request headers, replaces its value with the value of the ua variable, and returns the modified array. This modified array is sent to the server.\n\nTo test it out, open useragentstring.com and check that it identifies the browser as Firefox. Then reload the extension, reload useragentstring.com, and see that Firefox is now identified as Opera.\n\nTo learn about all the things you can do with the webRequest API, see its reference documentation.\n\nThis page was last modified on Dec 4, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Modify_a_web_page",
    "title": "Modify a web page - Mozilla | MDN",
    "h1": "Modify a web page",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nOne of the most common use cases for an extension is to modify a web page. For example, an extension might want to change the style applied to a page, hide particular DOM nodes, or inject extra DOM nodes into the page.\n\nThere are two ways to do this with WebExtensions APIs:\n\nEither way, these scripts are called content scripts, and are different from the other scripts that make up an extension:\n\nIn this article we'll look at both methods of loading a script.\n\nFirst of all, create a new directory called \"modify-page\". In that directory, create a file called \"manifest.json\", with the following contents:\n\nThe content_scripts key is how you load scripts into pages that match URL patterns. In this case, content_scripts instructs the browser to load a script called \"page-eater.js\" into all pages under https://developer.mozilla.org/.\n\nNote: Since the \"js\" property of content_scripts is an array, you can use it to inject more than one script into matching pages. If you do this the pages share the same scope, just like multiple scripts loaded by a page, and they are loaded in the order that they are listed in the array.\n\nNote: The content_scripts key also has a \"css\" property that you can use to inject CSS stylesheets.\n\nNext, create a file called \"page-eater.js\" inside the \"modify-page\" directory, and give it the following contents:\n\nNow install the extension, and visit https://developer.mozilla.org/. The page should look like this:\n\nWhat if you still want to eat pages, but only when the user asks you to? Let's update this example so we inject the content script when the user clicks a context menu item.\n\nFirst, update \"manifest.json\" so it has the following contents:\n\nHere, we've removed the content_scripts key, and added two new keys:\n\nLet's create this file. Create a new file called background.js in the modify-page directory, and give it the following contents:\n\nIn this script we're creating a context menu item, giving it a specific id and title (the text to be displayed in the context menu). Then we set up an event listener so that when the user clicks a context menu item, we check to see if it is our eat-page item. If it is, we inject \"page-eater.js\" into the current tab using the tabs.executeScript() API. This API optionally takes a tab ID as an argument: we've omitted the tab ID, which means that the script is injected into the currently active tab.\n\nAt this point the extension should look like this:\n\nNow reload the extension, open a page (any page, this time) activate the context menu, and select \"Eat this page\":\n\nContent scripts and background scripts can't directly access each other's state. However, they can communicate by sending messages. One end sets up a message listener, and the other end can then send it a message. The following table summarizes the APIs involved on each side:\n\nNote: In addition to this method of communication, which sends one-off messages, you can also use a connection-based approach to exchange messages. For advice on choosing between the options, see Choosing between one-off messages and connection-based messaging.\n\nLet's update our example to show how to send a message from the background script.\n\nFirst, edit background.js so that it has these contents:\n\nNow, after injecting page-eater.js, we use tabs.query() to get the currently active tab, and then use tabs.sendMessage() to send a message to the content scripts loaded into that tab. The message has the payload {replacement: \"Message from the extension!\"}.\n\nNext, update page-eater.js like this:\n\nNow, instead of just eating the page right away, the content script listens for a message using runtime.onMessage. When a message arrives, the content script runs essentially the same code as before, except that the replacement text is taken from request.replacement.\n\nSince tabs.executeScript() is an asynchronous function, and to ensure we send message only after listener has been added in page-eater.js, we use onExecuted() which will be called after page-eater.js executed.\n\nNote: Press Ctrl+Shift+J (or Cmd+Shift+J on macOS) OR web-ext run --bc to open Browser Console to view console.log in background script.\n\nAlternatively, use Add-on Debugger which allows you set breakpoint. There is currently no way to start Add-on Debugger directly from web-ext.\n\nIf we want send messages back from the content script to the background page, we would use runtime.sendMessage() instead of tabs.sendMessage(), e.g.:\n\nNote: These examples all inject JavaScript; you can also inject CSS programmatically using the tabs.insertCSS() function.\n\nThis page was last modified on Jul 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Safely_inserting_external_content_into_a_page",
    "title": "Safely insert external content into a page - Mozilla | MDN",
    "h1": "Safely insert external content into a page",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nIntegrate delightful video calls into your platform with Whereby.Mozilla ads\n\nIntegrate delightful video calls into your platform with Whereby.\nMozilla ads\n\nThere are times when you might want or need to include content from an external source in your extension. But, there is the risk that the source may have malicious scripts embedded in it—added by either the developer of the source or by a malicious third-party.\n\nTake an RSS reader as an example. You don't know what RSS feeds your extension will open and have no control over the content of those RSS feeds. So, it's possible the user could subscribe to a feed where, for example, a feed item's title includes a script. This could be something as simple as including JavaScript code within <script></script> tags. If you were to extract the title, assume it was plain text, and add it to the DOM of a page created by your extension, your user now has an unknown script running in their browser. Therefore, care needs to be taken to avoid evaluating arbitrary text as HTML.\n\nYou also need to remember that extensions have privileged contexts, for example in background scripts and content scripts. In the worst case, an embedded script could run in one of these contexts, a situation known as privilege escalation. This situation can leave a user's browser open to remote attack by enabling the website that injected the code to access critical user data, such as passwords, browser history, or browsing behavior.\n\nThis article examines how to work safely with remote data and add it to a DOM.\n\nWhen working with strings, there are a couple of recommended options to safely add them to a page: the standard DOM node creation methods or jQuery.\n\nA lightweight approach to inserting strings into a page is to use the native DOM manipulation methods: document.createElement, Element.setAttribute, and Node.textContent. The safe approach is to create the nodes separately and assign their content using textContent:\n\nThis approach is safe because the use of .textContent automatically escapes any remote HTML in data.color.\n\nHowever, beware, you can use native methods that aren't safe. Take the following code:\n\nHere, the contents of data.className or data.color could contain HTML that can close the tag early, insert arbitrary further HTML content, then open another tag.\n\nWhen using jQuery, functions such as attr() and text() escape content as it's added to a DOM. So, the \"favorite color\" example from above, implemented in jQuery, would look like this:\n\nWhen working with externally sourced content that you know is HTML, sanitizing the HTML is essential before it's added to a page. Best practice for sanitizing HTML is to use an HTML sanitization library or a template engine with HTML sanitization features. In this section, we look at some suitable tools and how to use them.\n\nAn HTML sanitization library strips anything that could lead to script execution from HTML, so you can safely inject complete sets of HTML nodes from a remote source into your DOM. DOMPurify, which has been reviewed by various security experts, is a suitable library for this task in extensions.\n\nFor production use, DOMPurify comes as a minified version: purify.min.js. You can use this script in the way that best suits your extension. For example, you could add it as a content script:\n\nThen, in myinjectionscript.js you can read the external HTML, sanitize it, and add it to a page's DOM:\n\nYou can use any method to add the sanitized HTML to your DOM, for example jQuery's .html() function. Remember though that the SAFE_FOR_JQUERY flag needs to be used in this case:\n\nAnother common pattern is to create a local HTML template for a page and use remote values to fill in the blanks. While this approach is generally acceptable, care should be taken to avoid use of constructs that would allow the insertion of executable code. This can happen when the templating engine uses constructs that insert raw HTML into the document. If the variable used to insert raw HTML is of a remote source, it is subject to the same security risk mentioned in the introduction.\n\nFor example, when using mustache templates you must use the double mustache, {{variable}}, which escapes any HTML. Use of the triple mustache, {{{variable}}}, must be avoided as this injects a raw HTML string and could add executable code to your template. Handlebars works in a similar way, with variables in double handlebars, {{variable}}, being escaped. Whereas, variables in triple handlebars are left raw and must be avoided. Also, if you create a Handlebars helper using Handlebars.SafeString use Handlebars.escapeExpression() to escape any dynamic parameters passed to the helper. This is a requirement because the resulting variable from Handlebars.SafeString is considered safe and it isn't escaped when inserted with double handlebars.\n\nThere are similar constructs in other templating systems that need to be approached with the same level of care.\n\nFor more information on this subject, see the following articles:\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Sharing_objects_with_page_scripts",
    "title": "Share objects with page scripts - Mozilla | MDN",
    "h1": "Share objects with page scripts",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nNote: The techniques described in this section are only available in Firefox, and only from Firefox 49 onwards.\n\nWarning: As an extension developer you should consider that scripts running in arbitrary web pages are hostile code whose aim is to steal the user's personal information, damage their computer, or attack them in some other way.\n\nThe isolation between content scripts and scripts loaded by web pages is intended to make it more difficult for hostile web pages to do this.\n\nSince the techniques described in this section break down that isolation, they are inherently dangerous and should be used with great care.\n\nAs the content scripts guide notes, content scripts don't see changes made to the DOM by scripts loaded by web pages. This means that, for example, if a web page loads a library like jQuery, content scripts won't be able to use it, and have to load their own copy. Conversely, scripts loaded by web pages can't see changes made by content scripts.\n\nHowever, Firefox provides some APIs that enable content scripts to:\n\nIn Firefox, part of the isolation between content scripts and page scripts is implemented using a feature called \"Xray vision\". When a script in a more-privileged scope accesses an object that's defined in a less-privileged scope it sees only the \"native version\" of the object. Any expando properties are invisible, and if any properties of the object have been redefined, it sees the original implementation, not the redefined version.\n\nThe purpose of this feature is to make it harder for the less-privileged script to confuse the more-privileged script by redefining the native properties of objects.\n\nSo, for example, when a content script accesses the page's window, it won't see any properties the page script added to the window, and if the page script has redefined any existing properties of the window, the content script will see the original version.\n\nIn Firefox, DOM objects in content scripts get an extra property wrappedJSObject. This is an \"unwrapped\" version of the object, which includes any changes made to that object by any page scripts.\n\nLet's take a simple example. Suppose a web page loads a script:\n\nThe script adds an expando property to the global window:\n\nXray vision means that if a content script tries to access foo, it will be undefined:\n\nIn Firefox, content scripts can use window.wrappedJSObject to see the expando property:\n\nNote that once you do this, you can no longer rely on any of this object's properties or functions being, or doing, what you expect. Any of them, even setters and getters, could have been redefined by untrusted code.\n\nAlso note that unwrapping is transitive: when you use wrappedJSObject, any properties of the unwrapped object are themselves unwrapped (and therefore unreliable). So it's good practice, once you've got the object you need, to rewrap it, which you can do like this:\n\nSee the document on Xray vision for much more detail on this.\n\nFirefox also provides APIs enabling content scripts to make objects available to page scripts. There are several approaches here:\n\nGiven a function defined in the content script, exportFunction() exports it to the page script's scope, so the page script can call it.\n\nFor example, let's consider an extension which has a background script like this:\n\nThis does two things:\n\nThe content script looks like this:\n\nThis defines a function notify(), which just sends its argument to the background script. It then exports the function to the page script's scope. Now the page script can call this function:\n\nGiven an object defined in the content script, this creates a clone of the object in the page script's scope, thereby making the clone accessible to page scripts. By default, this uses the structured clone algorithm to clone the object, meaning that functions in the object are not included in the clone. To include functions, pass the cloneFunctions option.\n\nFor example, here's a content script that defines an object that contains a function, then clones it into the page script's scope:\n\nNow page scripts see a new property on the window, messenger, which has a function notify():\n\nOn the xrayed window object pristine constructors for some built-in JavaScript objects such as Object, Function or Proxy and various DOM classes are available. XMLHttpRequest does not behave in this way, see the XHR and fetch section for details. They will create instances belonging to the page global's object hierarchy and then return an xray wrapper.\n\nSince objects created this way already belong to the page and not the content script passing them back to the page will not require additional cloning or exporting.\n\nA Promise cannot be cloned directly using cloneInto, as Promise is not supported by the structured clone algorithm. However, the desired result can be achieved using window.Promise instead of Promise, and then cloning the resolution value like this:\n\nThis page was last modified on Jul 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Add_a_button_to_the_toolbar",
    "title": "Add a button to the toolbar - Mozilla | MDN",
    "h1": "Add a button to the toolbar",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nToolbar buttons are one of the main UI components available to extensions. Toolbar buttons live in the main browser toolbar and contain an icon. When the user clicks the icon, one of two things can happen:\n\nWith WebExtension APIs, these kinds of buttons are called \"browser actions\", and are set up like so:\n\nIn this section we'll create an extension that adds a button to the toolbar. When the user clicks the button, we'll open https://developer.mozilla.org in a new tab.\n\nFirst, create a new directory, \"button\", and create a file called \"manifest.json\" inside it with the following contents:\n\nThis specifies that we'll have a background script named \"background.js\", and a browser action (button) whose icons will live in the \"icons\" directory.\n\nNext, create the \"icons\" directory inside the \"buttons\" directory, and save the two icons shown below inside it:\n\n\"page-16.png\":\n\n\"page-32.png\":\n\nNote: These icons are from the bitsies! iconset created by Recep Kütük.\n\nWe have two icons so we can use the bigger one in high-density displays. The browser will take care of selecting the best icon for the current display.\n\nNext, create \"background.js\" in the extension's root directory, and give it the following contents:\n\nThis listens for the browser action's click event; when the event fires, the openPage() function is run, which opens the specified page using the tabs API.\n\nAt this point the complete extension should look like this:\n\nNow install the extension and click the button:\n\nLet's try adding a popup to the button. Replace manifest.json with this:\n\nWe've made two changes from the original:\n\nSo now we need to create that popup. Create a directory called \"popup\" then create a file called \"choose_page.html\" inside it. Give it the following contents:\n\nYou can see that this is a normal HTML page containing three <div> elements, each with the name of a Mozilla site inside. It also includes a CSS file and a JavaScript file, which we'll add next.\n\nCreate a file called \"choose_page.css\" inside the \"popup\" directory, and give it these contents:\n\nThis is just a bit of styling for our popup.\n\nNext, create a \"choose_page.js\" file inside the \"popup\" directory, and give it these contents:\n\nIn our JavaScript, we listen for clicks on the popup choices. We first check to see if the click landed on one of the page-choices; if not, we don't do anything else. If the click did land on a page-choice, we construct a URL from it, and open a new tab containing the corresponding page. Note that we can use WebExtension APIs in popup scripts, just as we can in background scripts.\n\nThe extension's final structure should look like this:\n\nNow reload the extension, click the button again, and try clicking on the choices in the popup:\n\nPage actions are just like browser actions, except that they are for actions which are relevant only for particular pages, rather than the browser as a whole.\n\nWhile browser actions are always shown, page actions are only shown in tabs where they are relevant. Page action buttons are displayed in the URL bar, rather than the browser toolbar.\n\nThis page was last modified on Aug 2, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Implement_a_settings_page",
    "title": "Implement a settings page - Mozilla | MDN",
    "h1": "Implement a settings page",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nA settings page gives users a way to see and change settings (sometimes also called \"preferences\" or \"options\") for the extension.\n\nWith WebExtension APIs, settings are generally stored using the storage API. Implementing a settings page is a three-step process:\n\nNote: You can also open this page programmatically using the runtime.openOptionsPage() function.\n\nFirst, we'll write an extension that adds a blue border to every page the user visits.\n\nCreate a new directory called settings, then create a file called manifest.json inside it with the following contents:\n\nThis extension instructs the browser to load a content script called \"borderify.js\" into all web pages the user visits.\n\nNext, create a file called borderify.js inside the settings directory, and give it these contents:\n\nThis just adds a blue border to the page.\n\nNow install and test the extension.\n\nNow let's create a settings page to allow the user to set the color of the border.\n\nFirst, update manifest.json so it has these contents:\n\nWe've added three new manifest keys:\n\nThis sets an HTML document to be the settings page (also called options page) for this extension.\n\nWe'll use the storage API to store the settings, and we need to ask permission to use this API.\n\nYou have to include an extension id in order to save and retrieve settings from synchronized storage.\n\nNext, because we've promised to provide options.html, let's create it. Create a file with that name inside the settings directory, and give it the following contents:\n\nThis defines a <form> with a labeled text <input> and a submit <button>. It also includes a script called options.js.\n\nCreate options.js, again in the settings directory, and give it the following contents:\n\nThis does two things:\n\nNote: Specifying a separate .js file is required. You cannot use inline JavaScript.\n\nYou could store the settings values in local storage instead if you feel that local storage is preferable for your extension.\n\nNote: The implementation of storage.sync in Firefox relies on the Add-on ID. If you use storage.sync, you must set an ID for your extension using the browser_specific_settings key in manifest.json, as shown in the example manifest above. See Firefox bug 1323228 for related information.\n\nFinally, update borderify.js to read the border color from storage:\n\nAt this point, the complete extension should look like this:\n\nNow:\n\nThis page was last modified on Aug 2, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Working_with_the_Tabs_API",
    "title": "Work with the Tabs API - Mozilla | MDN",
    "h1": "Work with the Tabs API",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nStart your app venture on the monday.com app marketplace, and tap into 180K+ customers.Mozilla ads\n\nStart your app venture on the monday.com app marketplace, and tap into 180K+ customers.\nMozilla ads\n\nTabs let a user open several web pages in their browser window and then switch between those web pages. With the Tabs API, you can work with and manipulate these tabs to create utilities that provide users with new ways to work with tabs or to deliver the features of your extension.\n\nIn this how-to article we'll look at:\n\nWe then conclude by looking at some other, miscellaneous features offered by the API.\n\nNote: There are some Tab API features covered elsewhere. These are the methods you can use to manipulate tab content with scripts (tabs.connect, tabs.sendMessage, and tabs.executeScript). If you want more information on these methods, see the Concepts article Content scripts and the how-to guide Modify a web page.\n\nFor the majority of the Tabs API functions you don't need any permissions; however, there are some exceptions:\n\nThe following is how you might request \"tabs\" permission in your extension's manifest.json file:\n\nThis request gives you use of all Tabs API feature on all website your user visits. There is also an alternative approach for requesting permissions to use tabs.executeScript() or tabs.insertCSS() where you don't need host permission, in the form of \"activeTab\". This permission provides the same rights as \"tabs\" with <all_urls>, but with two restrictions:\n\nThe benefit of this approach is the user won't get a permissions warning saying your extension can \"Access your data for all websites\". This is because <all_urls> permission gives an extension the ability to execute scripts in any tab, any time it likes, whereas \"activeTab\" is limited to allowing the extension to perform a user requested action in the current tab.\n\nThere will be occasions when you want to get a list of all the tabs in all the browser windows. Other times you might want to find a subset of tabs that match some specific criteria, such as those opened from a specific tab or displaying pages from a particular domain. And once you have your list of tabs, you'll probably want to know more about their properties.\n\nThis is where tabs.query() comes in. Used alone to get all tabs or taking the queryInfo object—to specify query criteria such as whether the tab is active, in the current window, or one or more of 17 criteria—tabs.query() returns an array of tabs.Tab objects containing information about the tabs.\n\nWhere you want information about the current tab only, you can get a tabs.Tab object for that tab using tabs.getCurrent(). If you have a tab's ID, you can get its tabs.Tab object using tabs.get().\n\nTo see how tabs.query() and tabs.Tab are used, let's walk through how the tabs-tabs-tabs example adds the list of \"switch to tabs\" to its toolbar button popup.\n\nHere is the manifest.json:\n\nNote:\n\ntabs.html defines the content of the extension's popup:\n\nThis does the following:\n\nIn tabs.js, we'll see how the list of tabs is built and added to the popup.\n\nFirst, an event handler is added to execute listTabs() when tabs.html is loaded:\n\nThe first thing that listTabs() does is to call getCurrentWindowTabs(). This is where tabs.query() is used to get a tabs.Tab object for the tabs in the current window:\n\nNow, listTabs() is ready to create the content for the popup.\n\nTo start with:\n\nNext, we'll create the links for each tab:\n\nFinally, the document fragment is written to the <div id=\"tabs-list\"> element:\n\nAnother related example feature is the \"Alert active tab\" info option that dumps all the tabs.Tab object properties for the active tab into an alert:\n\nWhere callOnActiveTab() finds the active tab object by looping through the tabs.Tab objects looking for the item with active set:\n\nHaving gathered information about the tabs you'll most likely want to do something with them—either to offer users features for manipulating and managing tabs or to implement functionality in your extension.\n\nThe following functions are available:\n\nNote: These functions all require the ID (or IDs) of the tab they are manipulating:\n\nWhereas the following functions will act on the active tab (if no tab id is provided):\n\nThe tabs-tabs-tabs example exercises all of these features except for updating a tab's URL The way in which these APIs are used is similar, so we'll look at one of the more involved implementations, that of the \"Move active tab to the beginning of the window list\" option.\n\nBut first, here is a demonstration of the feature in action:\n\nNone of the functions require a permission to operate, so there are no features in the manifest.json file that need to be highlighted.\n\ntabs.html defines the \"menu\" displayed in the popup, which includes the \"Move active tab to the beginning of the window list\" option, with a series of <a> tags grouped by a visual separator. Each menu item is given an id, which is used in tabs.js to determine which menu item is being requested.\n\nTo implement the \"menu\" defined in tabs.html, tabs.js includes a listener for clicks in tabs.html:\n\nA series of if statements then look to match the id of the item clicked.\n\nThis code snippet is for the \"Move active tab to the beginning of the window list\" option:\n\nIt's worth noting the use of console.log(). This enables you to output information to the debugger console, which can be useful when resolving issues found during development.\n\nThe move code first calls callOnActiveTab() which in turn calls getCurrentWindowTabs() to get a tabs.Tab object containing the active window's tabs. It then loops through the object to find and return the active tab object:\n\nA feature of tabs is that the user can pin tabs in a window. Pinned tabs are placed at the start of the tab list and cannot be moved. This means that the earliest position a tab can move to is the first position after any pinned tabs. So, firstUnpinnedTab() is called to find the position of the first unpinned tab by looping through the tabs object:\n\nWe now have everything needed to move the tab: the active tab object from which we can get the tab id and the position the tab is to be moved to. So, we can implement the move:\n\nThe remaining functions to duplicate, reload, create, and remove tabs are implemented similarly.\n\nThe next set of functions enable you to get (tabs.getZoom) and set (tabs.setZoom) the zoom level within a tab. You can also retrieve the zoom settings (tabs.getZoomSettings) but, at the time of writing, the ability to set the settings (tabs.setZoomSettings) wasn't available in Firefox.\n\nThe level of zoom can be between 30% and 500% (represented as decimals 0.3 to 5).\n\nIn Firefox the default zoom settings are:\n\nThe tabs-tabs-tabs example includes three demonstrations of the zoom feature: zoom in, zoom out, and reset zoom. Here is the feature in action:\n\nLet's take a look at how the zoom in is implemented.\n\nNone of the zoom functions require permissions, so there are no features in the manifest.json file that need to be highlighted.\n\nWe have already discussed how the tabs.html defines the options for this extension, nothing new or unique is done to provide the zoom options.\n\ntabs.js starts by defining several constants used in the zoom code:\n\nIt then uses the same listener we discussed earlier so it can act on clicks in tabs.html.\n\nFor the zoom in feature, this runs:\n\nThis code uses callOnActiveTab() to get the details of the active tab, then tabs.getZoom gets the tab's current zoom factor. The current zoom is compared to the defined maximum (MAX_ZOOM) and an alert issued if the tab is already at the maximum zoom. Otherwise, the zoom level is incremented but limited to the maximum zoom, then the zoom is set with tabs.getZoom.\n\nAnother significant capability offered by the Tabs API is the ability to manipulate the CSS within a tab—add new CSS to a tab (tabs.insertCSS()) or remove CSS from a tab (tabs.removeCSS()).\n\nThis can be useful, for example, if you want to highlight certain page elements or change the default layout of the page.\n\nThe apply-css example uses these features to add a red border to the web page in the active tab. Here is the feature in action:\n\nLet's walk through how it's set up.\n\nThe manifest.json requests permissions required to use the CSS features. You need either:\n\nThe latter is the most useful, as it allows an extension to use tabs.insertCSS() and tabs.removeCSS() in the active tab when run from the extension's browser or page action, context menu, or a shortcut.\n\nYou will note that \"tabs\" permission is requested in addition to \"activeTab\". This additional permission is needed to enable the extension's script to access the tab's URL, the importance of which we'll see in a moment.\n\nThe other main features in the manifest.json file are the definition of:\n\nOn startup, background.js sets some constants to define the CSS to be applied, titles for the \"page action\", and a list of protocols the extension will work in:\n\nWhen first loaded, the extension uses tabs.query() to get a list of all the tabs in the current browser window. It then loops through the tabs calling initializePageAction().\n\ninitializePageAction uses protocolIsApplicable() to determine whether the active tab's URL is one the CSS can be applied to:\n\nThen, if the example can act on the tab, initializePageAction() sets the tab's pageAction (navigation bar) icon and title to use the \"off\" versions before making the pageAction visible:\n\nNext, a listener on pageAction.onClicked waits for the pageAction icon to be clicked, and calls toggleCSS when it is.\n\ntoggleCSS() gets the title of the pageAction and then takes the action described:\n\nFinally, to ensure that the pageAction is valid after each update to the tab, a listener on tabs.onUpdated calls initializePageAction() each time the tab is updated to check that the tab is still using a protocol to which the CSS can be applied.\n\nThere are a couple of other Tabs API features that don't fit into one of the earlier sections:\n\nIf you want to learn more about the Tabs API, check out:\n\nThis page was last modified on Jul 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Work_with_the_Bookmarks_API",
    "title": "Work with the Bookmarks API - Mozilla | MDN",
    "h1": "Work with the Bookmarks API",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nBookmarks enable users to collect and organize lists of web pages, so they can easily get back to their favorites. Using the Bookmarks API, your extensions can manipulate bookmarks in much the same way users can.\n\nTo make use of the Bookmarks API, you need to ask for the \"bookmarks\" permission in your extension's manifest.json file:\n\nThe Bookmarks API lets your extension do the things users can do with bookmarks and includes functions for:\n\nTo gain an understanding of how to work with the Bookmarks API let's take a look at the bookmark-it example. This example adds a toolbar icon (browserAction) which, when clicked, adds or removes the current page from bookmarks. If the page is bookmarked (or removed from bookmarks) in some other way, the icon is updated to show the state of the page's bookmarking.\n\nThis video shows the extension in action:\n\nThe manifest.json describes the extension:\n\nDefines the icons that'll be used to represent the extension, in places such as the add-on manager.\n\nRequests permissions. \"bookmarks\" is requested to enable use of the Bookmarks API. \"tabs\" is requested so that the active tab's URL and title can be read and used to create or find the page's bookmark. The need for the Tabs API to access these details means that you're unlikely to use the Bookmark API without the Tabs API.\n\nSets up the basic toolbar button details. Most of the button's features will be set up in code after the page's bookmark status is known.\n\nDefines the background script that'll add and remove the page's bookmark and set the characteristics of the toolbar button.\n\nAs with any background script, background.js is run as soon as the extension is started. Initially the script calls updateActiveTab() that starts by obtaining the Tabs object for the current tab, using tabs.query, and passing the object to updateTab() with this code:\n\nupdateTab() first passes the active tab's URL to isSupportedProtocol():\n\nisSupportedProtocol() determines if the URL displayed in the active tab is one that can be bookmarked. To extract the protocol from the tab's URL, the extension takes advantage of the HTMLAnchorElement by adding the tab's URL to an <a> element and then getting the protocol using the protocol property.\n\nIf the protocol is one supported by bookmarks, the extension determines if the tab's URL is already bookmarked and if it is, calls updateIcon():\n\nupdateIcon() sets the toolbar button's icon and title, depending on whether the URL is bookmarked or not.\n\nWith the toolbar button initialized, the extension starts listening for a click on the toolbar button, calling toggleBookmark() when that happens.\n\ntoggleBookmark() uses the result from the search made by updateTabs(), which looks for the presence of the URL in a bookmark, to determine whether to remove or add a bookmark for the current URL.\n\nTo update the toolbar icon, the extension listens for the creation or removal of bookmarks. This approach has the benefit of capturing both the bookmark update made by the extension and any update made by the user outside the extension.\n\nFinally, the extension listens for a change to the active tab's URL, or the user switching to another tab or window. These actions could change the viewed URL and therefore the status of the extension's toolbar icon.\n\nIf you want to learn more, check out the Bookmarks API reference.\n\nThis page was last modified on Jul 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Work_with_the_Cookies_API",
    "title": "Work with the Cookies API - Mozilla | MDN",
    "h1": "Work with the Cookies API",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nLearn how to think outside the box, overcome creative blocks, and grow a problem-solving mindset.Mozilla ads\n\nLearn how to think outside the box, overcome creative blocks, and grow a problem-solving mindset.\nMozilla ads\n\nWith the Cookies API your extensions have access to capabilities similar to those used by websites to store and read cookies. The API's features give extensions the ability to store information on a site-by-site basis. So, as we shall see in the example, you could store details of a user's choice of background color for a site. Then, when the user revisits the site, your extension can use the API's ability to get details about cookies and read them to recover the user's choice and apply it to the website.\n\nNote: The behavior of cookies can be controlled using the privacy.websites cookieConfig property. This property controls whether and how cookies are accepted or whether all cookies are treated as session cookies.\n\nTo use the Cookies API you need to request both the \"cookies\" permission and host permissions for the protocols, domains, or websites you want to access or use \"<all_urls>\" to access any protocol and domain. The way in which you define your host permission string affects your extension's ability to read, write, and delete cookies.\n\nHost permission string\n\nRead\n\nWrite/Delete\n\nSecure\n\nNon-secure\n\nSecure\n\nNon-secure\n\n\"http://*.example.com/\"\n\nNo\n\nMain and sub domains, with any path\n\nMain and sub domains, with any path\n\nMain and sub domains, with any path\n\n\"https://www.example.com/\"\n\nwww.example.com or .example.com with any path, but no subdomains\n\nwww.example.com or .example.com with any path, but no subdomains\n\nwww.example.com or .example.com with any path, but no subdomains\n\nwww.example.com or .example.com with any path, but no subdomains\n\n\"*://*.example.com/\"\n\nMain and sub domains, with any path\n\nMain and sub domains, with any path\n\nMain and sub domains, with any path\n\nMain and sub domains, with any path\n\n\"<all_urls>\"\n\nAny domain with any path\n\nAny domain with any path\n\nAny domain with any path\n\nAny domain with any path\n\nFirefox provides three types of cookie store:\n\nNote: Only visible if extension.isAllowedIncognitoAccess() returns true. Safari doesn't support access to private cookies.\n\nYou can find out what cookie stores are available using cookies.getAllCookieStores, which returns an object containing the ID of each cookie store and a list of the IDs of the tabs using each cookie store.\n\nThe example extension cookie-bg-picker allows its user to pick a color and icon that are applied to the background of a site's web pages. These choices are saved on a per-site basis using cookies.set. When a page from the site is opened, cookies.get reads any earlier choice, and the extension applies it to the web page. A reset option removes the background icon and color from the site as well as the cookie, using cookies.remove. It also uses cookies.onChanged to listen for changes to cookies, sending details of the change to the console.\n\nThis video shows the extension in action:\n\nThis example also uses the Tabs and Runtime APIs, but we'll discuss those features only in passing.\n\nThe key feature of the manifest.json file relating to the use of the Cookies API is the permissions request:\n\nHere, the extension requests permission to use the Cookies API (\"cookies\") with all websites (\"<all_urls>\"). This enables the extension to save the background color icon choice for any website.\n\nThe extension's UI uses a toolbar button (browserAction) implemented with bgpicker.html that calls bgpicker.js. Together these allow the user to select the icon and enter the color they want to apply as the site background. They also provide the option to clear those settings.\n\nbgpicker.js handles the selection of icon or entry of a color for the background in separate functions.\n\nTo handle the icon buttons the script first gathers all the class names used for the buttons in the HTML file:\n\nIt then loops through all the buttons assigning them their image and creating an onclick listener for each button:\n\nWhen a button is clicked, its corresponding listener function gets the button class name and then the icon path which it passes to the page's content script (updatebg.js) using a message. The content script then applies the icon to the web page's background. Meanwhile, bgpicker.js stores the details of the icon applied to the background in a cookie:\n\nThe color setting is handled in a similar way, triggered by a listener on the color input field. When a color is entered the active tab is discovered and the color selection details sent, using a message, to the page's content script to be applied to the web page background. Then the color selection is added to the cookie:\n\nWhen the user clicks the reset button, which has been assigned to the variable reset:\n\nreset.onclick first finds the active tab. Then, using the tab's ID it passes a message to the page's content script (updatebg.js) to get it to remove the icon and color from the page. The function then clears the cookie values (so the old values aren't carried forward and written onto a cookie created for a new icon or color selection on the same page) before removing the cookie:\n\nAlso, so you can see what is going on with the cookies, the script reports on all changes to cookies in the console:\n\nA background script (background.js) provides for the possibility that the user has chosen a background icon and color for the website in an earlier session. The script listens for changes in the active tab, either the user switching between tabs or changing the URL of the page displayed in the tab. When either of these events happen, cookieUpdate() is called. cookieUpdate() in turn uses getActiveTab() to get the active tab ID. The function can then check whether a cookie for the extension exists, using the tab's URL:\n\nIf the \"bgpicker\" cookie exists for the website, the details of the icon and color selected earlier are retrieved and passed to the content script updatebg.js using messages:\n\nIn addition to the APIs mentioned so far, the Cookies API also offers cookies.getAll. This function takes the details object to specify filters for the selected cookies and returns an array of cookies.Cookie objects that match the filter criteria.\n\nIf you want to learn more about the Cookies API, check out:\n\nThis page was last modified on Jul 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Work_with_contextual_identities",
    "title": "Work with contextual identities - Mozilla | MDN",
    "h1": "Work with contextual identities",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nMany people need or want to interact with the web using multiple personas. They may have accounts for web-based work and personal email. They might sign out of their social media accounts before accessing online shopping, to ensure that any tracking scripts on the shopping sites can't pick up their social media activity. Users often use a standard and private browser window or two different browsers to address these requirements.\n\nTo address this need, Firefox includes a feature known as contextual identities, container tabs, or account containers. This feature enables the creation of a cookie container (store) for each of the identities the user wants to use in their browser. Tabs can be associated with one of these identities, keeping cookies separate from those of other identities in the browser. The practical upshot of this is that, for example, a user could have a personal and work identity. They can then, for example, use the personal identity in one tab, where they sign into their personal web mail, and the work identity in another tab, where they sign into their work web mail.\n\nFor more background on this feature, see:\n\nDepending on the nature of your extension, you may want to manage contextual identities, associate objects your extension manipulates with contextual identities, or both.\n\nTo manage contextual identities, you use the contextualIdentities API. This API enables you to add, query, update, and delete contextual identities. When you create a contextual identity, it is given a unique cookieStoreId. You use this ID to work with entities related to the contextual identity.\n\nSeveral extension APIs include the cookieStoreId in objects to enable extensions to associate these objects with specific contextual identities.\n\nTo use the contextualIdentities API, you must include the \"contextualIdentities\" permission in your manifest.json file.\n\nIf an API enables cookies to be modified, you need the \"cookies\" permission. For example, using cookieStoreId in tabs.query does not require the \"cookies\" API, as reading the property doesn't affect the cookies in the containers. However, using tabs.create requires the permission because the opened tab can read and modify cookies in a container.\n\nThe example extension contextual-identities provides a toolbar button with a popup that lists the identities in the browser. For each identity, the extension provides options to create a tab using its cookies container or remove all of its tabs.\n\nHere is a short video of the extension in action:\n\nThe main features of the manifest.json file are:\n\nA popup on the toolbar button provides the extension's user interface. context.html implements this popup, but it's just a shell into which the context.js script writes the list of contextual identities and their related options.\n\nAll the extension's features are implemented through context.js, which is invoked whenever the toolbar popup is displayed.\n\nThe script first gets the 'identity-list' <div> from context.html.\n\nIt then checks whether the contextual identities feature is turned on in the browser. If it's not on, information on how to activate it is added to the popup.\n\nFirefox installs with the contextual identity feature turned off. It's turned on when an extension using the contextualIdentities API is installed. However, the user can turn the feature off using an option on the preferences page (about:preferences), hence the need for the check.\n\nThe script now uses contextualIdentities.query. to determine whether any contextual identities are defined in the browser. If there are none, a message is added to the popup and the script stops.\n\nIf there are contextual identities present—Firefox comes with four default identities—the script loops through each one adding its name, styled in its chosen color, to the <div> element. The function createOptions() then adds the options to \"create\" or \"close all\" to the <div> before it's added to the popup.\n\nThe script now waits for the user to select an option in the popup.\n\nIf the user clicks the option to create a tab for an identity, one is opened using tabs.create by passing the identity's cookie store ID.\n\nIf the user selects the option to close all tabs for the identity, the script performs a tabs.query to get all the tabs using the identity's cookie store. The script then passes this list of tabs to tabs.remove.\n\nIf you want to learn more about the contextualIdentities API, check out:\n\nThis page was last modified on Oct 25, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard",
    "title": "Interact with the clipboard - Mozilla | MDN",
    "h1": "Interact with the clipboard",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nWorking with the clipboard in extensions is transitioning from the Web API document.execCommand method (which is deprecated) to the navigator.clipboard method.\n\nNote: The navigator.clipboard API is a recent addition to the specification and may not be fully implemented in all browsers. This article describes some limitations, but be sure to review the compatibility tables for each method before using them to ensure that the API supports your needs.\n\nThe difference between the two APIs is that document.execCommand this is analogous to the keyboard copy, cut, and paste actions – exchanging data between a webpage and clipboard – whereas navigator.clipboard writes and reads arbitrary data to and from the clipboard.\n\nnavigator.clipboard provide separate methods to read or write:\n\nHowever, while navigator.clipboard.readText() and navigator.clipboard.writeText() work on all browsers, navigator.clipboard.read() and navigator.clipboard.write() do not. For example, on Firefox at the time of writing, navigator.clipboard.read() and navigator.clipboard.write() are not fully implemented, such that to:\n\nThis section describes the options for writing data to the clipboard.\n\nThe Clipboard API writes arbitrary data to the clipboard from your extension. Using the API requires the permission \"clipboardRead\" or \"clipboardWrite\" in your manifest.json file. As the API is only available to Secure Contexts, it cannot be used from a content script running on http:-pages, only https:-pages.\n\nFor page scripts, the \"clipboard-write\" permission needs to be requested using the Web API navigator.permissions. You can check for that permission using navigator.permissions.query():\n\nNote: The clipboard-write permission name is not supported in Firefox, only Chromium browsers.\n\nThis function takes a string and writes it to the clipboard:\n\nThe \"cut\" and \"copy\" commands of the document.execCommand() method are used to replace the clipboard's content with the selected material. These commands can be used without any special permission in short-lived event handlers for a user action (for example, a click handler).\n\nFor example, suppose you've got a popup that includes the following HTML:\n\nTo make the \"copy\" button copy the contents of the <input> element, you can use code like this:\n\nBecause the execCommand() call is inside a click event handler, you don't need any special permissions.\n\nHowever, let's say that instead you trigger the copy from an alarm:\n\nDepending on the browser, this may not work. On Firefox, it will not work, and you'll see a message like this in your console:\n\ndocument.execCommand('cut'/'copy') was denied because it was not called from inside a short running user-generated event handler.\n\nTo enable this use case, you need to ask for the \"clipboardWrite\" permission. So: \"clipboardWrite\" enables you to write to the clipboard outside a short-lived event handler for a user action.\n\nNote:document.execCommand() does not work on input fields of type=\"hidden\", with the HTML5 attribute \"hidden\", or any matching CSS rule using \"display: none;\". So, to add a \"copy to clipboard\" button to a span, div, or p tag, you need to use a workaround, such as setting the input's position to absolute and moving it out of the viewport.\n\nThe clipboard and other APIs involved here are evolving rapidly, so there are variations among browsers in how they work.\n\nIn Chrome:\n\nIn Firefox:\n\nSee the browser compatibility tables for more information.\n\nThis section describes the options for reading or pasting data from the clipboard.\n\nThe Clipboard API's navigator.clipboard.readText() and navigator.clipboard.read() methods let you read arbitrary text or binary data from the clipboard in secure contexts. This lets you access the data in the clipboard without pasting it into an editable element.\n\nOnce you have the \"clipboard-read\" permission from the Permissions API, you can read from the clipboard easily. For example, this snippet of code fetches the text from the clipboard and replaces the contents of the element with the ID \"outbox\" with that text.\n\nTo use document.execCommand(\"paste\") your extension needs the \"clipboardRead\" permission. This is the case even if you're using the \"paste\" command from within a user-generated event handler, such as click or keypress.\n\nConsider HTML that includes something like this:\n\nTo set the content of the <textarea> element with the ID \"output\" from the clipboard when the user clicks the \"paste\" <button>, you can use code like this:\n\nFirefox supports the \"clipboardRead\" permission from version 54 but only supports pasting into elements in content editable mode, which for content scripts only works with a <textarea>. For background scripts, any element can be set to content editable mode.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jul 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Extending_the_developer_tools",
    "title": "Extend the developer tools - Mozilla | MDN",
    "h1": "Extend the developer tools",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nNote: This page describes the devtools APIs in Firefox 55. Although the APIs are based on the Chrome devtools APIs, Firefox does not implement all those features; therefore, not all features are documented here. To see which features are missing, refer to Limitations of the devtools APIs.\n\nYou can use WebExtensions APIs to extend the browser's built-in developer tools. To create a devtools extension, include the \"devtools_page\" key in your manifest.json file:\n\nThe value of this key is a URL pointing to an HTML file bundled with your extension, a special extension page called the devtools page. The URL must be relative to the manifest.json file.\n\nThis manifest key implicitly sets the \"devtools\" permission, which triggers an install-time permission warning about devtools. To avoid this warning, mark the feature as optional by listing the \"devtools\" permission in the optional_permissions manifest key. Setting the optional permission can be particularly helpful when introducing devtools features in an update, as it prevents the extension from being disabled (in Chrome) or blocked from updating (in Firefox).\n\nThe devtools page is loaded when the browser devtools are opened, and unloaded when it is closed. Note that because the devtools window is associated with a single tab, it's quite possible for more than one devtools window - hence more than one devtools page - to exist at the same time.\n\nThe devtools page doesn't have any visible DOM, but can include JavaScript sources using <script> tags. The sources must be bundled with the extension itself. The sources get access to:\n\nNote that the devtools page does not get access to any other WebExtension APIs, and the background page doesn't get access to the devtools APIs. Instead, the devtools page and the background page must communicate using the runtime messaging APIs. Here's an example:\n\nThe devtools.js file will hold the actual code creating your dev tools extensions.\n\nThe devtools window hosts a number of separate tools - the JavaScript Debugger, Network Monitor, and so on. A row of tabs across the top lets the user switch between the different tools. The window hosting each tool's user interface is called a \"panel\".\n\nUsing the devtools.panels.create() API, you can create your own panel in the devtools window:\n\nThis takes three mandatory arguments: the panel's title, icon, and content. It returns a Promise which resolves to a devtools.panels.ExtensionPanel object representing the new panel.\n\nThe developer tools are always attached to a particular browser tab. This is referred to as the \"target\" for the developer tools, or the \"inspected window\". You can interact with the inspected window using the devtools.inspectedWindow API.\n\nThe devtools.inspectedWindow.eval() provides one way to run code in the inspected window.\n\nThis is somewhat like using tabs.executeScript() to inject a content script, but with one important difference:\n\nNote: A clean view of the DOM is a security feature, intended to help prevent hostile pages from tricking extensions by redefining the behavior of native DOM functions. This means you need to be very careful using eval(), and should use a normal content script if you can.\n\nScripts loaded using devtools.inspectedWindow.eval() also don't see any JavaScript variables defined by content scripts.\n\nA devtools document doesn't have direct access to tabs.executeScript(), so if you need to inject a content script, the devtools document must send a message to the background script asking it to inject the script. The devtools.inspectedWindow.tabId provides the ID of the target tab: the devtools document can pass this to the background script, and the background script can in turn pass it into tabs.executeScript():\n\nIf you need to exchange messages between the content scripts running in the target window and a devtools document, it's a good idea to use the runtime.connect() and runtime.onConnect to set up a connection between the background page and the devtools document. The background page can then maintain a mapping between tab IDs and runtime.Port objects, and use this to route messages between the two scopes.\n\nThese APIs are based on the Chrome devtools APIs, but many features are still missing, compared with Chrome. This section lists the features that are still not implemented, as of Firefox 54. Note that the devtools APIs are under active development and we expect to add support for most of them in future releases.\n\nThe following are not supported:\n\nNone of the options to inspectedWindow.eval() are supported.\n\nScripts injected using inspectedWindow.eval() can't use all the Console's command-line helper functions, but $0 and inspect() are both supported (starting from Firefox 55).\n\nThe following are not supported:\n\nThe webextensions-examples repo on GitHub, contains several examples of extensions that use devtools panels:\n\nThis page was last modified on Aug 10, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Build_a_cross_browser_extension",
    "title": "Build a cross-browser extension - Mozilla | MDN",
    "h1": "Build a cross-browser extension",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nThe introduction of the browser extensions API created a uniform landscape for the development of browser extensions. However, there are differences in the API implementations and the scope of coverage among the browsers that use the extensions API (the major ones being Chrome, Edge, Firefox, Opera, and Safari).\n\nMaximizing the reach of your browser extension means developing it for at least two browsers, possibly more. This article looks at the main challenges faced when creating a cross-browser extension and suggests how to address these challenges.\n\nNote: The main browsers have adopted Manifest V3. This manifest version provides better compatibility between the browser extension environments, such as promises for handling asynchronous events. In addition to the information in this guide, refer to the Manifest V3 migration guides for Firefox and Chrome.\n\nYou need to address the following areas when tackling a cross-platform extension:\n\nThere are two API namespaces in use among the main browsers:\n\nFirefox also supports the chrome.* namespace for APIs that are compatible with Chrome, primarily to assist with porting. However, using the browser.* namespace is preferred. In addition to being the proposed standard, browser.* uses promises—a modern and convenient mechanism for handling asynchronous events.\n\nOnly in the most trivial extensions is namespace likely to be the only cross-platform issue to be addressed. Therefore, it's rarely, if ever, helpful to address this issue alone. The best approach is to address this with asynchronous event handling.\n\nWith the introduction of Manifest V3, all the main browsers adopted the standard of returning Promises from asynchronous methods. Firefox and Safari have full support for Promises on all asynchronous APIs. Starting from Chrome 121, all asynchronous extension APIs support promises unless documented otherwise. The devtools API is the only API namespace without Promise support (Chromium bug 1510416).\n\nIn Manifest V2, Firefox and Safari support Promises for asynchronous methods. At the same time, Chrome methods invoke callbacks. For compatibility, all the main browsers support callbacks across all manifest versions. See Callbacks and Promises for details.\n\nSome handlers of extension API events are expected to respond asynchronously through a Promise or callback function. For example, a handler of the runtime.onMessage event can send an asynchronous response using a Promise or using a callback. A Promise as the return value from an event handler is supported in Firefox and Safari, but not yet in Chrome.\n\nFirefox also supports callbacks for the APIs that support the chrome.* namespace. However, using promises is recommended. Promises greatly simplifies asynchronous event handling, particularly where you need to chain events together. This means using a polyfill or similar so your extension uses the browser.* namespace in Firefox and Safari and chrome.* in Chrome, Opera, and Edge.\n\nNote: If you're unfamiliar with the differences between these two methods, look at Getting to know asynchronous JavaScript: Callbacks, Promises and Async/Await or the MDN Using promises page.\n\nSo, how do you take advantage of promises easily? The solution is to code for Firefox using promises and use the WebExtension browser API Polyfill to address Chrome, Opera, and Edge.\n\nThis polyfill addresses the API namespace and asynchronous event handling across Firefox, Chrome, Opera, and Edge.\n\nTo use the polyfill, install it into your development environment using npm or download it directly from GitHub releases.\n\nThen, reference browser-polyfill.js in:\n\nSo, for example, this manifest.json code makes the polyfill available to background scripts:\n\nYour goal is to ensure that the polyfill executes in your extension before any other scripts that expect the browser.* API namespace execute.\n\nNote: For more details and information on using the polyfill with a module bundler, see the project's readme on GitHub.\n\nThere are other polyfill options. However, at the time of writing, none of the other options provide the coverage of the WebExtension browser API Polyfill. So, where you haven't targeted Firefox as your first choice, your options are to accept the limitations of alternative polyfills, port to Firefox and add cross-browser support, or develop your own polyfill.\n\nThe differences in the API functions offered in each of the main browsers fall into three broad categories:\n\nDetails about the support for the extension APIs among the main browsers and Firefox for Android and Safari on iOS can be found on the Mozilla Developer Network Browser support for JavaScript APIs page. Browser compatibility information is also included with each function and its methods, types, and events in the Mozilla Developer Network JavaScript APIs reference pages.\n\nA simple approach to addressing API differences is to limit the functions used in your extension to functions that offer the same functionality across your range of targeted browsers. In practice, this approach is likely to be too restrictive for most extensions.\n\nInstead, where there are differences among the APIs, you should either offer alternative implementations or fallback functionality. (Remember: you may also need to do this to allow for differences in API support between versions of the same browser.)\n\nUsing runtime checks on the availability of a function's features is the recommended approach to implementing alternative or fallback functionality. The benefit of performing a runtime check is that you don't need to update and redistribute the extension to take advantage of a function when it becomes available.\n\nThe following code enables you to perform a runtime check:\n\nContent scripts can access and modify the page's DOM, just as page scripts can. They can also see any changes made to the DOM by page scripts. However, content scripts get a \"clean\" view of the DOM.\n\nFirefox and Chrome use fundamentally different approaches to handle this behavior: in Firefox it's called Xray vision, while Chrome uses isolated worlds. For more details, see Content script environment section of the Content scripts concept article.\n\nHowever, Firefox provides some APIs that enable content scripts to access JavaScript objects created by page scripts and to expose their JavaScript objects to page scripts. See Sharing objects with page scripts for details.\n\nThere are also differences between the Content Security Policy (CSP) for content scripts.\n\nAs part of its implementation of Manifest V3, Chrome replaced background pages with extension service workers. Firefox retains the use of background pages, while Safari supports background pages and service workers.\n\nFor more information, see the browser support section on the \"background\" manifest key page. This includes a simple example of how to implement a cross-browser script.\n\nThe differences in the manifest.json file keys supported by the main browsers fall broadly into three categories:\n\nBrowser compatibility information is included with each key in the Mozilla Developer Network manifest.json key reference pages.\n\nAs manifest.json files tend to change little—except for release numbers, which may differ between the various browsers—creating and editing a static version for each browser is usually the simplest approach.\n\nPackaging an extension for distribution through the browser extension stores is relatively straightforward. Firefox, Chrome, Edge, and Opera all use a simple zip format that requires the manifest.json file to be at the root of the zip package. Safari requires extensions to be packaged in a similar way to apps.\n\nFor details on packaging, refer to the guidance on the respective extension's developer portals.\n\nEach of the major browsers maintains browser extension stores. Each store also reviews your extension to check for security vulnerabilities.\n\nAs a consequence, you need to approach adding and updating your extension for each store separately. In some cases, you can upload your extension using a utility.\n\nThis table summarizes the approach and features of each store:\n\nChrome\n\nYes\n\nYes\n\nAutomatic, less than an hour\n\nYes\n\nEdge\n\nNo\n\nNo\n\nNo SLA provided\n\nYes\n\nFirefox\n\nNo\n\nweb-ext\n\nAutomatic, a few seconds.\n\nA manual review of the extension takes place after publication, which may result in the extension being suspended where issues that need fixing are found.\n\nYes\n\nOpera\n\nNo\n\nNo\n\nManual, no SLA provided\n\nNo\n\nSafari\n\nYes\n\nNo\n\nYes with, according to Apple, on average, 50% of apps reviewed in 24 hours and over 90% reviewed in 48 hours.\n\nYes\n\nThe Firefox, Chrome, and Edge stores require that each uploaded version has a different version number. This means you cannot revert to an earlier version number if you come across issues in a release.\n\nWhen approaching a cross-platform extension development, the differences between extension API implementations can be addressed by targeting Firefox and using the WebExtension browser API Polyfill.\n\nThe bulk of your cross-platform work is likely to focus on handling variations among the API features supported by the main browsers. You may also need to account for differences between the content script and background script implementations. Creating your manifest.json files should be relatively straightforward and something you can do manually. You then need to account for the variations in the processes for submitting to each extension store.\n\nFollowing the advice in this article, you should be able to create an extension that works well on all of the four main browsers, enabling you to deliver your extension features to more people.\n\nThis page was last modified on Jan 22, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Browser_support_for_JavaScript_APIs",
    "title": "Browser support for JavaScript APIs - Mozilla | MDN",
    "h1": "Browser support for JavaScript APIs",
    "paragraphs": "Develop and launch modern apps with MongoDB Atlas, a resilient data platform.\nGet Started free\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nTip: you can click/tap on a cell for more information.\n\nNote: Microsoft Edge compatibility data is supplied by Microsoft Corporation and is included here under the Creative Commons Attribution 3.0 United States License.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/action",
    "title": "action - Mozilla | MDN",
    "h1": "action",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nAdds a button to the browser's toolbar.\n\nNote: This API is available in Manifest V3 or higher. It replaces the Manifest V2 APIs browserAction and, in Chrome and Safari, pageAction.\n\nA browser action is a button in the browser's toolbar.\n\nYou can associate a popup with the button. Like a web page, the popup is specified using HTML, CSS, and JavaScript. JavaScript running in the popup gets access to all the same WebExtension APIs as your background scripts, but its global context is the popup, not the current page displayed in the browser. To affect web pages, you need to communicate with them via messages.\n\nIf you specify a popup, it is shown — and the content loaded — when the user clicks the icon. If you do not specify a popup, an event is dispatched to your extension when the user clicks the icon.\n\nThe button also has a context menu, and you can add items to this menu with the menus API using the action menus.ContextType.\n\nYou can define most of a browser action's properties declaratively using the action key in the manifest.json.\n\nWith the action API, you can:\n\nAn array of four integers in the range 0-255 defining an RGBA color.\n\nPixel data for an image. Must be an ImageData object (for example, from a <canvas> element).\n\nSets the browser action's title. This will be displayed in a tooltip.\n\nGets the browser action's title.\n\nSets the browser action's icon.\n\nSets the HTML document to be opened as a popup when the user clicks on the browser action's icon.\n\nGets the HTML document set as the browser action's popup.\n\nOpen the browser action's popup.\n\nSets the browser action's badge text. The badge is displayed on top of the icon.\n\nGets the browser action's badge text.\n\nSets the badge's background color.\n\nGets the badge's background color.\n\nSets the badge's text color.\n\nGets the badge's text color.\n\nGets the user-specified settings for the browser action.\n\nEnables the browser action for a tab. By default, browser actions are enabled for all tabs.\n\nDisables the browser action for a tab, meaning that it cannot be clicked when that tab is active.\n\nChecks whether the browser action is enabled or not.\n\nFired when a browser action icon is clicked. This event will not fire if the browser action has a popup.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.action API. This documentation is derived from action.json in the Chromium code.\n\nThis page was last modified on Oct 30, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/alarms",
    "title": "alarms - Mozilla | MDN",
    "h1": "alarms",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nSee what your team could do with The DevSecOps Platform. Take GitLab for a spin.Mozilla ads\n\nSee what your team could do with The DevSecOps Platform. Take GitLab for a spin.\nMozilla ads\n\nSchedule code to run at a specific time in the future. This is like setTimeout() and setInterval(), except that those functions don't work with background pages that are loaded on demand.\n\nAlarms do not persist across browser sessions. They are created globally across all contexts of a single extension. E.g. alarm created in background script will fire onAlarm event in background script, options page, popup page and extension tabs (and vice versa). Alarms API is not available in Content scripts.\n\nTo use this API you need to have the \"alarms\" permission.\n\nInformation about a particular alarm.\n\nClear a specific alarm, given its name.\n\nClear all scheduled alarms.\n\nCreate a new alarm.\n\nRetrieves a specific alarm, given its name.\n\nRetrieve all scheduled alarms.\n\nFired when an alarm goes off.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.alarms API.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks",
    "title": "bookmarks - Mozilla | MDN",
    "h1": "bookmarks",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nThe WebExtensions bookmarks API lets an extension interact with and manipulate the browser's bookmarking system. You can use it to bookmark pages, retrieve existing bookmarks, and edit, remove, and organize bookmarks.\n\nTo use this API, an extension must request the \"bookmarks\" permission in its manifest.json file.\n\nExtensions cannot create, modify, or delete bookmarks in the root node of the bookmarks tree. Doing so causes an error with the message: \"The bookmark root cannot be modified\"\n\nRepresents a bookmark or folder in the bookmarks tree.\n\nA String enum which describes whether a node in the tree is a bookmark, a folder, or a separator.\n\nA String enum which specifies why a bookmark or folder is unmodifiable.\n\nContains information which is passed to the bookmarks.create() function when creating a new bookmark.\n\nCreates a bookmark or folder.\n\nRetrieves one or more BookmarkTreeNodes, given a bookmark's ID or an array of bookmark IDs.\n\nRetrieves the children of the specified BookmarkTreeNode.\n\nRetrieves a requested number of recently added bookmarks.\n\nRetrieves part of the bookmarks tree, starting at the specified node.\n\nRetrieves the entire bookmarks tree into an array of BookmarkTreeNode objects.\n\nMoves the specified BookmarkTreeNode to a new location in the bookmark tree.\n\nRemoves a bookmark or an empty bookmark folder, given the node's ID.\n\nRecursively removes a bookmark folder; that is, given the ID of a folder node, removes that node and all its descendants.\n\nSearches for BookmarkTreeNodes matching a specified set of criteria.\n\nUpdates the title and/or URL of a bookmark, or the name of a bookmark folder, given the bookmark's ID.\n\nFired when a bookmark or folder is created.\n\nFired when a bookmark or folder is removed. When a folder is removed recursively, a single notification is fired for the folder, and none for its contents.\n\nFired when a bookmark or folder changes. Currently, only title and url changes trigger this.\n\nFired when a bookmark or folder is moved to a different parent folder or to a new offset within its folder.\n\nFired when the user has sorted the children of a folder in the browser's UI. This is not called as a result of a move().\n\nFired when a bookmark import session is begun. Expensive observers should ignore bookmarks.onCreated updates until bookmarks.onImportEnded is fired. Observers should still handle other notifications immediately.\n\nFired when a bookmark import session has finished.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.bookmarks API. This documentation is derived from bookmarks.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/browserAction",
    "title": "browserAction - Mozilla | MDN",
    "h1": "browserAction",
    "paragraphs": "Bootstrap your dev business. 180K+ customers are awaiting your apps on the monday.com app marketplace.\nLearn more\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nAdds a button to the browser's toolbar.\n\nA browser action is a button in the browser's toolbar.\n\nYou can associate a popup with the button. Like a web page, the popup is specified using HTML, CSS, and JavaScript. JavaScript running in the popup gets access to all the same WebExtension APIs as your background scripts, but its global context is the popup, not the current page displayed in the browser. To affect web pages, you need to communicate with them via messages.\n\nIf you specify a popup, it is shown — and the content loaded — when the user clicks the icon. If you do not specify a popup, an event is dispatched to your extension when the user clicks the icon.\n\nThe button also has a context menu, and you can add items to this menu with the menus API using the browser_action menus.ContextType.\n\nYou can define most of a browser action's properties declaratively using the browser_action key in the manifest.json.\n\nWith the browserAction API, you can:\n\nAn array of four integers in the range 0-255 defining an RGBA color.\n\nPixel data for an image. Must be an ImageData object (for example, from a <canvas> element).\n\nSets the browser action's title. This will be displayed in a tooltip.\n\nGets the browser action's title.\n\nSets the browser action's icon.\n\nSets the HTML document to be opened as a popup when the user clicks on the browser action's icon.\n\nGets the HTML document set as the browser action's popup.\n\nOpen the browser action's popup.\n\nSets the browser action's badge text. The badge is displayed on top of the icon.\n\nGets the browser action's badge text.\n\nSets the badge's background color.\n\nGets the badge's background color.\n\nSets the badge's text color.\n\nGets the badge's text color.\n\nGets the user-specified settings for the browser action.\n\nEnables the browser action for a tab. By default, browser actions are enabled for all tabs.\n\nDisables the browser action for a tab, meaning that it cannot be clicked when that tab is active.\n\nChecks whether the browser action is enabled or not.\n\nFired when a browser action icon is clicked. This event will not fire if the browser action has a popup.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.browserAction API. This documentation is derived from browser_action.json in the Chromium code.\n\nThis page was last modified on Jan 30, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings",
    "title": "browserSettings - Mozilla | MDN",
    "h1": "browserSettings",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nEnables an extension to modify certain global browser settings. Each property of this API is a BrowserSetting object, providing the ability to modify a particular setting.\n\nBecause these are global settings, it's possible for extensions to conflict. See the documentation for BrowserSetting.set() for details of how conflicts are handled.\n\nTo use this API you need to have the \"browserSettings\" permission.\n\nDetermines whether code running in web pages can display popups in response to user events.\n\nDetermines whether the browser cache is enabled or not.\n\nDetermines whether the selected tab can be closed with a double click.\n\nDetermines various settings for color management.\n\nDetermines the mouse event that triggers a context menu popup.\n\nDetermines whether the FTP protocol is enabled.\n\nRead the value of the browser's home page.\n\nDetermines how the browser treats animated images.\n\nReads the value of the browser's new tab page.\n\nControls the position of newly opened tabs relative to already open tabs.\n\nDetermines whether bookmarks are opened in the current tab or a new tab.\n\nDetermines whether search results are opened in the current tab or a new tab.\n\nDetermines whether address bar autocomplete suggestions are opened in the current tab or a new tab.\n\nControls whether to override the browser theme (light or dark) when setting pages' preferred color scheme.\n\nControls whether the user-chosen colors override the page's colors.\n\nRead the highest and lowest versions of TLS supported by the browser.\n\nControls whether the browser will use the fonts specified by a web page or use only built-in fonts.\n\nPrevents websites from showing notifications using the Notification Web API.\n\nControls whether zoom is applied to the entire page or to text only.\n\nControls whether page zoom is applied on a per-site or per-tab basis. If privacy.websites.resistFingerprinting is true, this setting has no effect and zoom is applied on a per-tab basis.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/browsingData",
    "title": "browsingData - Mozilla | MDN",
    "h1": "browsingData",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nEnables extensions to clear the data that is accumulated while the user is browsing.\n\nIn the browsingData API, browsing data is divided into types:\n\nYou can use the browsingData.remove() function to remove any combination of these types. There are also dedicated functions to remove each particular type of data, such as removePasswords(), removeHistory() and so on.\n\nAll the browsingData.remove[X]() functions take a browsingData.RemovalOptions object, which you can use to control two further aspects of data removal:\n\nFinally, this API gives you a browsingData.settings() function that gives you the current value of the settings for the browser's built-in \"Clear History\" feature.\n\nTo use this API you must have the \"browsingData\" API permission.\n\nObject used to specify the type of data to remove: for example, history, downloads, passwords, and so on.\n\nObject used to specify how far back in time to remove data, and whether to remove data added through normal web browsing, by hosted apps, or by add-ons.\n\nRemoves browsing data for the data types specified.\n\nClears the browser's cache.\n\nRemoves cookies.\n\nRemoves the list of downloaded files.\n\nClears saved form data.\n\nClears the browser's history.\n\nClears any local storage created by websites.\n\nClears saved passwords.\n\nClears data associated with plugins.\n\nGets the current value of settings in the browser's \"Clear History\" feature.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.browsingData API.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/captivePortal",
    "title": "captivePortal - Mozilla | MDN",
    "h1": "captivePortal",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nDetermine the captive portal state of the user's connection. A captive portal is a web page displayed when a user first connects to a Wi-Fi network. The user provides information or acts on the captive portal web page to gain broader access to network resources, such as accepting terms and conditions or making a payment.\n\nTo use this API you need to have the \"captivePortal\" permission.\n\nReturn the canonical URL of the captive-portal detection page. Read-only.\n\nReturns the time, in milliseconds, since the last request was completed.\n\nReturns the portal state as one of unknown, not_captive, unlocked_portal, or locked_portal.\n\nFires when the captive portal service determines that the user can connect to the internet.\n\nFires when the captive portal state changes.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/clipboard",
    "title": "clipboard - Mozilla | MDN",
    "h1": "clipboard",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nThe WebExtension clipboard API (which is different from the standard Clipboard API) enables an extension to copy items to the system clipboard. Currently the WebExtension clipboard API only supports copying images, but it's intended to support copying text and HTML in the future.\n\nThe WebExtension clipboard API exists primarily because the standard Clipboard API doesn't support writing images to the clipboard. The WebExtension clipboard API may be deprecated once the standard Clipboard API's support for non-text clipboard contents has entered general use.\n\nReading from the clipboard is not supported by this API, because the clipboard can already be read using the standard web platform APIs. See Interacting with the clipboard.\n\nThis API is based on Chrome's clipboard API, but that API is only available for Chrome apps, not extensions.\n\nTo use this API you need the \"clipboardWrite\" extension permission.\n\nCopy an image to the clipboard.\n\nTip: you can click/tap on a cell for more information.\n\nNote:\n\nThis API is based on Chromium's chrome.clipboard API.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/commands",
    "title": "commands - Mozilla | MDN",
    "h1": "commands",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nLoved by developers. Trusted by enterprises. Start your free 30 day trial.Mozilla ads\n\nLoved by developers. Trusted by enterprises. Start your free 30 day trial.\nMozilla ads\n\nListen for the user executing commands that you have registered using the commands manifest.json key.\n\nObject representing a command. This contains the information specified for the command in the commands manifest.json key.\n\nGets all registered commands for this extension.\n\nReset the given command's description and shortcut to the values given in the manifest key.\n\nChange the description or shortcut for the given command.\n\nFired when the keyboard shortcut for a command is changed.\n\nFired when a command is executed using its associated keyboard shortcut.\n\nTip: you can click/tap on a cell for more information.\n\nNote:\n\nThis API is based on Chromium's chrome.commands API.\n\nThis page was last modified on May 24, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts",
    "title": "contentScripts - Mozilla | MDN",
    "h1": "contentScripts",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nUse this API to register content scripts. Registering a content script instructs the browser to insert the given content scripts into pages that match the given URL patterns.\n\nNote: When using Manifest V3 or higher, use scripting.registerContentScripts() to register scripts.\n\nThis API is very similar to the \"content_scripts\" manifest.json key, except that with \"content_scripts\", the set of content scripts and associated patterns is fixed at install time. With the contentScripts API, an extension can register and unregister scripts at runtime.\n\nTo use the API, call contentScripts.register() passing in an object defining the scripts to register, the URL patterns, and other options. This returns a Promise that is resolved with a contentScripts.RegisteredContentScript object.\n\nThe RegisteredContentScript object represents the scripts that were registered in the register() call. It defines an unregister() method that you can use to unregister the content scripts. Content scripts are also unregistered automatically when the page that created them is destroyed. For example, if they are registered from the background page they will be unregistered automatically when the background page is destroyed, and if they are registered from a sidebar or a popup, they will be unregistered automatically when the sidebar or popup is closed.\n\nThere is no contentScripts API permission, but an extension must have the appropriate host permissions for any patterns it passes to register().\n\nAn object of this type is returned by the contentScripts.register() function. It represents the content scripts that were registered by that call, and can be used to unregister the content script.\n\nRegisters the given content scripts.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/contextualIdentities",
    "title": "contextualIdentities - Mozilla | MDN",
    "h1": "contextualIdentities",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nWork with contextual identities: list, create, remove, and update contextual identities.\n\n\"Contextual identities\", also known as \"containers\", are a browser feature that lets users assume multiple identities when browsing the web, and maintain some separation between these identities. For example, a user might consider their \"work identity\" separate from their \"personal identity\", and not want to share cookies between these two contexts.\n\nWith the contextual identities feature, each contextual identity has a name, a color, and an icon. New tabs can be assigned to an identity, and the name, icon, and color appears in the address bar. Internally, each identity gets a cookie store that is not shared with other tabs. This cookie store is identified by the cookieStoreId in this and other APIs.\n\nContextual identities are an experimental feature in Firefox and are only enabled by default in Firefox Nightly. To enable them in other versions of Firefox, set the privacy.userContext.enabled preference to true. Note that although contextual identities are available in Firefox for Android, there's no UI to work with them in this version of the browser.\n\nBefore Firefox 57, the contextualIdentities API is only available if the contextual identities feature is itself enabled. If an extension tried to use the contextualIdentities API without the feature being enabled, then method calls would resolve their promises with false.\n\nFrom Firefox 57 onwards, if an extension that uses the contextualIdentities API is installed, then the contextual identities feature will be enabled automatically. Note though that it's still possible for the user to disable the feature using the \"privacy.userContext.enabled\" preference. If this happens, then contextualIdentities method calls will reject their promises with an error message.\n\nSee Work with contextual identities for more information.\n\nContextual identities are not supported in any other browsers.\n\nTo use this API you need to include the \"contextualIdentities\" and \"cookies\" permissions in your manifest.json file.\n\nContains information about a contextual identity.\n\nCreates a new contextual identity.\n\nRetrieves a contextual identity, given its cookie store ID.\n\nMoves one or more contextual identities within the list of contextual identities.\n\nRetrieves all contextual identities, or all contextual identities with a particular name.\n\nUpdates properties of an existing contextual identity.\n\nDeletes a contextual identity.\n\nFired when a contextual identity is created.\n\nFired when a contextual identity is removed.\n\nFired when one or more properties of a contextual identity is updated.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jan 5, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/cookies",
    "title": "cookies - Mozilla | MDN",
    "h1": "cookies",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nEnables extensions to get and set cookies, and be notified when they change.\n\nTo use this API, an add-on must specify the \"cookies\" API permission in its manifest.json file, along with host permissions for any sites for which it wishes to access cookies. The add-on may read or write any cookies which could be read or written by a URL matching the host permissions. For example:\n\nAn add-on with this host permission may:\n\nIt may not:\n\nAn add-on with this host permission may:\n\nIt may not:\n\nAn add-on with this host permission may:\n\nTrackers use third-party cookies, that is, cookies set by a website other than the one you are on, to identify the websites you visit. For example:\n\nFirefox includes features to prevent tracking. These features separate cookies so that trackers cannot make an association between websites visited. So, in the preceding example, ad-tracker.com cannot see the cookie created on a-news-site.com when visiting a-shopping-site.com. The first iteration of this protection was first-party isolation which is now being superseded by dynamic partitioning.\n\nNote: First-party isolation and dynamic partitioning will not be active at the same time. If the user or an extension turns on first-party isolation, it takes precedence over dynamic partitioning. However, when private browsing uses dynamic partitioning, normal browsing may not be partitioning cookies. See Status of partitioning in Firefox, for details.\n\nWhen using dynamic partitioning, Firefox partitions the storage accessible to JavaScript APIs by top-level site while providing appropriate access to unpartitioned storage to enable common use cases. This feature is being rolled out progressively. See Status of partitioning in Firefox, for implementation details.\n\nStorage partitions are keyed by the schemeful URL of the top-level website and, when dynamic partitioning is active, the key value is available through the partitionKey.topLevelSite property in the cookies API, for example, partitionKey: {topLevelSite: \"http://site\"}.\n\nGenerally, top-level documents are in unpartitioned storage, while third-party iframes are in partitioned storage. If a partition key cannot be determined, the default (unpartitioned storage) is used. For example, while all HTTP(S) sites can be used as a partition key, moz-extension:- URLs cannot. Therefore, iframes in Firefox's extension documents do not use partitioned storage.\n\nBy default, cookies.get(), cookies.getAll(), cookies.set(), and cookies.remove() work with cookies in unpartitioned storage. To work with cookies in partitioned storage in these APIs, topLevelSite in partitionKey must be set. The exception is getAll where setting partitionKey without topLevelSite returns cookies in partitioned and unpartitioned storage. cookies.onChanged fires for any cookie that the extension can access, including cookies in partitioned storage. To ensure that the correct cookie is modified, extensions should read the cookie.partitionKey property from the event and pass its value to cookies.set() and cookies.remove().\n\nWhen first-party isolation is on, cookies are qualified by the domain of the original page the user visited (essentially, the domain shown to the user in the URL bar, also known as the \"first party domain\").\n\nFirst-party isolation can be enabled by the user by adjusting the browser's configuration and set by extensions using the firstPartyIsolate setting in the privacy API. Note that first-party isolation is enabled by default in Tor Browser.\n\nIn the cookies API, the first party domain is represented using the firstPartyDomain attribute. All cookies set while first-party isolation is on have this attribute set to the domain of the original page. In the preceding example, this is a-shopping-site.com for one cookie and a-news-site.com for the other. When first-party isolation is off, all cookies set by websites have this property set to an empty string.\n\nThe cookies.get(), cookies.getAll(), cookies.set() and cookies.remove() APIs all accept a firstPartyDomain option.\n\nWhen first-party isolation is on, you must provide this option or the API call will fail and return a rejected promise. For get(), set(), and remove() you must pass a string value. For getAll(), you may also pass null here, and this will get all cookies, whether or not they have a non-empty value for firstPartyDomain.\n\nWhen first-party isolation is off, the firstPartyDomain parameter is optional and defaults to an empty string. A non-empty string can be used to retrieve or modify first-party isolation cookies. Likewise, passing null as firstPartyDomain to getAll() will return all cookies.\n\nRepresents information about an HTTP cookie.\n\nRepresents a cookie store in the browser.\n\nRepresents the reason a cookie changed.\n\nRepresents the same-site status of the cookie.\n\nRetrieves information about a single cookie.\n\nRetrieves all cookies that match a given set of filters.\n\nSets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.\n\nDeletes a cookie by name.\n\nLists all existing cookie stores.\n\nFired when a cookie is set or removed.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.cookies API. This documentation is derived from cookies.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/declarativeNetRequest",
    "title": "declarativeNetRequest - Mozilla | MDN",
    "h1": "declarativeNetRequest",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nThis API enables extensions to specify conditions and actions that describe how network requests should be handled. These declarative rules enable the browser to evaluate and modify network requests without notifying extensions about individual network requests.\n\nTo use this API, an extension must request the \"declarativeNetRequest\" or \"declarativeNetRequestWithHostAccess\" permission in its manifest.json file.\n\nThe \"declarativeNetRequest\" permission allows extensions to block and upgrade requests without any host permissions. Host permissions are required if the extension wants to redirect requests or modify headers on requests or when the \"declarativeNetRequestWithHostAccess\" permission is used instead of the \"declarativeNetRequest\" permission. To act on requests in these cases, host permissions are required for the request URL. For all requests, except for navigation requests (i.e., resource type main_frame and sub_frame), host permissions are also required for the request's initiator. The initiator of a request is usually the document or worker that triggered the request.\n\nSome requests are restricted and cannot be matched by extensions. These include privileged browser requests, requests to or from restricted domains, and requests from other extensions.\n\nThe \"declarativeNetRequestFeedback\" permission is required to use getMatchedRules and onRuleMatchedDebug as they return information on declarative rules matched. See Testing for more information.\n\nThe declarative rules are defined by four fields:\n\nNote: A redirect action does not redirect the request, and the request continues as usual when:\n\nThis is an example rule that blocks all script requests originating from \"foo.com\" to any URL with \"abc\" as a substring:\n\nThe urlFilter field of a rule condition is used to specify the pattern matched against the request URL. See RuleCondition for details. Some examples of URL filters are:\n\nRules are organized into rulesets:\n\nNote: Errors and warnings about invalid static rules are only displayed during testing. Invalid static rules in permanently installed extensions are ignored. Therefore, it's important to verify that your static rulesets are valid by testing.\n\nAn extension can:\n\nThe number of dynamic and session-scoped rules an extension can add is limited to the value of MAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES.\n\nWhen the browser evaluates how to handle requests, it checks each extension's rules that have a condition that matches the request and chooses the one to consider applying as follows:\n\nNote: When multiple matching rules have the same rule priority and rule action type, the outcome can be ambiguous when the matched action support additional properties. These properties can result in outcomes that cannot be combined. For example:\n\nTo control the order in which actions are applied, assign distinct priority values to rules whose order of precedence is important.\n\nNote: After rule priority and rule action, Firefox considers the ruleset the rule belongs to, in this order of precedence: session > dynamic > session rulesets. This cannot be relied upon across browsers, see WECG issue 280.\n\nIf only one extension provides a rule for the request, that rule is applied. However, where more than one extension has a matching rule, the browser chooses the one to apply in this order of precedence:\n\nIf the request was not blocked or redirected, the matching modifyHeaders actions are applied, as documented in declarativeNetRequest.ModifyHeaderInfo.\n\ntestMatchOutcome, getMatchedRules, and onRuleMatchedDebug are available to assist with testing rules and rulesets. These APIs require the \"declarativeNetRequestFeedback\" permissions. In addition:\n\nDetails of a matched rule.\n\nThe request or response headers to modify for the request.\n\nDetails of how the redirect should be performed. Only valid for redirect rules.\n\nThe resource type of a request.\n\nAn object containing details of a rule.\n\nAn object defining the action to take if a rule is matched.\n\nAn object defining the condition under which a rule is triggered.\n\nAn object containing details of a URL transformation to perform for a redirect action.\n\nRuleset ID for the dynamic rules added by the extension.\n\nThe time interval within which declarativeNetRequest.MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL declarativeNetRequest.getMatchedRules calls can be made.\n\nThe minimum number of static rules guaranteed to an extension across its enabled static rulesets.\n\nThe number of times declarativeNetRequest.getMatchedRules can be called within a period of declarativeNetRequest.GETMATCHEDRULES_QUOTA_INTERVAL.\n\nThe maximum number of combined dynamic and session scoped rules an extension can add.\n\nThe maximum number of static rulesets an extension can enable.\n\nThe maximum number of regular expression rules that an extension can add.\n\nThe maximum number of static rulesets an extension can specify as part of the declarative_net_request.rule_resources manifest key.\n\nThe ruleset ID for the session-scoped rules added by the extension.\n\nReturns the number of static rules an extension can enable before the global static rule limit is reached.\n\nReturns the set of dynamic rules for the extension.\n\nReturns the IDs for the set of enabled static rulesets.\n\nReturns all the rules matched for the extension.\n\nReturns the set of session scoped rules for the extension.\n\nChecks if a regular expression is supported as a declarativeNetRequest.RuleCondition.regexFilter rule condition.\n\nConfigures how the action count for tabs are handled.\n\nChecks if any of the extension's declarativeNetRequest rules would match a hypothetical request.\n\nModifies the active set of dynamic rules for the extension.\n\nUpdates the set of active static rulesets for the extension.\n\nModifies the set of session scoped rules for the extension.\n\nFired when a rule is matched with a request when debugging an extension with the \"declarativeNetRequestFeedback\" permission.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jul 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/devtools",
    "title": "devtools - Mozilla | MDN",
    "h1": "devtools",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nEnables extensions to interact with the browser's Developer Tools. You use this API to create Developer Tools pages, interact with the window that is being inspected, inspect the page network usage.\n\nTo use this API, you must specify the devtools_page manifest key. The use of this manifest key triggers an install-time permission warning about devtools. To avoid an install-time permission warning, mark the feature as optional by listing the \"devtools\" permission in the optional_permissions manifest key.\n\nNOTE: The \"devtools\" optional permission is only supported by Firefox and not Chrome (Chromium issue 1143015).\n\nInteract with the window that Developer tools are attached to (inspected window). This includes obtaining the tab ID for the inspected page, evaluate the code in the context of the inspected window, reload the page, or obtain the list of resources within the page.\n\nObtain information about network requests associated with the window that the Developer Tools are attached to (the inspected window).\n\nCreate User Interface panels that will be displayed inside User Agent Developer Tools.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.devtools API.\n\nThis page was last modified on Aug 10, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/dns",
    "title": "dns - Mozilla | MDN",
    "h1": "dns",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nLoved by developers. Trusted by enterprises. Start your free 30 day trial.Mozilla ads\n\nLoved by developers. Trusted by enterprises. Start your free 30 day trial.\nMozilla ads\n\nEnables an extension to resolve domain names.\n\nTo use this API, an extension must request the \"dns\" permission in its manifest.json file.\n\nNote: DNS will fail with NS_ERROR_UNKNOWN_PROXY_HOST if proxying DNS over socks is enabled.\n\nResolves the given hostname to a DNS record.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/dom",
    "title": "dom - Mozilla | MDN",
    "h1": "dom",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nAccess special extension only DOM features.\n\nGets the open shadow root or the closed shadow root hosted by the specified element. If the shadow root isn't attached to the element, it will return null.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jul 19, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/downloads",
    "title": "downloads - Mozilla | MDN",
    "h1": "downloads",
    "paragraphs": "Unrivaled cloud expertise with DoiT. A global team of cloud experts with decades of experience on Google Cloud - all on call\nLearn more\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGitLab is the only place where enterprises build mission‑critical software.Mozilla ads\n\nGitLab is the only place where enterprises build mission‑critical software.\nMozilla ads\n\nEnables extensions to interact with the browser's download manager. You can use this API module to download files, cancel, pause, resume downloads, and show downloaded files in the file manager.\n\nTo use this API you need to have the \"downloads\" API permission specified in your manifest.json file.\n\nDefines options for what to do if the name of a downloaded file conflicts with an existing file.\n\nDefines a set of possible reasons why a download was interrupted.\n\nDefines a set of common warnings of possible dangers associated with downloadable files.\n\nDefines different states that a current download can be in.\n\nRepresents a downloaded file.\n\nRepresents the difference between two strings.\n\nRepresents the difference between two doubles.\n\nRepresents the difference between two booleans.\n\nRepresents the time a download took to complete.\n\nDefines a set of parameters that can be used to search the downloads manager for a specific set of downloads.\n\nDownloads a file, given its URL and other optional preferences.\n\nQueries the DownloadItems available in the browser's downloads manager, and returns those that match the specified search criteria.\n\nPauses a download.\n\nResumes a paused download.\n\nCancels a download.\n\nRetrieves an icon for the specified download.\n\nOpens the downloaded file with its associated application.\n\nOpens the platform's file manager application to show the downloaded file in its containing folder.\n\nOpens the platform's file manager application to show the default downloads folder.\n\nErases matching DownloadItems from the browser's download history, without deleting the downloaded files from disk.\n\nRemoves a downloaded file from disk, but not from the browser's download history.\n\nPrompts the user to accept or cancel a dangerous download.\n\nEnables or disables the gray shelf at the bottom of every window associated with the current browser profile. The shelf will be disabled as long as at least one extension has disabled it.\n\nFires with the DownloadItem object when a download begins.\n\nFires with the downloadId when a download is erased from history.\n\nWhen any of a DownloadItem's properties except bytesReceived changes, this event fires with the downloadId and an object containing the properties that changed.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.downloads API.\n\nThis page was last modified on Jan 16, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/events",
    "title": "events - Mozilla | MDN",
    "h1": "events",
    "paragraphs": "AI and large language models (LLMs) are revolutionizing the way businesses use and process data.\nGet Started free\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGitLab is the only place where enterprises build mission‑critical software.Mozilla ads\n\nGitLab is the only place where enterprises build mission‑critical software.\nMozilla ads\n\nCommon types used by APIs that dispatch events.\n\nDescription of a declarative rule for handling events.\n\nAn object which allows the addition and removal of listeners for a browser event.\n\nFilters URLs for various criteria. If any of the given criteria match, then the whole filter matches.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.events API. This documentation is derived from events.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/extension",
    "title": "extension - Mozilla | MDN",
    "h1": "extension",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nUtilities related to your extension. Get URLs to resources packages with your extension. Get the Window object for your extension's pages. Get the values for various settings.\n\nNote: The messaging APIs in this module are deprecated in favor of the equivalent APIs in the runtime module.\n\nThe type of extension view.\n\nSet for the lifetime of a callback if an asynchronous extension API has resulted in an error. If no error has occurred, lastError will be undefined.\n\nTrue for content scripts running inside incognito tabs, and for extension pages running inside an incognito process. (The latter only applies to extensions with 'split' incognito_behavior.)\n\nReturns the Window object for the background page running inside the current extension. Returns null if the extension has no background page.\n\nReturns an array of the JavaScript Window objects for each of the tabs running inside the current extension.\n\nConverts a relative path within an extension install directory to a fully-qualified URL.\n\nReturns an array of the Window objects for each of the pages running inside the current extension.\n\nRetrieves the state of the extension's access to Incognito-mode (as determined by the user-controlled 'Allowed in Incognito' checkbox).\n\nRetrieves the state of the extension's access to the file:// scheme (as determined by the user-controlled 'Allow access to File URLs' checkbox).\n\nSends a single request to other listeners within the extension.\n\nSets the value of the ap CGI parameter used in the extension's update URL. This value is ignored for extensions that are hosted in the browser vendor's store.\n\nFired when a request is sent from either an extension process or a content script.\n\nFired when a request is sent from another extension.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.extension API. This documentation is derived from extension.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/extensionTypes",
    "title": "extensionTypes - Mozilla | MDN",
    "h1": "extensionTypes",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nSome common types used in other WebExtension APIs.\n\nDetails about the format and quality of an image.\n\nThe format of an image.\n\nInjects details into a page.\n\nThe soonest that the JavaScript or CSS will be injected into the tab.\n\nIndicates whether a CSS stylesheet injected by tabs.insertCSS should be treated as an \"author\" or \"user\" stylesheet.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.extensionTypes API. This documentation is derived from extension_types.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/find",
    "title": "find - Mozilla | MDN",
    "h1": "find",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nFinds text in a web page, and highlights matches.\n\nTo use this API you need to have the \"find\" permission.\n\nFind text in a web page.\n\nHighlight the last set of matches found.\n\nRemove any highlighting.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/history",
    "title": "history - Mozilla | MDN",
    "h1": "history",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nUse the history API to interact with the browser history.\n\nIf you are looking for information about the browser session history, see the History interface.\n\nNote: Downloads are treated as HistoryItem objects. Therefore, events such as history.onVisited fire for downloads.\n\nBrowser history is a chronological record of pages the user has visited. The history API enables you to:\n\nHowever, the user may have visited a single page multiple times, so the API also has the concept of \"visits\". So you can also use this API to:\n\nTo use this API, an extension must request the \"history\" permission in its manifest.json file.\n\nDescribes how the browser navigated to a particular page.\n\nProvides information about a particular page in the browser history.\n\nDescribes a single visit to a page.\n\nSearches the browser history for history.HistoryItem objects matching the given criteria.\n\nRetrieves information about visits to a given page.\n\nAdds a record to the browser history of a visit to the given page.\n\nRemoves all visits to the given URL from the browser history.\n\nRemoves all visits to pages that the user made during the given time range.\n\nRemoves all visits from the browser history.\n\nFired when the title of a page visited by the user is recorded.\n\nFired each time the user visits a page, providing the history.HistoryItem data for that page.\n\nFired when a URL is removed completely from the browser history.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.history API. This documentation is derived from history.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/i18n",
    "title": "i18n - Mozilla | MDN",
    "h1": "i18n",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nFunctions to internationalize your extension. You can use these APIs to get localized strings from locale files packaged with your extension, find out the browser's current language, and find out the value of its Accept-Language header.\n\nSee the Internationalization page for a guide on using this API.\n\nA language tag such as \"en-US\" or \"fr\".\n\nGets the accept-languages of the browser. This is different from the locale used by the browser. To get the locale, use i18n.getUILanguage.\n\nGets the localized string for the specified message.\n\nGets the UI language of the browser. This is different from i18n.getAcceptLanguages which returns the preferred user languages.\n\nDetects the language of the provided text using the Compact Language Detector.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.i18n API. This documentation is derived from i18n.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/identity",
    "title": "identity - Mozilla | MDN",
    "h1": "identity",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nUse the identity API to get an OAuth2 authorization code or access token, which an extension can then use to access user data from a service that supports OAuth2 access (such as Google or Facebook).\n\nOAuth2 flows vary between service provider so, to use this API with a particular service provider, consult their documentation. For example:\n\nThe identity API provides the identity.launchWebAuthFlow() function. This authenticates the user with the service, if necessary, and asks the user to authorize the extension to access data, if necessary. The function completes with an access token or authorization code, depending on the provider.\n\nThe extension then completes the OAuth2 flow to get a validated access token, and uses the token in HTTPS requests to access the user's data according to the authorization the user gave.\n\nTo use this API, you must have the \"identity\" API permission.\n\nThere's some setup you must do before publishing your extension.\n\nThe redirect URL represents the end point of identity.launchWebAuthFlow(), in which the access token or authorization code is delivered to the extension. The browser extracts the result from the redirect URL without loading its response.\n\nYou get the redirect URL by calling identity.getRedirectURL(). This function derives a redirect URL from the add-on's ID. To simplify testing, set your add-on's ID explicitly using the browser_specific_settings key (otherwise, each time you temporarily install the add-on, you get a different redirect URL).\n\nidentity.getRedirectURL() returns a URL at a fixed domain name and a subdomain derived from the add-on's ID. Some OAuth servers (such as Google) only accept domains with a verified ownership as the redirect URL. As the dummy domain cannot be controlled by extension developers, the default domain cannot always be used.\n\nHowever, loopback addresses are an accepted alternative that do not require domain validation (based on RFC 8252, section 7.3). Starting from Firefox 86, a loopback address with the format http://127.0.0.1/mozoauth2/[subdomain of URL returned by identity.getRedirectURL()] is permitted as a value for the redirect URL.\n\nNote: Starting with Firefox 75, you must use the redirect URL returned by identity.getRedirectURL(). Earlier versions allowed you to supply any redirect URL.\n\nStarting with Firefox 86, the special loopback address described above can be used too.\n\nYou'll use the redirect URL in two places:\n\nBefore you use OAuth2 with a service provider, you must register the extension with the provider as an OAuth2 client.\n\nThis will tend to be specific to the service provider, but in general it means creating an entry for your extension on the provider's website. In this process you supply your redirect URL, and receive a client ID (and sometimes also a secret). You need to pass both of these into identity.launchWebAuthFlow().\n\nGets the redirect URL.\n\nLaunches WAF.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.identity API.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/idle",
    "title": "idle - Mozilla | MDN",
    "h1": "idle",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.Mozilla ads\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nMozilla ads\n\nFind out when the user's system is idle, locked, or active.\n\nTo use this API you need to have the \"idle\" permission.\n\nString describing the device's idle state.\n\nReturns \"locked\" if the system is locked, \"idle\" if the user has not generated any input for a specified number of seconds, or \"active\" otherwise.\n\nSets the interval used to determine when the system is in an idle state for idle.onStateChanged events.\n\nFired when the system changes state.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.idle API. This documentation is derived from idle.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/management",
    "title": "management - Mozilla | MDN",
    "h1": "management",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nGet information about installed add-ons.\n\nWith the management API you can:\n\nMost of these operations require the \"management\" API permission. Operations that don't provide access to other add-ons don't require this permission.\n\nAn object that contains information about an installed add-on.\n\nReturns information about all installed add-ons.\n\nReturns information about a particular add-on, given its ID.\n\nReturns information about the calling add-on.\n\nInstalls a particular theme, given its URL at addons.mozilla.org.\n\nUninstalls a particular add-on, given its ID.\n\nUninstalls the calling add-on.\n\nGet the set of permission warnings for a particular add-on, given its ID.\n\nGet the set of permission warnings that would be displayed for the given manifest string.\n\nEnable/disable a particular add-on, given its ID.\n\nFired when an add-on is installed.\n\nFired when an add-on is uninstalled.\n\nFired when an add-on is enabled.\n\nFired when an add-on is disabled.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.management API. This documentation is derived from management.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/menus",
    "title": "menus - Mozilla | MDN",
    "h1": "menus",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nAdd items to the browser's menu system.\n\nThis API is modeled on Chrome's \"contextMenus\" API, which enables Chrome extensions to add items to the browser's context menu. The browser.menus API adds a few features to Chrome's API.\n\nBefore Firefox 55 this API was also originally named contextMenus, and that name has been retained as an alias, so you can use contextMenus to write code that works in Firefox and also in other browsers.\n\nTo use this API you need to have the menus permission. You may also use the contextMenus alias instead of menus, but if you do, the APIs must be accessed as browser.contextMenus instead.\n\nExcept for menus.getTargetElement(), this API cannot be used from content scripts.\n\nTo create a menu item call the menus.create() method. You pass this method an object containing options for the item, including the item ID, item type, and the contexts in which it should be shown.\n\nIn a Firefox extension using non-persistent background pages (Event pages) or in any Chrome extension, you call menus.create from within a runtime.onInstalled listener. In a Firefox extension using persistent background pages, you make a top-level call. See menus.create() for more information.\n\nListen for clicks on your menu item by adding a listener to the menus.onClicked event. This listener will be passed a menus.OnClickData object containing the event's details.\n\nYou can create four different types of menu item, based on the value of the type property you supply in the options to create():\n\nIf you have created more than one context menu item or more than one tools menu item, then the items will be placed in a submenu. The submenu's parent will be labeled with the name of the extension. For example, here's an extension called \"Menu demo\" that's added two context menu items:\n\nIf you've specified icons for your extension using the \"icons\" manifest key, your menu item will display the specified icon next to its label. The browser will try to choose a 16x16 pixel icon for a normal display or a 32x32 pixel icon for a high-density display:\n\nOnly for items in a submenu, you can specify custom icons by passing the icons option to menus.create():\n\nHere's a context menu containing 4 items: a normal item, two radio items with separators on each side, and a checkbox. The radio items are given custom icons.\n\nYou could create a submenu like this using code like:\n\nThe different contexts a menu can appear in.\n\nThe type of menu item: \"normal\", \"checkbox\", \"radio\", \"separator\".\n\nInformation sent when a menu item is clicked.\n\nThe maximum number of top level extension items that can be added to a menu item whose ContextType is \"browser_action\" or \"page_action\".\n\nCreates a new menu item.\n\nReturns the element for a given info.targetElementId.\n\nHide all default Firefox menu items in favor of providing a custom context menu UI.\n\nUpdate a menu that's currently being displayed.\n\nRemoves a menu item.\n\nRemoves all menu items added by this extension.\n\nUpdates a previously created menu item.\n\nFired when a menu item is clicked.\n\nFired when the browser hides a menu.\n\nFired when the browser shows a menu.\n\nTip: you can click/tap on a cell for more information.\n\nNote:\n\nThis API is based on Chromium's chrome.contextMenus API. This documentation is derived from context_menus.json in the Chromium code.\n\nThis page was last modified on Oct 27, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/notifications",
    "title": "notifications - Mozilla | MDN",
    "h1": "notifications",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nDisplay notifications to the user, using the underlying operating system's notification mechanism. Because this API uses the operating system's notification mechanism, the details of how notifications appear and behave may differ according to the operating system and the user's settings.\n\nOn macOS, the notification looks something like this:\n\nOn Windows, the notification persists in the Action Center until the browser is closed. The notification looks something like this:\n\nTo use this API, you need to have the \"notifications\" permission.\n\nDefines the content of a notification.\n\nThe type of notification. For example, this defines whether the notification can contain an image.\n\nClear a specific notification, given its ID.\n\nCreate and display a new notification.\n\nGet all notifications.\n\nUpdate a notification.\n\nFired when the user clicked a button in the notification.\n\nFired when the user clicked the notification, but not on a button.\n\nFired when a notification closed, either by the system or because the user dismissed it.\n\nFired immediately after a notification has been shown.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.notifications API.\n\nThis page was last modified on Feb 28, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/omnibox",
    "title": "omnibox - Mozilla | MDN",
    "h1": "omnibox",
    "paragraphs": "Add video calling functionality to your website or app with Whereby’s powerful SDK.\nGet started\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nEnables extensions to implement customized behavior when the user types into the browser's address bar.\n\nWhen the user focuses the browser's address bar and starts typing, the browser displays a drop-down list containing suggested pages based on what they typed. This gives the user a quick way to access, for example, pages from their history or bookmarks.\n\nThe omnibox API provides the extension a way to customize the suggestions displayed in the drop-down, when the user enters a keyword defined by the extension. It works as follows:\n\nDescribes the recommended method to handle the selected suggestion: open in the current tab, open in a new foreground tab, or open in a new background tab.\n\nAn object representing a suggestion to add to the address bar drop-down.\n\nDefines the first suggestion displayed in the drop-down when the user enters your extension's keyword followed by a space.\n\nFired whenever the user deletes a suggestion.\n\nFired when the user focuses the address bar and types your extension's omnibox keyword, followed by a space.\n\nFired whenever the user's input changes after they have focused the address bar and typed your extension's keyword followed by a space.\n\nFired when the user accepts one of your extension's suggestions.\n\nFired when the user dismisses the address bar drop-down after they have focused the address bar and typed your extension's keyword followed by a space.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.omnibox API.\n\nThis page was last modified on Jul 18, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/pageAction",
    "title": "pageAction - Mozilla | MDN",
    "h1": "pageAction",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nThe API to control address bar button.\n\nYou can listen for clicks on the icon in a background script, or specify a popup that opens when the icon is clicked.\n\nIf you specify a popup, you define its contents and behavior using HTML, CSS, and JavaScript. JavaScript running in the popup gets access to all the same WebExtension APIs as your background scripts. Despite being named pageAction, the action code doesn't get access to web page content. To access web page DOM, you need to add a content script and interact with it.\n\nThe button also has a context menu, and you can add items to this menu with the menus API using the page_action menus.ContextType.\n\nYou can define most of a page action's properties declaratively using the page_action key in your manifest.json, and redefine them programmatically using this API.\n\nPage actions are for actions that are only relevant to particular pages (such as \"bookmark the current tab\"). If they are relevant to the browser as a whole (such as \"show all bookmarks\"), use a browser action instead.\n\nPixel data for an image.\n\nShows the page action for a given tab.\n\nHides the page action for a given tab.\n\nChecks whether the page action is shown or not.\n\nSets the page action's title. This is displayed in a tooltip over the page action.\n\nGets the page action's title.\n\nSets the page action's icon.\n\nSets the URL for the page action's popup.\n\nGets the URL for the page action's popup.\n\nOpens the page action's popup.\n\nFired when a page action icon is clicked. This event will not fire if the page action has a popup.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.pageAction API. This documentation is derived from page_action.json in the Chromium code.\n\nThis page was last modified on Jan 4, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/permissions",
    "title": "permissions - Mozilla | MDN",
    "h1": "permissions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nEnables extensions to request extra permissions at runtime, after they have been installed.\n\nExtensions need permissions to access more powerful WebExtension APIs. They can ask for permissions at install time, by including the permissions they need in the permissions manifest.json key. The main advantages of asking for permissions at install time are:\n\nIn most major browsers, users can see if their installed extensions request advanced permissions through the browser's extensions manager.\n\nWith the permissions API, an extension can ask for additional permissions at runtime. These permissions need to be listed in the optional_permissions manifest.json key. Note that some permissions are not allowed in optional_permissions. The main advantages of this are:\n\nTo use the permissions API, decide which permissions your extension can request at runtime, and list them in optional_permissions. After this, you can request any permissions that were included in optional_permissions. Requests may only be made in the handler for a user action (for example, a click handler).\n\nStarting with Firefox 84, users will be able to manage optional permissions of installed extensions from the Add-ons Manager. Extensions that use optional permissions should listen for browser.permissions.onAdded and browser.permissions.onRemoved API events to know when a user grants or revokes these permissions.\n\nFor advice on designing your request for runtime permissions, to maximize the likelihood that users grant them, see Request permissions at runtime.\n\nRepresents a set of permissions.\n\nDiscover an extension's given set of permissions.\n\nGet all the permissions this extension currently has.\n\nGive up a set of permissions.\n\nAsk for a set of permissions.\n\nFired when a new permission is granted.\n\nFired when a permission is removed.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.permissions API.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/pkcs11",
    "title": "pkcs11 - Mozilla | MDN",
    "h1": "pkcs11",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nThe pkcs11 API enables an extension to enumerate PKCS #11 security modules and to make them accessible to the browser as sources of keys and certificates.\n\nTo use this API you need to have the \"pkcs11\" permission.\n\nPerform the following steps:\n\nWarning: Be careful about using international characters as there is currently a bug in Firefox where international characters may cause problems.\n\nNote: Starting with Firefox 58, extensions can use this API to enumerate PKCS #11 modules and make them accessible to the browser as sources of keys and certificates.\n\nThere are two environmental prerequisites for using this API:\n\nMost probably, the user or device administrator would install the PKCS #11 module, and its installer would install the native manifest file at the same time.\n\nHowever, the module and manifest can't be installed as part of the extension's own installation process.\n\nFor details about the manifest file's contents and location, see Native manifests.\n\nFor each slot in a module, get its name and whether it contains a token.\n\nInstalls the named PKCS #11 module.\n\nChecks whether the named PKCS #11 module is installed.\n\nUninstalls the named PKCS #11 module.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/privacy",
    "title": "privacy - Mozilla | MDN",
    "h1": "privacy",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nAccess and modify various privacy-related browser settings.\n\nTo use the privacy API, you must have the \"privacy\" API permission.\n\nAccess and modify privacy settings relating to the network.\n\nAccess and modify privacy settings relating to the services provided by the browser or third parties.\n\nAccess and modify privacy settings relating to the behavior of websites.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.privacy API.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/proxy",
    "title": "proxy - Mozilla | MDN",
    "h1": "proxy",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nUse the proxy API to proxy web requests. You can use the proxy.onRequest event listener to intercept web requests, and return an object that describes whether and how to proxy them.\n\nThe advantage of the proxy.onRequest approach is that the code that implements your proxy policy runs in your extension's background script, so it gets full access to the WebExtension APIs available to your extension (including, for example, access to your extension's storage and networking APIs like dns).\n\nApart from this API, extensions can also use the browserSettings.proxyConfig property to configure global proxy settings.\n\nNote: Chrome, Edge, and Opera have an extension API also called \"proxy\" which is functionally similar to this API, in that extensions can use it to implement a proxying policy. However, the design of the Chrome API is completely different to this API. Because this API is incompatible with the Chrome proxy API, this API is only available through the browser namespace.\n\nTo use this API you need to have the \"proxy\" permission. Also, where you want to intercept requests, you also need host permission for the URLs of intercepted requests.\n\nThe \"proxy\" permission requires \"strict_min_version\" to be set to \"91.1.0\" or above. To use this permission, add or update the \"browser_specific_settings\" key in your manifest.json to specify a minimum Firefox version. See Securing the proxy API for Firefox add-ons for more information.\n\nNote: The browser can make speculative connections, where it determines that a request to a URI may be coming soon. This type of connection does not provide valid tab information, so request details such as tabId, frameId, parentFrameId, etc. are inaccurate. These connections have a webRequest.ResourceType of speculative.\n\nDescribes a proxy.\n\nContains information about a web request that the browser is about to make.\n\nGet and set proxy settings.\n\nFired when the system encounters an error running the PAC script or the onRequest listener.\n\nFired when a web request is about to be made, giving the extension an opportunity to proxy it.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jan 30, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime",
    "title": "runtime - Mozilla | MDN",
    "h1": "runtime",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nBootstrap success: your app on the monday.com app marketplace 🤝 180K+ customers. Explore now.Mozilla ads\n\nBootstrap success: your app on the monday.com app marketplace 🤝 180K+ customers. Explore now.\nMozilla ads\n\nThis module provides information about your extension and the environment it's running in.\n\nIt also provides messaging APIs enabling you to:\n\nRepresents one end of a connection between two specific contexts, which can be used to exchange messages.\n\nContains information about the sender of a message or connection request.\n\nIdentifies the browser's operating system.\n\nIdentifies the browser's processor architecture.\n\nContains information about the platform the browser is running on.\n\nResult of a call to runtime.requestUpdateCheck().\n\nThe reason that the runtime.onInstalled event is being dispatched.\n\nThe reason that the runtime.onRestartRequired event is being dispatched.\n\nThis value is set when an asynchronous function has an error condition that it needs to report to its caller.\n\nThe ID of the extension.\n\nRetrieves the Window object for the background page running inside the current extension.\n\nOpens your extension's options page.\n\nGets the frame ID of any window global or frame element.\n\nGets the complete manifest.json file, serialized as an object.\n\nGiven a relative path from the manifest.json to a resource packaged with the extension, returns a fully-qualified URL.\n\nSets a URL to be visited when the extension is uninstalled.\n\nReloads the extension.\n\nChecks for updates to this extension.\n\nEstablishes a connection from a content script to the main extension process, or from one extension to a different extension.\n\nConnects the extension to a native application on the user's computer.\n\nSends a single message to event listeners within your extension or a different extension. Similar to runtime.connect but only sends a single message, with an optional response.\n\nSends a single message from an extension to a native application.\n\nReturns information about the current platform.\n\nReturns information about the browser in which this extension is installed.\n\nReturns a DirectoryEntry for the package directory.\n\nFired when a profile that has this extension installed first starts up. This event is not fired when an incognito profile is started.\n\nFired when the extension is first installed, when the extension is updated to a new version, and when the browser is updated to a new version.\n\nSent to the event page just before the extension is unloaded. This gives the extension an opportunity to do some cleanup.\n\nSent after runtime.onSuspend to indicate that the extension won't be unloaded after all.\n\nFired when an update is available, but isn't installed immediately because the extension is currently running.\n\nFired when an update for the browser is available, but isn't installed immediately because a browser restart is required.\n\nFired when a connection is made with either an extension process or a content script.\n\nFired when a connection is made with another extension.\n\nFired when a message is sent from either an extension process or a content script.\n\nFired when a message is sent from another extension. Cannot be used in a content script.\n\nFired when the device needs to be restarted.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.runtime API. This documentation is derived from runtime.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/scripting",
    "title": "scripting - Mozilla | MDN",
    "h1": "scripting",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nInserts JavaScript and CSS into websites. This API offers two approaches to inserting content:\n\nNote: Chrome restricts this API to Manifest V3. Firefox and Safari support this API in Manifest V2 and V3.\n\nThis API requires the \"scripting\" permission and host permission for the target in the tab into which JavaScript or CSS is injected.\n\nAlternatively, you can get permission temporarily in the active tab and only in response to an explicit user action, by asking for the \"activeTab\" permission. However, the \"scripting\" permission is still required.\n\nSpecifies the IDs of scripts to retrieve with scripting.getRegisteredContentScripts() or to unregister with scripting.unregisterContentScripts().\n\nSpecifies the execution environment of a script injected with scripting.executeScript() or registered with scripting.registerContentScripts().\n\nDetails of an injection target.\n\nDetails of a content script to be registered or that is registered.\n\nInjects JavaScript code into a page.\n\nGets a list of registered content scripts.\n\nInjects CSS into a page.\n\nRegisters a content script for future page loads.\n\nRemoves CSS which was previously injected into a page by a scripting.insertCSS() call.\n\nUpdates one or more content scripts already registered.\n\nUnregisters one or more content scripts.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.scripting API.\n\nThis page was last modified on Mar 22, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/search",
    "title": "search - Mozilla | MDN",
    "h1": "search",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nUse the search API to retrieve the installed search engines and execute searches.\n\nTo use this API you need to have the \"search\" permission.\n\nWhen choosing between search.query() and search.search(), consider the following:\n\nRetrieve all search engines.\n\nSearch using the browser's default search engine.\n\nSearch using a specified search engine.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/sessions",
    "title": "sessions - Mozilla | MDN",
    "h1": "sessions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nUse the sessions API to list, and restore, tabs and windows that have been closed while the browser has been running.\n\nThe sessions.getRecentlyClosed() function returns an array of tabs.Tab and windows.Window objects, representing tabs and windows that have been closed since the browser was running, up to the maximum defined in sessions.MAX_SESSION_RESULTS.\n\nYou can then restore a window or tab using the sessions.restore() function. Restoring doesn't just reopen the tab: it also restores the tab's navigation history so the back/forward buttons will work.\n\nThis API also provides a group of functions that enable an extension to store additional state associated with a tab or a window. Then, if the tab or window is closed and subsequently restored, the extension can retrieve the state. For example, a tab grouping extension might use this to remember which group a tab is in, so as to restore it into the right group if the user restores the tab.\n\nTo use the sessions API you must have the \"sessions\" API permission.\n\nEnables you to restrict the number of Session objects returned by a call to sessions.getRecentlyClosed().\n\nRepresents a tab or window that the user has closed in the current browsing session.\n\nThe maximum number of sessions that will be returned by a call to sessions.getRecentlyClosed().\n\nRemoves a closed tab from the browser's list of recently closed tabs.\n\nRemoves a closed window from the browser's list of recently closed windows.\n\nReturns an array of Session objects, representing windows and tabs that were closed in the current browsing session (that is: the time since the browser was started).\n\nRestores a closed tab or window.\n\nStore a key/value pair associated with a given tab.\n\nRetrieve a previously stored value for a given tab, given its key.\n\nRemove a key/value pair from a given tab.\n\nStore a key/value pair associated with a given window.\n\nRetrieve a previously stored value for a given window, given its key.\n\nRemove a key/value pair from a given window.\n\nFired when a tab or window is closed.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.sessions API.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/sidebarAction",
    "title": "sidebarAction - Mozilla | MDN",
    "h1": "sidebarAction",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nGets and sets properties of an extension's sidebar.\n\nA sidebar is a pane that is displayed at the left-hand or right-hand side of the browser window, next to the web page. The browser provides a UI that enables the user to see the currently available sidebars and to select a sidebar to display. Using the sidebar_action manifest.json key, an extension can define its own sidebar. Using the sidebarAction API described here, an extension can get and set the sidebar's properties.\n\nThe sidebarAction API is closely modeled on the browserAction API.\n\nThe sidebarAction API is based on Opera's sidebarAction API. However, note that the following are not yet supported: setBadgeText(), getBadgeText(), setBadgeBackgroundColor(), getBadgeBackgroundColor(), onFocus, onBlur.\n\nPixel data for an image. Must be an ImageData object (for example, from a <canvas> element).\n\nCloses the sidebar.\n\nGets the sidebar's panel.\n\nGets the sidebar's title.\n\nChecks whether the sidebar is open or not.\n\nOpens the sidebar.\n\nSets the sidebar's icon.\n\nSets the sidebar's panel.\n\nSets the sidebar's title. This will be displayed in any UI provided by the browser to list sidebars, such as a menu.\n\nToggles the visibility of the sidebar.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Opera's chrome.sidebarAction API.\n\nThis page was last modified on Jul 10, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage",
    "title": "storage - Mozilla | MDN",
    "h1": "storage",
    "paragraphs": "Add video calling functionality to your website or app with Whereby’s powerful SDK.\nGet started\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nEnables extensions to store and retrieve data, and listen for changes to stored items.\n\nThe storage system is based on the Web Storage API, with a few differences. Among other differences, these include:\n\nTo use this API you need to include the \"storage\" permission in your manifest.json file.\n\nEach extension has its own storage area, which can be split into different types of storage.\n\nAlthough this API is similar to Window.localStorage it is recommended that you don't use Window.localStorage in the extension code to store extension-related data. Firefox will clear data stored by extensions using the localStorage API in various scenarios where users clear their browsing history and data for privacy reasons, while data saved using the storage.local API will be correctly persisted in these scenarios.\n\nYou can examine the stored data under the Extension Storage item in the Storage Inspector tab of the developer toolbox, accessible from about:debugging.\n\nNote: The storage area is not encrypted and shouldn't be used for storing confidential user information.\n\nAn object representing a storage area.\n\nAn object representing a change to a storage area.\n\nstorage has four properties, which represent the different types of available storage area.\n\nRepresents the local storage area. Items in local storage are local to the machine the extension was installed on.\n\nRepresents the managed storage area. Items in managed storage are set by the domain administrator and are read-only for the extension. Trying to modify this namespace results in an error.\n\nRepresents the session storage area. Items in session storage are stored in memory and are not persisted to disk.\n\nRepresents the sync storage area. Items in sync storage are synced by the browser, and are available across all instances of that browser that the user is logged into, across different devices.\n\nFired when one or more items change in any of the storage areas.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.storage API. This documentation is derived from storage.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs",
    "title": "tabs - Mozilla | MDN",
    "h1": "tabs",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nInteract with the browser's tab system.\n\nNote: When using Manifest V3 or higher, the methods to execute scripts, insert CSS, and remove CSS are provided by the scripting API through the scripting.executeScript(), scripting.insertCSS() and scripting.removeCSS() methods.\n\nYou can use this API to get a list of opened tabs, filtered by various criteria, and to open, update, move, reload, and remove tabs. You can't directly access the content hosted by tabs using this API, but you can insert JavaScript and CSS into tabs using the tabs.executeScript() or tabs.insertCSS() APIs.\n\nYou can use most of this API without any special permission. However:\n\nAlternatively, you can get these permissions temporarily, only for the currently active tab and only in response to an explicit user action, by asking for the \"activeTab\" permission.\n\nMany tab operations use a Tab id. Tab ids are guaranteed to be unique to a single tab only within a browser session. If the browser is restarted, then it can and will reuse tab ids. To associate information with a tab across browser restarts, use sessions.setTabValue().\n\nSpecifies the reason a tab was muted or unmuted.\n\nThis object contains a boolean indicating whether the tab is muted, and the reason for the last state change.\n\nUsed to control how a tab is rendered as a PDF by the tabs.saveAsPDF() method.\n\nThis type contains information about a tab.\n\nIndicates whether the tab has finished loading.\n\nThe type of window that hosts this tab.\n\nDefines whether zoom changes are handled by the browser, by the extension, or are disabled.\n\nDefines whether zoom changes will persist for the page's origin, or only take effect in this tab.\n\nDefines zoom settings mode, scope, and default zoom factor.\n\nA special ID value given to tabs that are not browser tabs (for example, tabs in devtools windows).\n\nCreates a data URL encoding an image of the visible area of the given tab.\n\nCreates a data URL encoding an image of the visible area of the currently active tab in the specified window.\n\nSets up a messaging connection between the extension's background scripts (or other privileged scripts, such as popup scripts or options page scripts) and any content scripts running in the specified tab.\n\nCreates a new tab.\n\nDetects the primary language of the content in a tab.\n\nDiscards one or more tabs.\n\nDuplicates a tab.\n\nInjects JavaScript code into a page.\n\nRetrieves details about the specified tab.\n\nGets details about all tabs in the specified window.\n\nGets information about the tab that this script is running in, as a tabs.Tab object.\n\nGets the tab that is selected in the specified window. Deprecated: use tabs.query({active: true}) instead.\n\nGets the current zoom factor of the specified tab.\n\nGets the current zoom settings for the specified tab.\n\nGo forward to the next page, if one is available.\n\nGo back to the previous page, if one is available.\n\nHides one or more tabs.\n\nHighlights one or more tabs.\n\nInjects CSS into a page.\n\nMoves one or more tabs to a new position in the same window or to a different window.\n\nModifies the succession relationship for a group of tabs.\n\nPrints the contents of the active tab.\n\nOpens print preview for the active tab.\n\nGets all tabs that have the specified properties, or all tabs if no properties are specified.\n\nReload a tab, optionally bypassing the local web cache.\n\nCloses one or more tabs.\n\nRemoves from a page CSS which was previously injected by calling tabs.insertCSS().\n\nSaves the current page as a PDF.\n\nSends a single message to the content script(s) in the specified tab.\n\nSends a single request to the content script(s) in the specified tab. Deprecated: use tabs.sendMessage() instead.\n\nZooms the specified tab.\n\nSets the zoom settings for the specified tab.\n\nShows one or more tabs that have been hidden.\n\nToggles Reader mode for the specified tab.\n\nNavigate the tab to a new URL, or modify other properties of the tab.\n\nPrepare the tab to make a potential following switch faster.\n\nFires when the active tab in a window changes. Note that the tab's URL may not be set at the time this event fired.\n\nFires when the selected tab in a window changes. Deprecated: use tabs.onActivated instead.\n\nFired when a tab is attached to a window, for example because it was moved between windows.\n\nFired when a tab is created. Note that the tab's URL may not be set at the time this event fired.\n\nFired when a tab is detached from a window, for example because it is being moved between windows.\n\nFired when the highlighted or selected tabs in a window change. Deprecated: use tabs.onHighlighted instead.\n\nFired when the highlighted or selected tabs in a window change.\n\nFired when a tab is moved within a window.\n\nFired when a tab is closed.\n\nFired when a tab is replaced with another tab due to prerendering.\n\nFires when the selected tab in a window changes. Deprecated: use tabs.onActivated instead.\n\nFired when a tab is updated.\n\nFired when a tab is zoomed.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.tabs API. This documentation is derived from tabs.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/theme",
    "title": "theme - Mozilla | MDN",
    "h1": "theme",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nEnables browser extensions to get details of the browser's theme and update the theme.\n\nYou can use this API to include a theme in your extension, which you define as a theme.Theme and apply using theme.update(). You cannot include a static theme in your extension, defined with the \"theme\" manifest key. The \"theme\" manifest key is used to define static themes only. See Themes on Extension Workshop for more information.\n\nRepresents the content of a theme.\n\nGets the current browser theme.\n\nUpdates the browser's theme.\n\nRemoves any theme updates made in a call to theme.update().\n\nFired when the browser theme changes.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Oct 13, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/topSites",
    "title": "topSites - Mozilla | MDN",
    "h1": "topSites",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nUse the topSites API to get an array containing pages that the user has visited frequently.\n\nBrowsers maintain this to help the user get back to these places easily. For example, Firefox by default provides a list of the most-visited pages in the \"New Tab\" page.\n\nTo use the topSites API you must have the \"topSites\" API permission.\n\nAn object containing the title and URL of a website.\n\nGets an array containing all the sites listed in the browser's \"New Tab\" page. Note that the number of sites returned here is browser-specific, and the particular sites returned will probably be specific to the user, based on their browsing history.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.topSites API.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/types",
    "title": "types - Mozilla | MDN",
    "h1": "types",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nLoved by developers. Trusted by enterprises. Start your free 30 day trial.Mozilla ads\n\nLoved by developers. Trusted by enterprises. Start your free 30 day trial.\nMozilla ads\n\nDefines the BrowserSetting type, which is used to represent a browser setting.\n\nRepresents a browser setting.\n\nNote:\n\nThis API is based on Chromium's chrome.types API.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/userScripts",
    "title": "userScripts - Mozilla | MDN",
    "h1": "userScripts",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nUse this API to register user scripts, third-party scripts designed to manipulate webpages or provide new features. Registering a user script instructs the browser to attach the script to pages that match the URL patterns specified during registration.\n\nNote: When using Manifest V3 or higher, use scripting.registerContentScripts() to register scripts.\n\nThis API offers similar capabilities to contentScripts but with features suited to handling third-party scripts:\n\nWarning: This API requires the presence of the user_scripts key in the manifest.json, even if no API script is specified. For example. user_scripts: {}.\n\nTo use the API, call register() passing in an object defining the scripts to register. The method returns a Promise that is resolved with a RegisteredUserScript object.\n\nNote: User scripts are unregistered when the related extension page (from which the user scripts were registered) is unloaded, so you should register a user script from an extension page that persists at least as long as you want the user scripts to stay registered.\n\nThe object returned by the register() method. It represents the registered user scripts and is used to deregister the user scripts.\n\nRegisters user scripts.\n\nAn event available to the API script, registered in\"user_scripts\", that execute before a user script executes. Use it to trigger the export of the additional APIs provided by the API script, so they are available to the user script.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation",
    "title": "webNavigation - Mozilla | MDN",
    "h1": "webNavigation",
    "paragraphs": "See what your team could do with The DevSecOps Platform. Take GitLab for a spin.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nAdd event listeners for the various stages of a navigation. A navigation consists of a frame in the browser transitioning from one URL to another, usually (but not always) in response to a user action like clicking a link or entering a URL in the location bar.\n\nCompared with the webRequest API: navigations usually result in the browser making web requests, but the webRequest API is concerned with the lower-level view from the HTTP layer, while the webNavigation API is more concerned with the view from the browser UI itself.\n\nEach event corresponds to a particular stage in the navigation. The sequence of events is like this:\n\nEach navigation is a URL transition in a particular browser frame. The browser frame is identified by a tab ID and a frame ID. The frame may be the top-level browsing context in the tab, or may be a nested browsing context implemented as an iframe.\n\nEach event's addListener() call accepts an optional filter parameter. The filter will specify one or more URL patterns, and the event will then only be fired for navigations in which the target URL matches one of the patterns.\n\nThe onCommitted event listener is passed two additional properties: a TransitionType indicating the cause of the navigation (for example, because the user clicked a link, or because the user selected a bookmark), and a TransitionQualifier providing further information about the navigation.\n\nTo use this API you need to have the \"webNavigation\" permission.\n\nCause of the navigation: for example, the user clicked a link, or typed an address, or clicked a bookmark.\n\nExtra information about a transition.\n\nRetrieves information about a particular frame. A frame may be the top-level frame in a tab or a nested iframe, and is uniquely identified by a tab ID and a frame ID.\n\nGiven a tab ID, retrieves information about all the frames it contains.\n\nFired when the browser is about to start a navigation event.\n\nFired when a navigation is committed. At least part of the new document has been received from the server and the browser has decided to switch to the new document.\n\nFired when the DOMContentLoaded event is fired in the page.\n\nFired when a document, including the resources it refers to, is completely loaded and initialized. This is equivalent to the DOM load event.\n\nFired when an error occurs and the navigation is aborted. This can happen if either a network error occurred, or the user aborted the navigation.\n\nFired when a new window, or a new tab in an existing window, is created to host a navigation: for example, if the user opens a link in a new tab.\n\nFired if the fragment identifier for a page is changed.\n\nFired when the contents of the tab is replaced by a different (usually previously pre-rendered) tab.\n\nFired when the page used the history API (2011) to update the URL displayed in the browser's location bar.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.webNavigation API. This documentation is derived from web_navigation.json in the Chromium code.\n\nThis page was last modified on Aug 3, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/webRequest",
    "title": "webRequest - Mozilla | MDN",
    "h1": "webRequest",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nSee what your team could do with The DevSecOps Platform. Take GitLab for a spin.Mozilla ads\n\nSee what your team could do with The DevSecOps Platform. Take GitLab for a spin.\nMozilla ads\n\nAdd event listeners for the various stages of making an HTTP request, which includes websocket requests on ws:// and wss://. The event listener receives detailed information about the request and can modify or cancel the request.\n\nEach event is fired at a particular stage of the request. The typical sequence of events is like this:\n\nonErrorOccurred can fire at any time during the request. Also, note that sometimes the sequence of events may differ from this. For example, in Firefox, on an HSTS upgrade, the onBeforeRedirect event is triggered immediately after onBeforeRequest. onErrorOccurred is also fired if Firefox Tracking Protection blocks a request.\n\nAll events – except onErrorOccurred – can take three arguments to addListener():\n\nThe listener function is passed a details object containing information about the request. This includes a request ID, which is provided to enable an add-on to correlate events associated with a single request. It is unique within a browser session and the add-on's context. It stays the same throughout a request, even across redirections and authentication exchanges.\n\nTo use the webRequest API for a given host, an extension must have the \"webRequest\" API permission and the host permission for that host. To use the \"blocking\" feature, the extension must also have the \"webRequestBlocking\" API permission.\n\nTo intercept resources loaded by a page (such as images, scripts, or stylesheets), the extension must have the host permission for the resource as well as for the main page requesting the resource. For example, if a page at https://developer.mozilla.org loads an image from https://mdn.mozillademos.org, then an extension must have both host permissions if it is to intercept the image request.\n\nOn some of these events, you can modify the request. Specifically, you can:\n\nTo do this, you need to pass an option with the value \"blocking\" in the extraInfoSpec argument to the event's addListener(). This makes the listener synchronous.\n\nIn the listener, you can then return a BlockingResponse object, which indicates the modification you need to make: for example, the modified request header you want to send.\n\nWhen a listener is registered with the \"blocking\" option and is registered during the extension startup, if a request is made during the browser startup that matches the listener the extension starts early. This enables the extension to observe the request at browser startup. If you don't take these steps, requests made at startup could be missed.\n\nThe browser can make speculative connections, where it determines that a request to a URI may be coming soon. This type of connection does not provide valid tab information, so request details such as tabId, frameId, parentFrameId, etc. are inaccurate. These connections have a webRequest.ResourceType of speculative.\n\nIn the onHeadersReceived listener you can access the TLS properties of a request by calling getSecurityInfo(). To do this you must also pass \"blocking\" in the extraInfoSpec argument to the event's addListener().\n\nYou can read details of the TLS handshake, but can't modify them or override the browser's trust decisions.\n\nTo modify the HTTP response bodies for a request, call webRequest.filterResponseData, passing it the ID of the request. This returns a webRequest.StreamFilter object that you can use to examine and modify the data as it is received by the browser.\n\nTo do this, you must have the \"webRequestBlocking\" API permission as well as the \"webRequest\" API permission and the host permission for the relevant host.\n\nAn object of this type is returned by event listeners that have set \"blocking\" in their extraInfoSpec argument. By setting particular properties in BlockingResponse, the listener can modify network requests.\n\nAn object describing a single X.509 certificate.\n\nAn array of HTTP headers. Each header is represented as an object with two properties: name and either value or binaryValue.\n\nAn object describing filters to apply to webRequest events.\n\nRepresents a particular kind of resource fetched in a web request.\n\nAn object describing the security properties of a particular web request.\n\nAn object that can be used to monitor and modify HTTP responses while they are being received.\n\nContains data uploaded in a URL request.\n\nThe maximum number of times that handlerBehaviorChanged() can be called in a 10 minute period.\n\nThis method can be used to ensure that event listeners are applied correctly when pages are in the browser's in-memory cache.\n\nReturns a webRequest.StreamFilter object for a given request.\n\nGets detailed information about the TLS connection associated with a given request.\n\nFired when a request is about to be made, and before headers are available. This is a good place to listen if you want to cancel or redirect the request.\n\nFired before sending any HTTP data, but after HTTP headers are available. This is a good place to listen if you want to modify HTTP request headers.\n\nFired just before sending headers. If your add-on or some other add-on modified headers in onBeforeSendHeaders, you'll see the modified version here.\n\nFired when the HTTP response headers associated with a request have been received. You can use this event to modify HTTP response headers.\n\nFired when the server asks the client to provide authentication credentials. The listener can do nothing, cancel the request, or supply authentication credentials.\n\nFired when the first byte of the response body is received. For HTTP requests, this means that the status line and response headers are available.\n\nFired when a server-initiated redirect is about to occur.\n\nFired when a request is completed.\n\nFired when an error occurs.\n\nTip: you can click/tap on a cell for more information.\n\nAdditional notes on Chrome incompatibilities.\n\nNote: This API is based on Chromium's chrome.webRequest API. This documentation is derived from web_request.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/windows",
    "title": "windows - Mozilla | MDN",
    "h1": "windows",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nInteract with browser windows. You can use this API to get information about open windows and to open, modify, and close windows. You can also listen for window open, close, and activate events.\n\nThe type of browser window this is.\n\nThe state of this browser window.\n\nContains information about a browser window.\n\nSpecifies the type of browser window to create.\n\nThe windowId value that represents the absence of a browser window.\n\nA value that can be used in place of a windowId in some APIs to represent the current window.\n\nGets details about a window, given its ID.\n\nGets the current window.\n\nGets the window that was most recently focused — typically the window 'on top'.\n\nGets all windows.\n\nCreates a new window.\n\nUpdates the properties of a window. Use this to move, resize, and (un)focus a window, etc.\n\nCloses a window, and all its tabs.\n\nFired when a window is created.\n\nFired when a window is closed.\n\nFired when the currently focused window changes.\n\nTip: you can click/tap on a cell for more information.\n\nNote: This API is based on Chromium's chrome.windows API. This documentation is derived from windows.json in the Chromium code.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json",
    "title": "manifest.json - Mozilla | MDN",
    "h1": "manifest.json",
    "paragraphs": "GitLab is the only place where enterprises build mission‑critical software.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nNote: This article describes manifest.json for web extensions. If you are looking for information about the manifest.json in PWAs, check out the Web App Manifest article.\n\nThe manifest.json file is the only file that every extension using WebExtension APIs must contain.\n\nUsing manifest.json, you specify basic metadata about your extension such as the name and version, and can also specify aspects of your extension's functionality (such as background scripts, content scripts, and browser actions).\n\nIt is a JSON-formatted file, with one exception: it is allowed to contain \"//\"-style comments.\n\nThese are the manifest.json keys; these keys are available in Manifest V2 and above unless otherwise noted:\n\nYou can access your extension's manifest from the extension's JavaScript using the runtime.getManifest() function:\n\nThe block below shows the basic syntax for some common manifest keys.\n\nNote: This is not intended to be used as a copy-paste-ready example. Selecting the keys you'll need depends on the extension you are developing.\n\nFor complete example extensions, see Example extensions.\n\nTip: you can click/tap on a cell for more information.\n\nFor a full overview of all manifest keys and their sub-keys, see the full manifest.json browser compatibility table.\n\npermissions JavaScript API\n\nThis page was last modified on Jul 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/action",
    "title": "action - Mozilla | MDN",
    "h1": "action",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nAn action is a button that your extension adds to the browser's toolbar. The button has an icon, and may optionally have a popup whose content is specified using HTML, CSS, and JavaScript.\n\nThis key replaces browser_action in Manifest V3 extensions.\n\nIf you supply a popup, then the popup is opened when the user clicks the button, and your JavaScript running in the popup can handle the user's interaction with it. If you don't supply a popup, then a click event is dispatched to your extension's background scripts when the user clicks the button.\n\nYou can also create and manipulate actions programmatically using the action .\n\nThe action key is an object that may have any of these properties, all optional:\n\nOptional, defaulting to false.\n\nDo not set browser_style to true: its support in Manifest V3 was removed in Firefox 118. See Manifest V3 migration for browser_style.\n\nDefines the part of the browser in which the button is initially placed. This is a string that may take one of four values:\n\nThis property is only supported in Firefox.\n\nThis property is optional, and defaults to \"menupanel\".\n\nFirefox remembers the default_area setting for an extension, even if that extension is uninstalled and subsequently reinstalled. To force the browser to acknowledge a new value for default_area, the id of the extension must be changed.\n\nAn extension can't change the location of the button after it has been installed, but the user may be able to move the button using the browser's built-in UI customization mechanism.\n\nUse this to specify one or more icons for the action. The icon is shown in the browser toolbar by default.\n\nIcons are specified as URLs relative to the manifest.json file itself.\n\nYou can specify a single icon file by supplying a string here:\n\nTo specify multiple icons in different sizes, specify an object here. The name of each property is the icon's height in pixels, and must be convertible to an integer. The value is the URL. For example:\n\nYou cannot specify multiple icons of the same sizes.\n\nSee Choosing icon sizes for more guidance on this.\n\nThe path to an HTML file containing the specification of the popup.\n\nThe HTML file may include CSS and JavaScript files using <link> and <script> elements, just like a normal web page. However, <script> must have src attribute to load a file. Don't use <script> with embedded code, because you'll get a confusing Content Violation Policy error.\n\nUnlike a normal web page, JavaScript running in the popup can access all the WebExtension APIs (subject, of course, to the extension having the appropriate permissions).\n\nThis is a localizable property.\n\nTooltip for the button, displayed when the user moves their mouse over it. If the button is added to the browser's menu panel, this is also shown under the app icon.\n\nThis is a localizable property.\n\nThis property enables you to specify different icons for themes depending on whether Firefox detects that the theme uses dark or light text.\n\nIf this property is present, it's an array containing at least one ThemeIcons object. A ThemeIcons object contains three mandatory properties:\n\nIcons are specified as URLs relative to the manifest.json file.\n\nYou should supply 16x16 and 32x32 (for retina display) ThemeIcons.\n\nThe action's icon may need to be displayed in different sizes in different contexts:\n\nIf the browser can't find an icon of the right size in a given situation, it will pick the best match and scale it. Scaling may make the icon appear blurry, so it's important to choose icon sizes carefully.\n\nThere are two main approaches to this. You can supply a single icon as an SVG file, and it will be scaled correctly:\n\nAlternatively, you can supply several icons in different sizes, and the browser will pick the best match.\n\nIn Firefox:\n\nSo you can specify icons that match exactly, on both normal and Retina displays, by supplying three icon files, and specifying them like this:\n\nIf Firefox can't find an exact match for the size it wants, then it will pick the smallest icon specified that's bigger than the ideal size. If all icons are smaller than the ideal size, it will pick the biggest icon specified.\n\nAn action with just an icon, specified in 2 sizes. The extension's background scripts can receive click events when the user clicks the icon using code like this:\n\nAn action with an icon, a title, and a popup. The popup is shown when the user clicks the button.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Aug 27, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/author",
    "title": "author - Mozilla | MDN",
    "h1": "author",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nThe extension's author, intended for display in the browser's user interface. If the developer key is supplied and it contains the \"name\" property, it will override the author key. There's no way to specify multiple authors.\n\nThis is a localizable property.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/background",
    "title": "background - Mozilla | MDN",
    "h1": "background",
    "paragraphs": "Monetize your app on the monday.com app marketplace 🤝 180K+ customers in hundreds of industries.\nStart building today\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nUse the background key to include one or more background scripts, a background page, or a Service worker in your extension.\n\nBackground scripts are the place to put code that needs to maintain a long-term state or perform long-term operations independently of the lifetime of any particular web pages or browser windows.\n\nBackground scripts are loaded as soon as the extension is loaded and stay loaded until the extension is disabled or uninstalled unless persistent is specified as false. You can use any WebExtension APIs in the script if you have requested the necessary permissions.\n\nSee Background scripts for some more details.\n\nThe background key is an object that must have one of these properties (for more information on how these properties are supported, see Browser support):\n\nIf you need specific content in the background page, you can define a page using the page property. This is a String representing a path relative to the manifest.json file to an HTML document included in your extension bundle.\n\nIf you use this property, you can not specify background scripts using scripts, but you can include scripts from the page, just like a normal web page.\n\nAn Array of Strings, each of which is a path to a JavaScript source. The path is relative to the manifest.json file itself. These are the scripts that are executed in the extension's background page.\n\nThe scripts share the same window global context.\n\nThe scripts are loaded in the order they appear in the array.\n\nIf you specify scripts, an empty page is created where your scripts run.\n\nNote: If you want to fetch a script from a remote location with the <script> tag (e.g., <script src = \"https://code.jquery.com/jquery-3.6.0.min.js\">), you have to change the content_security_policy key in the manifest.json file of your extension.\n\nSpecify a JavaScript file as the extension service worker. A service worker is a background script that acts as the extension's main event handler.\n\nThe background key can also contain this optional property:\n\nA Boolean value.\n\nIf omitted, this property defaults to true in Manifest V2 and false in Manifest V3. Setting to true in Manifest V3 results in an error.\n\nA String value.\n\nDetermines whether the scripts specified in \"scripts\" are loaded as ES modules.\n\nIf omitted, this property defaults to classic.\n\nSupport for the scripts, page, and service_worker properties varies between browsers like this:\n\nTo illustrate, this is a simple example of a cross-browser extension that supports scripts and service_worker. The example has this manifest.json file:\n\nAnd, background.js contains:\n\nWhen the extension is executed, this happens:\n\nLoad two background scripts.\n\nLoad a custom background page.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Nov 24, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/browser_action",
    "title": "browser_action - Mozilla | MDN",
    "h1": "browser_action",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nA browser action is a button that your extension adds to the browser's toolbar. The button has an icon, and may optionally have a popup whose content is specified using HTML, CSS, and JavaScript.\n\nThis key is replaced by action in Manifest V3 extensions.\n\nIf you supply a popup, then the popup is opened when the user clicks the button, and your JavaScript running in the popup can handle the user's interaction with it. If you don't supply a popup, then a click event is dispatched to your extension's background scripts when the user clicks the button.\n\nYou can also create and manipulate browser actions programmatically using the browserAction API.\n\nThe browser_action key is an object that may have any of the following properties, all optional:\n\nOptional, defaulting to false.\n\nDo not set browser_style to true: it isn't supported in Manifest V3, starting with Firefox 118. See Manifest V3 migration for browser_style.\n\nIn Firefox, the stylesheet can be seen at chrome://browser/content/extension.css or chrome://browser/content/extension-mac.css on macOS. When setting dimensions, be aware that this stylesheet sets box-sizing: border-box (see box-sizing).\n\nBrowser styles describes the classes you can apply to elements in the popup to get particular styles.\n\nThe latest-download example extension uses browser_style in its popup.\n\nNote: Setting browser_style to true prevents users from selecting text in an extension's popup or sidebar content. This is normal behavior. You can't select parts of the UI in the browser. However, you can work around this limitation to allow your users to select text in two ways:\n\nDefines the part of the browser in which the button is initially placed. This is a string that may take one of four values:\n\nThis property is only supported in Firefox.\n\nThis property is optional, and defaults to \"menupanel\".\n\nFirefox remembers the default_area setting for an extension, even if that extension is uninstalled and subsequently reinstalled. To force the browser to acknowledge a new value for default_area, the id of the extension must be changed.\n\nAn extension can't change the location of the button after it has been installed, but the user may be able to move the button using the browser's built-in UI customization mechanism.\n\nUse this to specify one or more icons for the browser action. The icon is shown in the browser toolbar by default.\n\nIcons are specified as URLs relative to the manifest.json file itself.\n\nYou can specify a single icon file by supplying a string here:\n\nTo specify multiple icons in different sizes, specify an object here. The name of each property is the icon's height in pixels, and must be convertible to an integer. The value is the URL. For example:\n\nYou cannot specify multiple icons of the same sizes.\n\nSee Choosing icon sizes for more guidance on this.\n\nThe path to an HTML file containing the specification of the popup.\n\nThe HTML file may include CSS and JavaScript files using <link> and <script> elements, just like a normal web page. However, <script> must have src attribute to load a file. Don't use <script> with embedded code, because you'll get a confusing Content Violation Policy error.\n\nUnlike a normal web page, JavaScript running in the popup can access all the WebExtension APIs (subject, of course, to the extension having the appropriate permissions).\n\nThis is a localizable property.\n\nTooltip for the button, displayed when the user moves their mouse over it. If the button is added to the browser's menu panel, this is also shown under the app icon.\n\nThis is a localizable property.\n\nThis property enables you to specify different icons for themes depending on whether Firefox detects that the theme uses dark or light text.\n\nIf this property is present, it's an array containing at least one ThemeIcons object. A ThemeIcons object contains three mandatory properties:\n\nIcons are specified as URLs relative to the manifest.json file.\n\nYou should supply 16x16 and 32x32 (for retina display) ThemeIcons.\n\nThe browser action's icon may need to be displayed in different sizes in different contexts:\n\nIf the browser can't find an icon of the right size in a given situation, it will pick the best match and scale it. Scaling may make the icon appear blurry, so it's important to choose icon sizes carefully.\n\nThere are two main approaches to this. You can supply a single icon as an SVG file, and it will be scaled correctly:\n\nAlternatively, you can supply several icons in different sizes, and the browser will pick the best match.\n\nIn Firefox:\n\nSo you can specify icons that match exactly, on both normal and Retina displays, by supplying three icon files, and specifying them like this:\n\nIf Firefox can't find an exact match for the size it wants, then it will pick the smallest icon specified that's bigger than the ideal size. If all icons are smaller than the ideal size, it will pick the biggest icon specified.\n\nA browser action with just an icon, specified in 2 different sizes. The extension's background scripts can receive click events when the user clicks the icon using code like this:\n\nA browser action with an icon, a title, and a popup. The popup will be shown when the user clicks the button.\n\nFor a simple, but complete, extension that uses a browser action, see the walkthrough tutorial.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Dec 13, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/browser_specific_settings",
    "title": "browser_specific_settings - Mozilla | MDN",
    "h1": "browser_specific_settings",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGitLab is the only place where enterprises build mission‑critical software.Mozilla ads\n\nGitLab is the only place where enterprises build mission‑critical software.\nMozilla ads\n\nThe browser_specific_settings key contains keys that are specific to a particular host application.\n\nFirefox stores browser-specific settings in these sub-keys:\n\nThe gecko subkey supports these properties:\n\nThe extension ID. When provided, this property must contain 80 characters or less. See Extensions and the Add-on ID to determine when to specify the ID.\n\nMinimum version of Gecko to support. If the Firefox version on which the extension is being installed or run is below this version, the extension is not installed or not run. If not provided, all versions earlier than strict_max_version are supported. \"*\" is not valid in this field.\n\nMaximum version of Gecko to support. If the Firefox version on which the extension is being installed or run is above this version, the extension is not installed or not run. Defaults to \"*\", which disables checking for a maximum version.\n\nA link to an extension update manifest. Note that the link must begin with \"https\". This key is for managing extension updates yourself (i.e., not through AMO).\n\nThe gecko_android subkey supports these properties:\n\nMinimum version of Gecko to support on Android. If the Firefox for Android version on which the extension is being installed or run is below this version, the extension is not installed or not run. If not provided, defaults to the version determined by gecko.strict_min_version. \"*\" is not valid in this field.\n\nMaximum version of Gecko to support on Android. If the Firefox version on which the extension is being installed or run is above this version, the extension is not installed or not run. Defaults to the version determined by gecko.strict_max_version.\n\nSee the list of valid Gecko versions.\n\nThe extension ID must be one of the following:\n\nThe latter format is easier to generate and manipulate. Be aware that using a real email address here may attract spam.\n\nFor example:\n\nSafari stores its browser-specific settings in the safari subkey, which has these properties:\n\nMinimum version of Safari to support.\n\nMaximum version of Safari to support.\n\nExample with all possible keys. Note that most extensions omit strict_max_version and update_url.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Apr 25, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/chrome_settings_overrides",
    "title": "chrome_settings_overrides - Mozilla | MDN",
    "h1": "chrome_settings_overrides",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nUse the chrome_settings_overrides key to override the browser's home page and add a new search engine.\n\nThe chrome_settings_overrides key is an object that may have the following properties:\n\nDefines the page to be used as the browser's homepage.\n\nThe replacement is given as a URL. The URL may:\n\nIf two or more extensions both set this value, then the setting from the most recently installed one will take precedence.\n\nTo override new tabs, use \"chrome_url_overrides\" instead.\n\nThis is a localizable property.\n\nDefines a search provider to add to the browser.\n\nThe search provider has a name and a primary search URL. Alternative URLs may be provided, including URLs for more specialized searches like image search. In the URL you supply, use \"{searchTerms}\" to interpolate the search term into the URL, like: https://www.discogs.com/search/?q={searchTerms}. You can also provide POST parameters to be sent along with the search.\n\nThe search provider will be presented to the user alongside the built-in providers. If you include the is_default property and set it to true, the new search provider will be the default option. By supplying the keyword property, you enable the user to select your search provider by typing the keyword into the search/address bar before the search term.\n\nThis is an object with the properties listed below. All string properties are localizable.\n\nThis example shows how to set a search provider.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/chrome_url_overrides",
    "title": "chrome_url_overrides - Mozilla | MDN",
    "h1": "chrome_url_overrides",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nSee what your team could do with The DevSecOps Platform. Take GitLab for a spin.Mozilla ads\n\nSee what your team could do with The DevSecOps Platform. Take GitLab for a spin.\nMozilla ads\n\nUse the chrome_url_overrides key to provide a custom replacement for the documents loaded into various special pages usually provided by the browser itself.\n\nThe chrome_url_overrides key is an object that may have the following properties:\n\nProvide a replacement for the page that shows the bookmarks.\n\nProvide a replacement for the page that shows the browsing history.\n\nProvide a replacement for the document that's shown in the \"new tab\" page. This is the page that's shown when the user has opened a new tab but has not loaded any document into it: for example, by using the Ctrl/Command+T keyboard shortcut.\n\nThe replacement is given as a URL to an HTML file. The file must be bundled with the extension: you can't specify a remote URL here. You can specify it relative to the extension's root folder, like: \"path/to/newtab.html\".\n\nThe document can load CSS and JavaScript, just like a normal web page. JavaScript running in the page gets access to the same privileged \"browser.*\" APIs as the extension's background script.\n\nIt's very good practice to include a <title> for the page, or the tab's title will be the \"moz-extension://...\" URL.\n\nA common use case is to let the user define a new tab page: to do this, provide a custom new tab page that navigates to the page the user defined.\n\nIf two or more extensions both define custom new tab pages, then the last one to be installed or enabled gets to use its value.\n\nTo override the browser's homepage, use \"chrome_settings_overrides\" instead.\n\nAll properties are localizable.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/commands",
    "title": "commands - Mozilla | MDN",
    "h1": "commands",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nUse the commands key to define one or more keyboard shortcuts for your extension.\n\nEach keyboard shortcut is defined with a name, a combination of keys, and a description. Once you've defined commands in your extension's manifest.json, you can listen for their associated key combinations with the commands JavaScript API.\n\nThe commands key is an object, and each shortcut is a property of it. The property's name is the name of the shortcut.\n\nEach shortcut's value is an object, with up to 2 properties:\n\nThe suggested_key property is an object with any of the following properties (all strings):\n\nThe value of each property is the keyboard shortcut for the command on that platform, as a string containing keys separated by \"+\". The value for \"default\" is used on all platforms that are not explicitly listed.\n\nFor example:\n\nThis JSON defines 2 shortcuts:\n\nYou could then listen for the \"toggle-feature\" command with code like this:\n\nThere are these 4 special shortcuts with default actions for which the commands.onCommand event does not fire:\n\nThe availability of these special shortcuts varies between manifest versions and browsers, like this:\n\nFor example, this JSON defines a key combination that clicks the extension's browser action:\n\nThere are two valid formats for shortcut keys: as a key combination or as a media key.\n\nNote: On Macs, \"Ctrl\" is interpreted as \"Command\", so if you actually need \"Ctrl\", specify \"MacCtrl\".\n\nKey combinations must consist of 2 or 3 keys:\n\nThe key is then given as a string containing the set of key values, in the order listed above, separated by \"+\". For example, \"Ctrl+Shift+Z\".\n\nIf a key combination is already used by the browser (like \"Ctrl+P\") or by an existing add-on, then you can't override it. You can define it, but your event handler will not be called when the user presses the key combination.\n\nAlternatively, the shortcut may be specified as one of the following media keys:\n\nShortcuts can be updated via commands.update(). Users can also update shortcuts via the \"Manage Extension Shortcuts\" option at about:addons in Firefox, as shown in this video. In Chrome, users can change shortcuts at chrome://extensions/shortcuts.\n\nDefine a single keyboard shortcut, using only the default key combination:\n\nDefine two keyboard shortcuts, one with a platform-specific key combination:\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jul 18, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/content_scripts",
    "title": "content_scripts - Mozilla | MDN",
    "h1": "content_scripts",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nAccelerate your developer creativity with insights from award-winning engineer Ruth Amos.Mozilla ads\n\nAccelerate your developer creativity with insights from award-winning engineer Ruth Amos.\nMozilla ads\n\nInstructs the browser to load content scripts into web pages whose URL matches a given pattern.\n\nThis key is an array. Each item is an object which:\n\nDetails of all the keys you can include are given in the table below.\n\nInject the scripts specified in js and css into all frames matching the specified URL requirements, even if the frame is not the topmost frame in a tab. This does not inject into child frames where only their parent matches the URL requirements and the child frame does not match the URL requirements. The URL requirements are checked for each frame independently.\n\nNote: This also applies to any tracker or ad that uses iframes, which means that enabling this could make your content script get called dozens of times on some pages.\n\nDefaults to false.\n\nAn array of paths, relative to manifest.json, referencing CSS files that will be injected into matching pages.\n\nFiles are injected in the order given, and at the time specified by run_at.\n\nNote: Firefox resolves URLs in injected CSS files relative to the CSS file itself, rather than to the page it's injected into.\n\nAn array of paths, relative to manifest.json, referencing JavaScript files that will be injected into matching pages.\n\nFiles are injected in the order given. This means that, for example, if you include jQuery here followed by another content script, like this:\n\nThen, \"my-content-script.js\" can use jQuery.\n\nThe files are injected after any files in css, and at the time specified by run_at.\n\nInsert the content scripts into pages whose URL is \"about:blank\" or \"about:srcdoc\", if the URL of the page that opened or created this page matches the patterns specified in the rest of the content_scripts key.\n\nThis is especially useful to run scripts in empty iframes, whose URL is \"about:blank\". To do this you should also set the all_frames key.\n\nFor example, suppose you have a content_scripts key like this:\n\nIf the user loads https://example.org/, and this page embeds an empty iframe, then \"my-script.js\" will be loaded into the iframe.\n\nNote: match_about_blank is supported in Firefox from version 52.\n\nNote that in Firefox, content scripts won't be injected into empty iframes at \"document_start\", even if you specify that value in run_at .\n\nAn array of match patterns. See Matching URL patterns below.\n\nThis is the only mandatory key.\n\nThis option determines when the files specified in css and js are injected. You can supply one of three strings here, each of which identifies a state in the process of loading a document. The states directly correspond to Document.readyState:\n\nThe default value is \"document_idle\".\n\nIn all cases, files in js are injected after files in css.\n\nThe JavaScript world the script executes in.\n\nWarning: Due to the lack of isolation, the web page can detect and interfere with the executed code. Do not use the MAIN world unless it is acceptable for web pages to read, access, or modify the logic or data that flows through the executed code. worid, and therefore \"MAIN\", is not supported in Firefox (although it is planned, and the work to introduce it is tracked by Bug 1736575). In the meantime, JavaScript code running in the isolated content script sandbox can use the Firefox \"Xray vision\" feature, as described in Share objects with page scripts.\n\nThe default value is \"ISOLATED\".\n\nThe \"content_scripts\" key attaches content scripts to documents based on URL matching: if the document's URL matches the specification in the key, then the script will be attached. There are four properties inside \"content_scripts\" that you can use for this specification:\n\nan array of match patterns\n\nan array of match patterns\n\nan array of globs\n\nan array of globs\n\nTo match one of these properties, a URL must match at least one of the items in its array. For example, given a property like:\n\nBoth http://example.org/ and http://example.com/ will match.\n\nSince matches is the only mandatory key, the other three keys are used to limit further the URLs that match. To match the key as a whole, a URL must:\n\nA glob is just a string that may contain wildcards.\n\nThere are two types of wildcard, and you can combine them in the same glob:\n\nFor example: \"*na?i\" would match \"illuminati\" and \"annunaki\", but not \"sagnarelli\".\n\nThis injects a single content script borderify.js into all pages under mozilla.org or any of its subdomains, whether served over HTTP or HTTPS.\n\nThis injects two content scripts into all pages under mozilla.org or any of its subdomains except developer.mozilla.org, whether served over HTTP or HTTPS.\n\nThe content scripts see the same view of the DOM and are injected in the order they appear in the array, so borderify.js can see global variables added by jquery.js.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 6, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/content_security_policy",
    "title": "content_security_policy - Mozilla | MDN",
    "h1": "content_security_policy",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nExtensions have a content security policy (CSP) applied to them by default. The default policy restricts the sources from which extensions can load code (such as <script> resources) and disallows potentially unsafe practices such as the use of eval(). See Default content security policy to learn more about the implications of this.\n\nYou can use the \"content_security_policy\" manifest key to loosen or tighten the default policy. This key is specified in the same way as the Content-Security-Policy HTTP header. See Using Content Security Policy for a general description of CSP syntax.\n\nFor example, you can use this key to:\n\nThere are restrictions on the policy you can specify with this manifest key:\n\nIn Manifest V3, all CSP sources that refer to external or non-static content are forbidden. The only permitted values are 'none', 'self', and 'wasm-unsafe-eval'. In Manifest V2, a source for a script directive is considered secure if it meets these criteria:\n\nThe object-src directive may be required in some browsers that support obsolete plugins and should be set to a secure source such as 'none' if needed. This may be necessary for browsers up until 2022.\n\nSee W3C WebExtensions Community Group issue 204, Remove object-src from the CSP, for more information.\n\nIn Manifest V2, there is one content security policy specified against the key like this:\n\nIn Manifest V3, the content_security_policy key is an object that may have any of these properties, all optional:\n\nNote: Valid examples demonstrate the correct use of keys in CSP. However, extensions with 'unsafe-eval', remote script, blob, or remote sources in their CSP are not allowed for Firefox extensions per the add-on policies and due to significant security issues.\n\nNote: Some examples include the object-src directive, which provides backward compatibility for older browser versions. See object-src directive for more details.\n\nRequire that all types of content should be packaged with the extension:\n\nAllow remote scripts from \"https://example.com\":\n\nAllow remote scripts from any subdomain of \"jquery.com\":\n\nAllow eval() and friends:\n\nAllow the inline script: \"<script>alert('Hello, world.');</script>\":\n\nKeep the rest of the policy, but also require that images should be packaged with the extension:\n\nEnable the use of WebAssembly:\n\nPolicy that omits the \"object-src\" directive:\n\nHowever, this is only invalid in browsers that support obsolete plugins. See object-src directive for more details..\n\nPolicy that omits the \"self\" keyword in the \"script-src\" directive:\n\nScheme for a remote source is not https:\n\nWildcard is used with a generic domain:\n\nSource specifies a scheme but no host:\n\nDirective includes the unsupported keyword 'unsafe-inline':\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/declarative_net_request",
    "title": "declarative_net_request - Mozilla | MDN",
    "h1": "declarative_net_request",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nSee what your team could do with The DevSecOps Platform. Take GitLab for a spin.Mozilla ads\n\nSee what your team could do with The DevSecOps Platform. Take GitLab for a spin.\nMozilla ads\n\nSpecify static rulesets for use with declarativeNetRequest. See Permissions for more information on permission requirements.\n\nThe \"declarative_net_request\" key is an object that must contain the \"rule_resources\" property, an array that must include at least one object with these properties:\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Oct 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/default_locale",
    "title": "default_locale - Mozilla | MDN",
    "h1": "default_locale",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nThis key must be present if the extension contains the _locales directory, and must be absent otherwise. It identifies a subdirectory of _locales, and this subdirectory will be used to find the default strings for your extension.\n\nSee Internationalization.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/description",
    "title": "description - Mozilla | MDN",
    "h1": "description",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nA short description of the extension, intended for display in the browser's user interface. In Firefox and Chrome this value can be up to 132 characters. The limit in other browsers may differ.\n\nThis is a localizable property.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/developer",
    "title": "developer - Mozilla | MDN",
    "h1": "developer",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nThe name of the extension's developer and their homepage URL, intended for display in the browser's user interface.\n\nThe object, and both of its properties, are optional. The \"name\" and \"url\" properties, if present, will override the author and homepage_url keys, respectively. This object only allows for a single developer name and URL to be specified.\n\nThis is a localizable property.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/devtools_page",
    "title": "devtools_page - Mozilla | MDN",
    "h1": "devtools_page",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nUse this key to enable your extension to extend the browser's built-in devtools.\n\nThis key is defined as a URL to an HTML file. The HTML file must be bundled with the extension, and the URL is relative to the extension's root.\n\nThe use of this manifest key triggers an install-time permission warning about devtools. To avoid an install-time permission warning, mark the feature as optional by listing the \"devtools\" permission in the optional_permissions manifest key.\n\nSee Extending the developer tools to learn more.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Aug 10, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/dictionaries",
    "title": "dictionaries - Mozilla | MDN",
    "h1": "dictionaries",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nThe dictionaries key specifies the locale_code for which your extension supplies a dictionary. Although the dictionary consists of two files, one with a .dic and one with an .aff file extension, only the one with the .dic extension is referenced in the manifest.json.\n\nIf you use the dictionaries key, you must also set an ID for your extension using the browser_specific_settings manifest.json key.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/externally_connectable",
    "title": "externally_connectable - Mozilla | MDN",
    "h1": "externally_connectable",
    "paragraphs": "See what your team could do with The DevSecOps Platform. Take GitLab for a spin.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nExternally connectable controls which other extensions and web pages can communicate with an extension using runtime.connect() and runtime.sendMessage() message passing. If externally_connectable is not specified, all extensions can communicate with each other but not with web pages.\n\nNote: For communication with web pages:\n\nids enables communication between this extension and other installed extensions specified by extension identifiers. Use the pattern \"*\" to communicate with all extensions.\n\nmatches is a list of regular expressions that enables communication between an extension and the web pages that match the expression.\n\nNote: If externally_connectable is not specified, communication among extensions is allowed as if externally_connectable specified {\"ids\": [\"*\"] }. Therefore, if you specify externally_connectable.matches, don't forget to add ids if you want to communicate with other extensions.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/homepage_url",
    "title": "homepage_url - Mozilla | MDN",
    "h1": "homepage_url",
    "paragraphs": "Simplify infrastructure with MongoDB Atlas\nGet Started free\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nURL for the extension's home page.\n\nIf a developer key containing the \"url\" property and \"homepage_url\" are defined, Firefox uses \"developer.url\" while Opera uses \"homepage_url\". Chrome and Safari do not support the \"developer\" key.\n\nThis is a localizable property.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jul 10, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/host_permissions",
    "title": "host_permissions - Mozilla | MDN",
    "h1": "host_permissions",
    "paragraphs": "GitLab is the only place where enterprises build mission‑critical software.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nLoved by developers. Trusted by enterprises. Start your free 30 day trial.Mozilla ads\n\nLoved by developers. Trusted by enterprises. Start your free 30 day trial.\nMozilla ads\n\nUse the host_permissions key to request access for the APIs in your extension that read or modify host data, such as cookies, webRequest, and tabs. This key is an array of strings, and each string is a request for a permission.\n\nMost browsers treat host_permissions as optional. If you request permissions using this key, users may get prompted to grant those permissions during installation. As of June 2023, Safari, Firefox, and some Chromium-based browsers don't prompt the user during installation.\n\nUsers can also grant or revoke host permissions on an ad hoc basis. For example, in Firefox, users can do this using the extensions panel.\n\nYour extension can check whether it has all the required permissions immediately after installation using permissions.contains. If it doesn't have the necessary permissions, it can request them using permissions.request. Providing an onboarding step to explain why some permissions are necessary before requesting them might also be helpful.\n\nAs the request to grant host permissions may impact users' willingness to install your extension, requesting host permissions is worth careful consideration. For example, you want to avoid requesting unnecessary host permissions and may want to provide information about why you are requesting host permissions in your extension's store description. The article Request the right permissions provides more information on the issues you should consider.\n\nFor information on how to test and preview permission requests, see Test permission requests on the Extension Workshop site.\n\nHost permissions are specified as match patterns, and each pattern identifies a group of URLs for which the extension is requesting extra privileges. For example, a host permission could be \"*://developer.mozilla.org/*\".\n\nThe extra privileges include:\n\nIn Firefox extensions get host permissions for their origin, which is of the form:\n\nwhere 60a20a9b-1ad4-af49-9b6c-c64c98c37920 is the extension's internal ID. The extension can get this URL programmatically by calling extension.getURL():\n\nRequest privileged access to pages under developer.mozilla.org.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Feb 26, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/icons",
    "title": "icons - Mozilla | MDN",
    "h1": "icons",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nThe icons key specifies icons for your extension. Those icons will be used to represent the extension in components such as the Add-ons Manager.\n\nIt consists of key-value pairs of image size in px and image path relative to the root directory of the extension.\n\nIf icons is not supplied, a standard extension icon will be used by default.\n\nYou should supply at least a main extension icon, ideally 48x48 px in size. This is the default icon that will be used in the Add-ons Manager. You may, however, supply icons of any size and Firefox will attempt to find the best icon to display in different components.\n\nFirefox will consider the screen resolution when choosing an icon. To deliver the best visual experience to users with high-resolution displays, such as Retina displays, provide double-sized versions of all your icons.\n\nThe keys in the icons object specify the icon size in px, values specify the relative icon path. This example contains a 48px extension icon and a larger version for high-resolution displays.\n\nYou can use SVG and the browser will scale your icon appropriately. There are currently two caveats though:\n\nNote: Only Firefox is known to support SVG icons. Chromium has a bug about unsupported SVG icons.\n\nNote: Remember to include the xmlns attribute when creating the SVG. Otherwise, Firefox won't be able to display the icon.\n\nNote: If you are using a program like Inkscape for creating SVG, you might want to save it as a \"plain SVG\". Firefox might be confused by various special namespaces and not display your icon.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jul 18, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/incognito",
    "title": "incognito - Mozilla | MDN",
    "h1": "incognito",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nUse the incognito key to control how the extension works with private browsing windows.\n\nNote: By default, extensions do not run in private browsing windows. Whether an extension can access private browsing windows is under user control. For details, see Extensions in Private Browsing. Your extension can check whether it can access private browsing windows using extension.isAllowedIncognitoAccess.\n\nThis is a string that can take any of these values:\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/manifest_version",
    "title": "manifest_version - Mozilla | MDN",
    "h1": "manifest_version",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nThis key specifies the version of manifest.json used by this extension.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jul 10, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/name",
    "title": "name - Mozilla | MDN",
    "h1": "name",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nName of the extension. This is used to identify the extension in the browser's user interface and on sites like addons.mozilla.org.\n\nIt's good practice to keep the name short enough to display in the UI. Also, the length of the name of a published extension may be limited. For example, as of February 2024:\n\nThese restrictions do not apply to self-hosted extensions or extensions distributed outside the stores.\n\nThis is a localizable property.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Feb 26, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/offline_enabled",
    "title": "offline_enabled - Mozilla | MDN",
    "h1": "offline_enabled",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nNon-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nWhether the app or extension is expected to work offline. When Chrome detects that it is offline, apps with this field set to true will be highlighted on the New Tab page.\n\nAs of Chrome 35, apps (ChromeOS only from 2018) are assumed to be offline enabled and the default value of \"offline_enabled\" is true unless \"webview\" permission is requested. In this case, network connectivity is assumed to be required and \"offline_enabled\" defaults to false.\n\nThe \"offline_enabled\" value is also used to determine whether a network connectivity check will be performed when launching an app in ChromeOS kiosk mode. A network connectivity check will be performed when apps are not offline enabled, and app launching put on hold until the device obtains connectivity to the Internet.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Nov 23, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/omnibox",
    "title": "omnibox - Mozilla | MDN",
    "h1": "omnibox",
    "paragraphs": "Bootstrap your app venture on the monday.com app marketplace, and tap into 180K+ customers.\nCheck it out\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nUse the omnibox key to define an omnibox keyword for your extension.\n\nWhen the user types this keyword into the browser's address bar, followed by a space, then any subsequent characters will be sent to the extension using the omnibox API. The extension will then be able to populate the address bar's drop-down suggestions list with its own suggestions.\n\nIf two or more extensions define the same keyword, then the extension that was installed last gets to control the keyword. Any previously installed extensions that defined the same keyword will no longer be able to use the omnibox API.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/optional_permissions",
    "title": "optional_permissions - Mozilla | MDN",
    "h1": "optional_permissions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nUse the optional_permissions key to list permissions that you want to ask for at runtime, after your extension has been installed.\n\nThe permissions key lists permissions that your extension needs before it can be installed. In contrast, optional_permissions lists permissions that your extension doesn't need at install time but it may ask for after it has been installed. To ask for a permission, use the permissions API. Asking for a permission may present the user with a dialog requesting them to grant the permission to your extension.\n\nFor advice on designing your request for runtime permissions, to maximize the likelihood that users grant them, see Request permissions at runtime.\n\nStarting with Firefox 84, users will be able to manage optional permissions from the Firefox Add-ons Manager. Extensions that use optional permissions should listen for browser.permissions.onAdded and browser.permissions.onRemoved API events to know when a user grants or revokes these permissions.\n\nThe key can contain two kinds of permissions: host permissions and API permissions.\n\nThese are the same as the host permissions you can specify in the permissions key.\n\nNote: When using Manifest V3 or higher:\n\nYou can include any of the following here, but not in all browsers: check the compatibility table for browser-specific details.\n\nNote that this is a subset of the API permissions allowed in permissions.\n\nOf this set, the following permissions are granted silently, without a user prompt:\n\nIn Manifest V2 only, enable the extension to ask for privileged access to pages under developer.mozilla.org.\n\nEnable the extension to ask for access to the privileged pieces of the tabs API.\n\nIn Manifest V2 only, enable the extension to ask for both of the above permissions.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jan 29, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/options_page",
    "title": "options_page - Mozilla | MDN",
    "h1": "options_page",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nWarning: This manifest key has been deprecated. Use options_ui instead.\n\nUse the options_page key to define an options page for your extension.\n\nThe options page contains settings for the extension. The user can access it from the browser's add-ons manager, and you can open it from within your extension using runtime.openOptionsPage().\n\nUnlike options pages specified using the newer options_ui key, options pages specified using the deprecated options_page key don't receive browser styles and always open in a normal browser tab.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/options_ui",
    "title": "options_ui - Mozilla | MDN",
    "h1": "options_ui",
    "paragraphs": "AI and large language models (LLMs) are revolutionizing the way businesses use and process data.\nGet Started free\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nUse the options_ui key to define an options page for your extension.\n\nThe options page contains settings for the extension. The user can access it from the browser's add-ons manager, and you can open it from within your extension using runtime.openOptionsPage().\n\nYou specify options_ui as a path to an HTML file packaged with your extension. The HTML file can include CSS and JavaScript files, just like a normal web page. Unlike a normal page, though, the JavaScript can use all the WebExtension APIs that the extension has permissions for. However, it runs in a different scope than your background scripts.\n\nIf you want to share data or functions between the JavaScript on your options page and your background script(s), you can do so directly by obtaining a reference to the Window of your background scripts by using extension.getBackgroundPage(), or a reference to the Window of any of the pages running within your extension with extension.getViews(). Alternately, you can communicate between the JavaScript for your options page and your background script(s) using runtime.sendMessage(), runtime.onMessage, or runtime.connect(). The latter (or runtime.Port equivalents) can also be used to share options between your background script(s) and your content script(s).\n\nIn general, you will want to store options changed on option pages using the storage API to either storage.sync (if you want the settings synchronized across all instances of that browser that the user is logged into), or storage.local (if the settings are local to the current machine/profile). If you do so and your background script(s) (or content script(s)) need to know about the change, your script(s) might choose to add a listener to storage.onChanged.\n\nThe options_ui key is an object with the following contents:\n\nOptional, defaulting to:\n\nDo not set browser_style to true: its not support in Manifest V3 from Firefox 118. See Manifest V3 migration for browser_style.\n\nIn Firefox, the stylesheet can be seen at chrome://browser/content/extension.css or chrome://browser/content/extension-mac.css on macOS. When setting dimensions, be aware that this stylesheet sets box-sizing: border-box (see box-sizing).\n\nDefaults to false.\n\nIf true, the options page will open in a normal browser tab, rather than being integrated into the browser's add-ons manager.\n\nMandatory.\n\nThe path to an HTML file containing the specification of your options page.\n\nThe path is relative to the location of manifest.json itself.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Oct 4, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/page_action",
    "title": "page_action - Mozilla | MDN",
    "h1": "page_action",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nA page action is an icon that your extension adds inside the browser's URL bar.\n\nYour extension may optionally also supply an associated popup whose content is specified using HTML, CSS, and JavaScript.\n\nIf you supply a popup, then the popup is opened when the user clicks the icon, and your JavaScript running in the popup can handle the user's interaction with it. If you don't supply a popup, then a click event is dispatched to your extension's background scripts when the user clicks the icon.\n\nYou can also create and manipulate page actions programmatically using the pageAction API.\n\nPage actions are like browser actions, except that they are associated with particular web pages rather than with the browser as a whole. If an action is only relevant on certain pages, then you should use a page action and display it only on relevant pages. If an action is relevant to all pages or to the browser itself, use a browser action.\n\nWhile browser actions are displayed by default, page actions are hidden by default. They can be shown for a particular tab by calling pageAction.show(), passing in the tab's id. You can also change this default behavior using the show_matches property.\n\nThe page_action key is an object that may have any of three properties, all optional:\n\nOptional. Defaults to false.\n\nDo not set browser_style to true: its not support in Manifest V3 from Firefox 118. See Manifest V3 migration for browser_style.\n\nIn Firefox, the stylesheet can be seen at chrome://browser/content/extension.css or chrome://browser/content/extension-mac.css on macOS.\n\nThe latest-download example extension uses browser_style in its popup.\n\nUse this to specify an icon for the action.\n\nIt's recommended that you supply two icons here (19×19 pixels and 38×38 pixels), and specify them in an object with properties named \"19\" and \"38\", like this:\n\nIf you do this, then the browser will pick the right size icon for the screen's pixel density.\n\nYou can just supply a string here:\n\nIf you do this, then the icon will be scaled to fit the toolbar, and may appear blurry.\n\nThe path to an HTML file containing the specification of the popup.\n\nThe HTML file may include CSS and JavaScript files using <link> and <script> elements, just like a normal web page. However, don't use <script> with embedded code, because you'll get a Content Violation Policy error. Instead, <script> must use the src attribute to load a separate script file.\n\nUnlike a normal web page, JavaScript running in the popup can access all the WebExtension APIs (subject, of course, to the extension having the appropriate permissions).\n\nThis is a localizable property.\n\nTooltip for the icon, displayed when the user moves their mouse over it.\n\nThis is a localizable property.\n\nHide the page action by default for pages whose URLs match any of the given match patterns.\n\nNote that page actions are always hidden by default unless show_matches is given. Therefore, it only makes sense to include this property if show_matches is also given, and will override the patterns in show_matches.\n\nFor example, consider a value like:\n\nThis shows the page action by default for all HTTPS URLs under the \"mozilla.org\" domain, except for pages under \"developer.mozilla.org\".\n\nShow the page action by default for pages whose URLs match any of the given patterns.\n\nSee also hide_matches.\n\nOptional. Defaults to true.\n\nControls whether or not the page action should appear in the location bar by default when the user installs the extension. This property is no longer supported since Firefox 89.\n\nA page action with just an icon, specified in 2 different sizes. The extension's background scripts can receive click events when the user clicks the icon using code like this:\n\nA page action with an icon, a title, and a popup. The popup will be shown when the user clicks the icon.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Aug 27, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions",
    "title": "permissions - Mozilla | MDN",
    "h1": "permissions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nUse the permissions key to request special powers for your extension. This key is an array of strings, and each string is a request for a permission.\n\nIf you request permissions using this key, then the browser may inform the user at install time that the extension is requesting certain privileges, and ask them to confirm that they are happy to grant these privileges. The browser may also allow the user to inspect an extension's privileges after installation. As the request to grant privileges may impact on users' willingness to install your extension, requesting privileges is worth careful consideration. For example, you want to avoid requesting unnecessary permissions and may want to provide information about why you are requesting permissions in your extension's store description. More information on the issues you should consider is provided in the article Request the right permissions.\n\nFor information on how to test and preview permission requests, see Test permission requests on the Extension Workshop site.\n\nThe key can contain three kinds of permissions:\n\nNote: When using Manifest V3 or higher, host permissions must be specified in the host_permissions manifest key.\n\nHost permissions are specified as match patterns, and each pattern identifies a group of URLs for which the extension is requesting extra privileges. For example, a host permission could be \"*://developer.mozilla.org/*\".\n\nThe extra privileges include:\n\nIn Firefox, from version 56 onwards, extensions automatically get host permissions for their own origin, which is of the form:\n\nwhere 60a20a9b-1ad4-af49-9b6c-c64c98c37920 is the extension's internal ID. The extension can get this URL programmatically by calling extension.getURL():\n\nAPI permissions are specified as keywords, and each keyword names a WebExtension API that the extension would like to use.\n\nThese permissions are available in Manifest V2 and above unless otherwise noted:\n\nIn most cases the permission just grants access to the API, with the following exceptions:\n\nThis permission is specified as \"activeTab\". If an extension has the activeTab permission, then when the user interacts with the extension, the extension is granted extra privileges for the active tab only.\n\n\"User interaction\" includes:\n\nThe extra privileges are:\n\nThe intention of this permission is to enable extensions to fulfill a common use case, without having to give them very powerful permissions. Many extensions want to \"do something to the current page when the user asks\".\n\nFor example, consider an extension that wants to run a script in the current page when the user clicks a browser action. If the activeTab permission did not exist, the extension would need to ask for the host permission <all_urls>. But this gives the extension more power than it needs: it could now execute scripts in any tab, any time it likes, instead of just the active tab and only in response to a user action.\n\nNote: You can only get access to the tab/data that was there, when the user interaction occurred (e.g. the click). When the active tab navigates away (e.g., due to finishing loading or some other event), the permission does not grant you access to the tab anymore.\n\nThe activeTab permission enables scripting access to the top level tab's page and same origin frames. Running scripts or modifying styles inside cross-origin frames may require additional host permissions. Of course, restrictions and limitations related to particular sites and URI schemes are applied as well.\n\nUsually the tab that's granted activeTab is just the currently active tab, except in one case. The menus API enables an extension to create a menu item which is shown if the user context-clicks on a tab (that is, on the element in the tabstrip that enables the user to switch from one tab to another).\n\nIf the user clicks such an item, then the activeTab permission is granted for the tab the user clicked, even if it's not the currently active tab (as of Firefox 63, Firefox bug 1446956).\n\nThere are two permissions which enables the extension to interact with the clipboard:\n\nWrite to the clipboard using Clipboard.write(), Clipboard.writeText(), document.execCommand(\"copy\") or document.execCommand(\"cut\")\n\nRead from the clipboard using Clipboard.read(), Clipboard.readText() or document.execCommand(\"paste\")\n\nSee Interact with the clipboard for more details.\n\nThe unlimitedStorage permission:\n\nIn Manifest V2 only, request privileged access to pages under developer.mozilla.org.\n\nRequest access to the privileged pieces of the tabs API.\n\nIn Manifest V2 only, request both of the above permissions.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jan 28, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/protocol_handlers",
    "title": "protocol_handlers - Mozilla | MDN",
    "h1": "protocol_handlers",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nUse this key to register one or more web-based protocol handlers.\n\nA protocol handler is an application that knows how to handle particular types of links: for example, a mail client is a protocol handler for \"mailto:\" links. When the user clicks a \"mailto:\" link, the browser opens the application selected as the handler for the \"mailto:\" protocol (or offers them a choice of handlers, depending on their settings).\n\nNote: By default, extensions do not run in private browsing windows. As protocol handlers are part of the extension, they don't work in private browsing windows by default. Whether an extension can access private browsing windows and its protocol handlers become active is under user control. For details, see Extensions in Private Browsing. Your extension can check whether it can access private browsing windows using extension.isAllowedIncognitoAccess.\n\nWith this key, you can register a website as a handler for a particular protocol. The syntax and semantics of this key is very much like the Navigator.registerProtocolHandler() function, except that with registerProtocolHandler() a website can only register itself as a handler.\n\nEach protocol handler has three properties, all mandatory:\n\nA string defining the protocol. This must be either:\n\nA string representing the name of the protocol handler. This will be displayed to the user when they are being asked if they want this handler to open the link.\n\nA string representing the URL of the handler. This string must include \"%s\" as a placeholder: this will be replaced with the escaped URL of the document to be handled. This URL might be a true URL, or it could be a phone number, email address, or so forth. This is a localizable property.\n\nIf the protocol is not in the allowed list then it has to start with 'ext+'\n\nHandlers can also be extension pages.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Aug 29, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/short_name",
    "title": "short_name - Mozilla | MDN",
    "h1": "short_name",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nShort name for the extension. If given, this will be used in contexts where the name field is too long. It's recommended that the short name should not exceed 12 characters. If the short name field is not included in manifest.json, then name will be used instead and may be truncated.\n\nThis is a localizable property.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/sidebar_action",
    "title": "sidebar_action - Mozilla | MDN",
    "h1": "sidebar_action",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nA sidebar is a pane that is displayed at the left-hand side of the browser window, next to the web page. The browser provides a UI that enables the user to see the currently available sidebars and to select a sidebar to display.\n\nThe sidebar_action key enables you to define the default properties for the sidebar. You can change these properties at runtime using the sidebarAction API.\n\nThe sidebar_action key is an object that may have any of the properties listed below. The only mandatory property is default_panel.\n\nOptional, defaulting to:\n\nDo not set browser_style to true: its not support in Manifest V3 from Firefox 118. See Manifest V3 migration for browser_style.\n\nIn Firefox, the stylesheet can be seen at chrome://browser/content/extension.css or chrome://browser/content/extension-mac.css on macOS. When setting dimensions, be aware that this stylesheet sets box-sizing: border-box (see box-sizing).\n\nUse this to specify one or more icons for the sidebar. The icon is shown in the browser's UI for opening and closing sidebars.\n\nIcons are specified as URLs relative to the manifest.json file itself.\n\nYou can specify a single icon file by supplying a string here:\n\nTo specify multiple icons in different sizes, specify an object here. The name of each property is the icon's height in pixels, and must be convertible to an integer. The value is the URL. For example:\n\nSee Choosing icon sizes for more guidance on this.\n\nThis property is optional: if it is omitted, the sidebar doesn't get an icon.\n\nThe path to an HTML file that specifies the sidebar's contents.\n\nThe HTML file may include CSS and JavaScript files using <link> and <script> elements, just like a normal web page.\n\nUnlike a normal web page, JavaScript running in the panel can access all the WebExtension APIs (subject, of course, to the extension having the appropriate permissions).\n\nThis property is mandatory.\n\nThis is a localizable property.\n\nTitle for the sidebar. This is used in the browser UI for listing and opening sidebars, and is displayed at the top of the sidebar when it is open.\n\nThis property is optional: if it is omitted, the sidebar's title is the extension's name.\n\nThis is a localizable property.\n\nFor a simple example of an extension that uses a sidebar, see annotate-page.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Aug 27, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/storage",
    "title": "storage - Mozilla | MDN",
    "h1": "storage",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nUse the storage key to specify the name of the schema file that defines the structure of data in managed storage.\n\nManaged data declares the enterprise policies supported by the app. Policies are analogous to options but are configured by a system administrator instead of the user, enabling the app to be configured for all users of an organization.\n\nAfter declaring the policies, they are read from the storage.managed API. However, if a policy value does not conform to the schema, then it is not published by the storage.managed API. It's up to the app to enforce the policies configured by the administrator.\n\nNote: Firefox does not define a schema for managed storage, see storage.managed for more details.\n\nThe storage key is an object that has the following required property:\n\nA String specifying the full path of the file within the extension that defines the schema of the manage storage.\n\nTip: you can click/tap on a cell for more information.\n\nNote:\n\nThis page includes details from the Chrome developer website page Manifest for storage areas included here under the Creative Commons Attribution 3.0 United States License.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/theme",
    "title": "theme - Mozilla | MDN",
    "h1": "theme",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nUse the theme key to define a static theme to apply to Firefox.\n\nNote: If you want to include a theme with an extension, please see the theme API.\n\nNote: Since May 2019, themes need to be signed to be installed (Firefox bug 1545109). See Signing and distributing your add-on for more details.\n\nNote: A new version of Firefox for Android, based on GeckoView, is under development. A pre-release version is available. The pre-release version does not support themes.\n\nThe following image formats are supported in all theme image properties:\n\nThe theme key is an object that takes the following properties:\n\nOptional as of Firefox 60. Mandatory before Firefox 60.\n\nA JSON object whose properties represent the images to display in various parts of the browser. See images for details on the properties that this object can contain.\n\nMandatory.\n\nA JSON object whose properties represent the colors of various parts of the browser. See colors for details on the properties that this object can contain.\n\nOptional\n\nThis object has properties that affect how the \"additional_backgrounds\" images are displayed and color schemes are applied. See properties for details on the properties that this object can contain.\n\nAll URLs are relative to the manifest.json file and cannot reference an external URL.\n\nImages should be 200 pixels high to ensure they always fill the header space vertically.\n\nThe URL of a foreground image to be added to the header area and anchored to the upper right corner of the header area.\n\nNote: Chrome anchors the image to the top left of the header and if the image doesn't fill the header area tile the image.\n\nOptional in desktop Firefox 60 onwards. Required in Firefox for Android.\n\nWarning: The additional_backgrounds property is experimental. It is currently accepted in release versions of Firefox, but its behavior is subject to change. It is not supported in Firefox for Android.\n\nAn array of URLs for additional background images to be added to the header area and displayed behind the \"theme_frame\": image. These images layer the first image in the array on top, the last image in the array at the bottom.\n\nOptional.\n\nBy default all images are anchored to the upper right corner of the header area, but their alignment and repeat behavior can be controlled by properties of \"properties\":.\n\nThese properties define the colors used for different parts of the browser. They are all optional. How these properties affect the Firefox UI is shown here:\n\nNote: Where a component is affected by multiple color properties, the properties are listed in order of precedence.\n\nAll these properties can be specified as either a string containing any valid CSS color string (including hexadecimal), or an RGB array, such as \"tab_background_text\": [ 107 , 99 , 23 ].\n\nNote: In Chrome, colors may only be specified as RGB arrays.\n\nIn Firefox for Android colors can be specified using:\n\nColors for Firefox for Android themes cannot be specified using color names.\n\nThe color of text and icons in the bookmark and find bars. Also, if tab_text isn't defined it sets the color of the active tab text and if icons isn't defined the color of the toolbar icons. Provided as Chrome compatible alias for toolbar_text.\n\nNote: Ensure any color used contrasts well with those used in frame and frame_inactive or toolbar if you're using that property.\n\nWhere icons isn't defined, also ensure good contrast with button_background_active and button_background_hover.\n\nThe color of the background of the pressed toolbar buttons.\n\nThe color of the background of the toolbar buttons on hover.\n\nThe color of toolbar icons, excluding those in the find toolbar.\n\nNote: Ensure the color used contrasts well with those used in frame, frame_inactive, button_background_active, and button_background_hover.\n\nThe color of toolbar icons in attention state such as the starred bookmark icon or finished download icon.\n\nNote: Ensure the color used contrasts well with those used in frame, frame_inactive, button_background_active, and button_background_hover.\n\nThe color of the header area background, displayed in the part of the header not covered or visible through the images specified in \"theme_frame\" and \"additional_backgrounds\".\n\nThe color of the header area background when the browser window is inactive, displayed in the part of the header not covered or visible through the images specified in \"theme_frame\" and \"additional_backgrounds\".\n\nThe new tab page background color.\n\nThe new tab page card background color.\n\nThe new tab page text color.\n\nNote: Ensure the color used contrasts well with that used in ntp_background and ntp_card_background.\n\nThe background color of popups (such as the URL bar dropdown and the arrow panels).\n\nThe border color of popups.\n\nThe background color of items highlighted using the keyboard inside popups (such as the selected URL bar dropdown item).\n\nNote: It's recommended to define popup_highlight_text to override the browser default text color on various platforms.\n\nThe text color of items highlighted inside popups.\n\nNote: Ensure the color used contrasts well with that used in popup_highlight.\n\nThe text color of popups.\n\nNote: Ensure the color used contrasts well with that used in popup.\n\nThe background color of the sidebar.\n\nThe border and splitter color of the browser sidebar\n\nThe background color of highlighted rows in built-in sidebars\n\nThe text color of highlighted rows in sidebars.\n\nNote: Ensure the color used contrasts well with that used in sidebar_highlight.\n\nThe text color of sidebars.\n\nNote: Ensure the color used contrasts well with that used in sidebar.\n\nWarning: tab_background_separator is not supported starting with Firefox 89.\n\nThe color of the vertical separator of the background tabs.\n\nThe color of the text displayed in the inactive page tabs. If tab_text or bookmark_text isn't specified, applies to the active tab text.\n\nNote: Ensure the color used contrasts well with those used in tab_selected or frame and frame_inactive.\n\nThe color of the selected tab line.\n\nThe color of the tab loading indicator and the tab loading burst.\n\nThe background color of the selected tab. When not in use selected tab color is set by frame and the frame_inactive.\n\nFrom Firefox 59, it represents the text color for the selected tab. If tab_line isn't specified, it also defines the color of the selected tab line.\n\nNote: Ensure the color used contrasts well with those used in tab_selected or frame and frame_inactive.\n\nThe background color for the navigation bar, the bookmarks bar, and the selected tab.\n\nThis also sets the background color of the \"Find\" bar.\n\nThe color of the line separating the bottom of the toolbar from the region below.\n\nThe background color for fields in the toolbar, such as the URL bar.\n\nThis also sets the background color of the Find in page field.\n\nThe border color for fields in the toolbar.\n\nThis also sets the border color of the Find in page field.\n\nThe focused border color for fields in the toolbar.\n\nThe focused background color for fields in the toolbar, such as the URL bar.\n\nHere, the toolbar_field_highlight field specifies that the highlight color is a light green, while the text is set to a dark-to-medium green using toolbar_field_highlight_text.\n\nThe color used to draw text that's currently selected in the URL bar (and the search bar, if it's configured to be separate box).\n\nNote: Ensure the color used contrasts well with those used in toolbar_field_highlight.\n\nHere, the toolbar_field_highlight_text field is used to set the text color to a dark medium-dark green, while the highlight color is a light green.\n\nWarning: toolbar_field_separator is not supported starting with Firefox 89.\n\nThe color of separators inside the URL bar. In Firefox 58 this was implemented as toolbar_vertical_separator.\n\nIn this screenshot, \"toolbar_vertical_separator\" is the red vertical line in the URL bar dividing the Reader Mode icon from the other icons.\n\nThe color of text in fields in the toolbar, such as the URL bar. This also sets the color of text in the Find in page field.\n\nNote: Ensure the color used contrasts well with those used in toolbar_field.\n\nThe color of text in focused fields in the toolbar, such as the URL bar.\n\nNote: Ensure the color used contrasts well with those used in toolbar_field_focus.\n\nThe color of toolbar text. This also sets the color of text in the \"Find\" bar.\n\nNote: For compatibility with Chrome, use the alias bookmark_text.\n\nThe color of the line separating the top of the toolbar from the region above.\n\nThe color of the separator in the bookmarks toolbar. In Firefox 58, it corresponds to the color of separators inside the URL bar.\n\nAdditionally, this key accepts various properties that are aliases for one of the properties above. These are provided for compatibility with Chrome. If an alias is given, and the non-alias version is also given, then the value will be taken from the non-alias version.\n\nArray of String\n\nOptional\n\nAn array of enumeration values defining the alignment of the corresponding \"additional_backgrounds\": array item.\nThe alignment options include:\n\nIf not specified, defaults to \"right top\".\n\nArray of String\n\nOptional\n\nAn array of enumeration values defining how the corresponding \"additional_backgrounds\": array item repeats. Options include:\n\nIf not specified, defaults to \"no-repeat\".\n\nString\n\nOptional\n\nDetermines which color scheme is applied to the chrome (for example, context menus) and content (for example, built-in pages and the preferred color scheme for web pages). Options include:\n\nIf not specified, defaults to \"auto\".\n\nString\n\nOptional\n\nDetermines which color scheme is applied to the content (for example, built-in pages and preferred color scheme for web pages). Overrides color_scheme. Options include:\n\nIf not specified, defaults to \"auto\".\n\nA basic theme must define an image to add to the header, the accent color to use in the header, and the color of text used in the header:\n\nMultiple images can be used to fill the header. Before Firefox version 60, use a blank or transparent header image to gain control over the placement of each additional image:\n\nYou can also fill the header with a repeated image, or images, in this case a single image anchored in the middle top of the header and repeated across the rest of the header:\n\nThe following example uses most of the different values for theme.colors:\n\nIt will give you a browser that looks like this:\n\nIn this screenshot, \"toolbar_vertical_separator\" is the white vertical line in the URL bar dividing the Reader Mode icon from the other icons.\n\nTip: you can click/tap on a cell for more information.\n\nIn Chrome:\n\nThis page was last modified on Jan 24, 2024 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/theme_experiment",
    "title": "theme_experiment - Mozilla | MDN",
    "h1": "theme_experiment",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.Mozilla ads\n\nGitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nMozilla ads\n\nThis key enables the definition of experimental theme key properties for the Firefox interface. These experiments are a precursor to proposing new theme features for inclusion in Firefox. Experimentation is done by:\n\nTo discover the CSS selectors for Firefox UI elements or internal Firefox CSS variables use the browser toolbox.\n\nNote: This key is only available for use in Firefox Developer Edition and Firefox Nightly channels and requires the extensions.experiments.enabled preference to be enabled. In Firefox 73 and earlier, the extensions.legacy.enabled had to be used instead.\n\nWarning: This feature is experimental and could be subject to change.\n\nThe theme_experiment key is an object that takes the following properties:\n\nOptional\n\nName of a stylesheet providing mapping of Firefox UI element CSS selectors to CSS variables.\n\nOptional\n\nMappings of CSS variables (as defined in Firefox or by the stylesheet defined in stylesheet) to images property names for use in the theme key.\n\nOptional\n\nMappings of CSS variables (as defined in Firefox or by the stylesheet defined in stylesheet) to colors property names for use in the theme key.\n\nOptional\n\nMappings of CSS variables (as defined in Firefox or by the stylesheet defined in stylesheet) to properties property names for use in the theme key.\n\nThis example uses a stylesheet named style.css to provide the ability to set a color for the browser reload button in the theme key.\n\nThe stylesheet defines:\n\nwhere #reload-button is the Firefox internal CSS selector for the reload button and --reload-button-color is an arbitrary name.\n\nIn the manifest.json file, --reload-button-color is then mapped to the name to be used in the colors property of theme:\n\nThe argument reload_button is used in the same way as any other theme property:\n\nThis has the effect of making the reload icon orange.\n\nThis property can also be used in browser.theme.update(). images and properties work in a similar way to colors.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/user_scripts",
    "title": "user_scripts - Mozilla | MDN",
    "h1": "user_scripts",
    "paragraphs": "Add video calling functionality to your website or app with Whereby’s powerful SDK.\nGet started\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nInstructs the browser to load a script packaged in the extension, known as the API script, this script is used to export a set of custom API methods for use in user scripts. The API script path, relative to the manifest.json file, is defined as a string in \"api_script\".\n\nNote: The user_script key is required for the userScripts API to function, even if no API script is specified. For example. user_scripts: {}.\n\nThe API script:\n\nThe script executes automatically on any webpage defined in matches by userScripts.register. However, this is before the user script sandbox object is created and the custom API methods can be exported.\n\nTo export the custom API methods, the script listens for userScripts.onBeforeScript and then export the custom API methods.\n\nNot every user script may need to consume all of the custom API methods. You can, therefore, include details of the APIs needed in scriptMetadata when running userScripts.register. The API script then accesses the scriptMetadata through the script parameter received by the userScripts.onBeforeScript listener (as script.metadata).\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/version",
    "title": "version - Mozilla | MDN",
    "h1": "version",
    "paragraphs": "Loved by developers. Trusted by enterprises. Start your free 30 day trial.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nThe version string for the extension.\n\nThe version string consists of 1 to 4 numbers separated by dots, for example, 1.2.3.4. Non-zero numbers must not include a leading zero. For example, 2.01 is not allowed; however, 0.2, 2.0.1, and 2.10 are allowed.\n\nExtension stores and browsers may enforce or warn if the version string doesn't comply with this format. They may also apply restrictions to the range of numbers available. For example:\n\nIt may be possible to create an extension that appears to have a valid version number when run in a browser but doesn't comply with store requirements. Particular care should be taken when developing cross-browser extensions that use large number elements.\n\nSome browsers and web stores may recognize the version_name key. This key enables you to provide a descriptive version string that may be displayed instead of the version number. For example, 1.0 beta.\n\nTo determine which of two extension versions is the most recent, the version string numbers are compared left to right. A missing version string element is equivalent to 0. For example, 1.0 is equivalent to 1.0.0.0. The first version string with a number greater than the corresponding number in the other version string is the most recent. For example, 1.10 is a more recent version than 1.9.\n\nSee Legacy version formats for details of previously supported version strings.\n\nYou obtain the extension version in your JavaScript code using:\n\nIf the manifest contains:\n\nYou see this in the console log:\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/version_name",
    "title": "version_name - Mozilla | MDN",
    "h1": "version_name",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.Mozilla ads\n\nScan your email now to see if you’ve been a part of a data breach. Try Firefox Monitor.\nMozilla ads\n\nIn addition to the version field, which is used for update purposes, version_name can be set to a descriptive version string and will be used for display purposes if present.\n\nIf no version_name is present, the version field will be used for display purposes as well.\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/web_accessible_resources",
    "title": "web_accessible_resources - Mozilla | MDN",
    "h1": "web_accessible_resources",
    "paragraphs": "Develop and launch modern apps with MongoDB Atlas, a resilient data platform.\nGet Started free\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nSometimes you want to package resources—for example, images, HTML, CSS, or JavaScript—with your extension and make them available to web pages and other extensions.\n\nNote: Until Firefox 105, extensions could access resources packaged in other extensions by default. From Firefox 105 onwards, to enable other extensions to access an extension's resources they must be included in this key.\n\nFor example, the Beastify example extension replaces a web page with an image of a beast selected by the user. The beast images are packaged with the extension. To make the selected image visible, the extension adds <img> elements whose src attribute points to the beast's image. For the web page to be able to load the images, they must be made web accessible.\n\nWith the web_accessible_resources key, you list all the packaged resources that you want to make available to web pages. You specify them as paths relative to the manifest.json file.\n\nNote that content scripts don't need to be listed as web accessible resources.\n\nIf an extension wants to use webRequest or declarativeNetRequest to redirect a public URL (e.g., HTTPS) to a page that's packaged in the extension, then the extension must list the page in the web_accessible_resources key.\n\nIn Manifest V2, web accessible resources are added as an array under the key, like this:\n\nIn Manifest V3, the web_accessible_resources key is an array of objects like this:\n\nEach object must include a \"resources\" property and either a \"matches\" or \"extension_ids\" property from the following properties:\n\nA list of extension IDs specifying the extensions that can access the resources. \"*\" matches all extensions.\n\nA list of URL match patterns specifying the pages that can access the resources. Only the origin is used to match URLs. Origins include subdomain matching. Paths must be set to /*.\n\nWhether resources to be accessible through the dynamic ID. The dynamic ID is generated per session and regenerated on browser restart or extension reload.\n\nSuppose your extension includes an image file at images/my-image.png, like this:\n\nTo enable a web page to use an <img> element whose src attribute points to this image, you would specify web_accessible_resources like this:\n\nThe file is then available using a URL like:\n\n<extension-UUID> is not your extension's ID. This ID is randomly generated for every browser instance. This prevents websites from fingerprinting a browser by examining the extensions it has installed.\n\nNote: In Chrome in Manifest V2, an extension's ID is fixed. When a resource is listed in web_accessible_resources, it is accessible as chrome-extension://<your-extension-id>/<path/to/resource>. In Manifest V3, Chrome can use a dynamic URL by setting use_dynamic_url to true.\n\nThe recommended approach to obtaining the URL of the resource is to use runtime.getURL passing the path relative to manifest.json, for example:\n\nThis approach gives you the correct URL regardless of the browser your extension is running on.\n\nweb_accessible_resources entries can contain wildcards. For example, the following entry would also work to include the resource at \"images/my-image.png\":\n\nIf you make a page web-accessible, any website may link or redirect to that page. The page should then treat any input (POST data, for example) as if it came from an untrusted source, just as a normal web page should.\n\nWeb-accessible extension resources are not blocked by CORS or CSP. Because of this ability to bypass security checks, extensions should avoid using web-accessible scripts when possible. A web-accessible extension script can unexpectedly be misused by malicious websites to weaken the security of other websites. Follow the security best practices by avoiding injection of moz-extension:-URLs in web pages and ensuring that third-party libraries are up to date.\n\nMake the file at \"images/my-image.png\" web accessible to any website and extension.\n\nMake the file at \"images/my-image.png\" web accessible to any website and extension.\n\nIt is recommended to only specify extension_ids or matches if needed. For example, if the resource only needs to be accessible to web pages at example.com:\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jul 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/documentation/develop/",
    "title": "Develop | Firefox Extension Workshop",
    "h1": "Bring your extension to life",
    "paragraphs": "Support your development workflow with these straightforward tools and guides.\n\nAll you need to create extensions for Firefox is a text editor and a version of Firefox to support your testing. Mozilla and the Firefox extension developer community have also created a number of extension development tools that can simplify the coding and testing of your extension.\n\nGet familiar with the webextension-polyfill library if you’re planning on developing for both Firefox and chromium based browsers.\n\nThis enables you to switch between the different Firefox and chromium based namespaces and asynchronous call handling methods for each type of browser.\n\nThe web-ext tool can help you by:\n\nHaving an exceptional user experience is crucial to attracting, and retaining, users of your extension.\n\nRememBear is a great example of an extension with an outstanding user experience.\n\nFocus on a slick onboarding flow that gets users up to speed with your extension quickly.\n\nIf your extension collects user data during onboarding, make sure you follow the best practices for collecting user data consent. And, it’s important that you request the right permissions.\n\nKeep your users engaged and follow the user experience best practices. And, don’t forget to build an accessible extension, so that everyone can make use of it.\n\nLastly, building a secure extension is fundamental to delivering an excellent user experience.\n\nUsers are less likely to install an extension if they don’t understand what it does and what value it adds to their browsing experience.\nFind out best practices for putting your best foot forward with your extension.\n\nTo offer your extension to Firefox for Android users, you need to consider some differences between Firefox for the desktop and Android.\n\nGet started with everything you need to know about developing for Firefox for Android.\n\nIf you develop Android apps, when you want to include a browser experience in your app you can take advantage of the browser engine that underpins Firefox using the GeckoView Extensions Android library.\n\nThe Firefox extension environment is highly compatible with chromium-based extension technology. Your extension might already be capable of running on Firefox, or need only a few changes.\n\nTest your extension’s compatibility and check out our porting guide to get started.\n\nTest and debug your code by temporarily installing it in Firefox.\n\nUnderstanding extensions and the Add-on ID will help you test more effectively. You will also want to test persistent and restart features along with permission requests.\n\nYou can use web-ext to automatically install and update your extension while making coding changes.\n\nContributors: caitmuenster \n\nLast update: caitmuenster Jul 09, 2019\n\nDevelop\n\nDevelop\n\nDevelop\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/documentation/publish/",
    "title": "Publish | Firefox Extension Workshop",
    "h1": "Distribute your extension to the right audience",
    "paragraphs": "Learn how to get your extension signed and distributed worldwide or to your enterprise.\n\nExtensions and themes need to be submitted for signing by Mozilla before they can be installed in release and beta versions of Firefox for use in the release and Beta versions of Firefox. Signing provides Firefox users with the assurance that an extension hasn’t been tampered with and gives Mozilla the ability to block malicious extensions.\n\nAfter you have coded and tested your add-on, take a few minutes to see that it needs to meet the policies in the Firefox Add-on Distribution Agreement and Add-on Policies. If your extension does not comply with these policies, it may not get a signature or it could be blocked after signing.\n\nWhen you are ready to submit your add-on, create an extension package either manually or using web-ext.\n\nOnce your extension is submitted, it is subject to review by Mozilla at any time. In order to review your extension, Mozilla add-on reviewers must be able to reproduce your build. If your extension makes use of code minifiers, tools that generate a single file from other files, template engines, or any other custom tool that pre-processes and generates file(s) to include in your extension, you are required to submit the source code for your extension.\n\nThere are three ways you can distribute your extension. They are:\n\nRegardless of what you choose, you’ll need to set up a developer account on addons.mozilla.org and host your extension to get it signed, even if you do not distribute it there. Just satisfy a few simple requirements and get your account up and running.\n\nIf you choose to not distribute on addons.mozilla.org, there are some things you should consider before you distribute it yourself.\n\nCheck out our publisher’s resources. You can:\n\nImprove your add-on's SEO and attract more users by creating an appealing listing for your extension.\n\nRegardless of how you plan to distribute your add-on, you will want to promote your extension.\n\nMozilla promotes a selection of Recommended Extensions that meet a high standard of security, utility, and user experience. If you’d like your extension to be included in the program, submit a nomination.\n\nMaking money from browser extensions is also something you might want to consider as your user base grows.\n\nIf you’re distributing to an enterprise running the ESR version of Firefox, and the administrator of the enterprise has disabled signing enforcement, then those users can install unsigned extensions. This means you do not need to submit your extension to addons.mozilla.org for signing.\n\nUsers of Developer Edition or Nightly can also disable Firefox's signing enforcement.\n\nContributors: caitmuenster \n\nLast update: caitmuenster Sep 13, 2021\n\nPublish\n\nPublish\n\nPublish\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/documentation/manage/",
    "title": "Manage | Firefox Extension Workshop",
    "h1": "Optimize and stay up-to-date",
    "paragraphs": "Manage your extension to keep it growing, accurate, and integrated with Firefox\n\nWe’re constantly improving Firefox and the add-on experience. Use this list of resources for publishers to stay up-to-date with Firefox news and developments.\n\nWhen you’re ready to improve your extension or receive suggestions for new features from your user community, you might decide to publish an update.\n\nBest practices for updating extensions\n\nAdd-ons are often the result of the work of a team of developers, which is why add-ons on AMO can have multiple authors.\n\nIf someone is using your code without your permission, please follow these instructions to file a DMCA Notice with Mozilla’s legal team to resolve the situation.\n\nKeep your user base growing regularly reviewing your listing to make sure it’s as appealing as it can be.\n\nHowever you choose to distribute your extension, you’ll want to promote your extension or theme.\n\nMozilla promotes a selection of Recommended Extensions that meet a high standard of security, utility, and user experience. If you’d like your extension to be included in the program, submit a nomination.\n\nMaking money from browser extensions is also something you might want to consider as your user base grows.\n\nSometimes, add-ons outlive their usefulness: features they provide may be added to Firefox, your product or service may evolve, or it could simply be easier to write a new extension than maintain your old one.\n\nHere’s how to Retire your extension gracefully.\n\nTags:  manage \n\nContributors: caitmuenster \n\nLast update: caitmuenster Jul 09, 2019\n\nManage\n\nManage\n\nManage\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/documentation/enterprise/",
    "title": "Enterprise | Firefox Extension Workshop",
    "h1": "Extensions for your enterprise",
    "paragraphs": "Firefox gives your enterprise a high-performance, standards compliant, manageable browser environment.\n\nExtensions give you the ability to complement standard browser features and provide richer interfaces to enterprise web applications.\n\nDeveloping extensions for your enterprise is straightforward – you can follow the standard extension development path. You can also add policy support to your extension to allow enterprises to preconfigure settings for your extension.\n\nSome Firefox enterprise policies might affect the installation, behavior, and update of extensions.\n\nExtensions for enterprise deployments of Firefox Extended Support Release (ESR) should be distributed outside of addons.mozilla.org.\n\nOnce your extension is developed and tested, you can use one of the enterprise distribution methods to install it in Firefox.\n\nTags:  enterprise \n\nContributors: caitmuenster mkaply \n\nLast update: mkaply Jul 09, 2019\n\nEnterprise\n\nEnterprise\n\nEnterprise\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/Contact_us",
    "title": "Contact us - Mozilla | MDN",
    "h1": "Contact us",
    "paragraphs": "Add video calling functionality to your website or app with Whereby’s powerful SDK.\nGet started\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nUse the links below to get help, to keep up to date with add-ons news, and to give us feedback.\n\nUse the Add-ons Discourse forum to discuss all aspects of add-on development and to request help.\n\nThe dev-addons mailing list was retired on December 1, 2020. You can view the dev-addons archives to see past discussions about the WebExtensions API and addons.mozilla.org.\n\nMatrix is an open, lightweight protocol for decentralized, real-time communications. For information on how to join Mozilla's Matrix instance, refer to the Matrix page on MozillaWiki.\n\nIf you discover an add-on security vulnerability, even if the add-on is not hosted on a Mozilla site, please notify us. We will work with the developer to correct the issue. Please report security vulnerabilities confidentially in Bugzillaor by emailing amo-admins@mozilla.com.\n\nIf you find a problem with the site, we'd love to fix it. Please file a bug report and include as much detail as possible.\n\nThis page was last modified on Mar 3, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://blog.mozilla.org/addons/",
    "title": "Mozilla Add-ons Community Blog",
    "h1": "Mozilla Add-ons Community Blog",
    "paragraphs": "MAR\n1\n2024\n\n1 response\n\nLike a lot of us during the pandemic lockdown, Shubham Bose found himself consuming more YouTube content than ever before. That’s when he started to notice all the unwanted oddities appearing in his YouTube search results — irrelevant suggested videos, shorts, playlists, etc. Shubham wanted a cleaner, more focused search experience, so he decided to do something about it. He built YouTube Search Fixer. The extension streamlines YouTube search results in a slew of customizable ways, like removing “For you,” “People also search for,” “Related to your search,” and so on. You can also remove entire types of content like shorts, live streams, auto-generated mixes, and more.\n\nThe extension makes it easy to customize YouTube to suit you.\n\nEarly versions of the extension were less customizable and removed most types of suggested search results by default, but over time Shubham learned that different users want different things in their search results. “I realized the line between ‘helpful’ and ‘distracting’ is very subjective,” explains Shubham. “What one person finds useful, another might not. Ultimately, it’s up to the user to decide what works best for them. That’s why I decided to give users granular control using an Options page. Now people can go about hiding elements they find distracting while keeping those they deem helpful. It’s all about striking that personal balance.”\n\nDespite YouTube Search Fixer’s current wealth of customization options (a cool new feature automatically redirects Shorts to their normal length versions), Shubham plans to expand his extension’s feature set. He’s considering keyword highlighting and denylist options, which would give users extreme control over search filtering.\n\nMore than solving what he felt was a problem with YouTube’s default search results, Shubham was motivated to build his extension as a “way of giving back to a community I deeply appreciate… I’ve used Firefox since I was in high school. Like countless others, I’ve benefited greatly from the ever helpful MDN Web Docs and the incredible add-ons ecosystem Mozilla hosts and helps thrive. They offer nice developer tools and cultivate a helpful and welcoming community. So making this was my tiny way of giving back and saying ‘thank you’.”\n\nWhen he’s not writing extensions that improve the world’s most popular video streaming site, Shubham enjoys photographing his home garden in Lucknow, India. “It isn’t just a hobby,” he explains. “Experimenting with light, composition and color has helped me focus on visual aesthetics (in software development). Now, I actively pay attention to little details when I create visually appealing and user-friendly interfaces.”\n\nDo you have an intriguing extension development story? Do tell! Maybe your story should appear on this blog. Contact us at amo-featured [at] mozilla [dot] org and let us know a bit about your extension development journey. \n\nCATEGORIES: featured addons\n\nDEC\n14\n2023\n\n6 responses\n\nWoo-hoo you did it! Hundreds of add-on developers heeded the call to make their desktop extensions compatible for today’s debut of a new open ecosystem of Firefox for Android extensions. More than 450 Firefox for Android extensions are now discoverable on the addons.mozilla.org (AMO) Android homepage. It’s a strong start to an exciting new frontier of mobile browser customization. Let’s see where this goes.\n\nAre you a developer who hasn’t migrated your desktop extension to Firefox for Android yet? Here’s a good starting point for developing extensions for Firefox for Android.\n\nIf you’ve already embarked on the mobile extension journey and have questions/insights/feedback to offer as we continue to optimize the mobile development experience, we invite you to join the discussion about top APIs missing on Firefox for Android.\n\nHave you found any Firefox for Android bugs? Do tell!\n\nTAGS: android\n\nCATEGORIES: mobile\n\nNOV\n28\n2023\n\n7 responses\n\nStarting December 14, 2023, extensions marked as Android compatible on addons.mozilla.org (AMO) will be openly available to Firefox for Android users.\n\n“We’ve been so impressed with developer enthusiasm and preparation,” said Giorgio Natili, Firefox Director of Engineering. “Just a few weeks ago it looked like we might have a couple hundred Android extensions for launch, but now we can safely say AMO will have 400+ new Firefox for Android extensions available on December 14. We couldn’t be more thankful to our developer community for embracing this exciting moment.”\n\nIn anticipation of the launch of open extensions on Android, we just added a link to “Explore all Android extensions” on AMO’s Android page to make it easy to discover new content. And just for fun and to offer a taste of what’s to come, we also released a couple dozen new open extensions for Android. You can find them listed beneath the Recommended Extensions collection on that AMO Android page. Try a few out!\n\nThere’s still time to make your desktop extension compatible with Firefox for Android if you want to be part of the December 14 launch. Senior Developer Relations Engineer Simeon Vincent recently hosted two webinars to help developers work through common migration hurdles. Here are recorded webinars from October (an introduction to mobile extension migration) and November (setup, testing, debugging).\n\nSimeon also hosts open “office hours” every Monday and Tuesday for anyone interested in signing up to receive 1:1 guidance on Firefox for Android extension development. Office hours run through December, so be sure to tap Simeon’s expertise while time remains.\n\nAre you a developer planning to make your desktop extension work with Firefox for Android by December 14? Do you like cool free t-shirts? Great! Then email us at firefox-android-addon-support [at] mozilla.com with a link to your extension’s AMO listing page and we’ll follow up with t-shirt order details. Better act fast though, we’ve only got 200 tees total and just a few remain.\n\nTAGS: android\n\nCATEGORIES: developers, mobile\n\nNOV\n1\n2023\n\n12 responses\n\nDuring the release cycle of Firefox 120, we’ll begin to see the emergence of dozens of new, openly available extensions on Firefox for Android on addons.mozilla.org (AMO). We’re taking a steady approach to opening up the mobile extension ecosystem to ensure Firefox for Android maintains strong performance standards while a vast new array of extensions are utilized for the first time in a mobile environment. If testing continues to progress well, we anticipate unveiling a fully open Firefox for Android extension ecosystem sometime in December. Stay tuned for details.\n\nFor developers interested in optimizing desktop extensions for Firefox for Android usage, now’s the perfect time to assess your extension and take necessary steps to make your extension part of the coming first wave of openly available extensions on Firefox for Android.\n\nWe anticipate strong interest from users excited to explore all the new ways they can customize Firefox for Android. Current trends indicate we’ll have at least 200+ new Firefox for Android extensions on AMO when open availability debuts in December. And while a couple hundred extensions is more variety than you’ll find on any other mobile browser, it is significantly fewer than the nearly 40,000 desktop Firefox extensions on AMO. So the opportunity for heightened discoverability with new users may be intriguing to some developers.\n\nIt’s also a great time for developers who are intrigued at the prospect of creating new ways Firefox for Android users will fundamentally experience the mobile web. Are there browsing problems unique to the mobile environment that web extensions can solve? How can we enhance mobile web experiences with extensions? How can extensions empower mobile users? It’s an open invitation to innovation.\n\nFor developers keen to learn more about making their desktop extensions compatible on Firefox for Android, here are some timely resources (in addition to Firefox Add-ons Discourse where you can hit us up anytime with questions)…\n\nTime: Wednesday, November 15 at 11am EDT\n\nSenior Developer Relations Engineer Simeon Vincent will host his second webinar dedicated to Firefox for Android extension development and desktop migration. The November 15 session will focus on Firefox for Android development setup steps like getting started with Android Studio, creating a virtual device for QA and getting Firefox Nightly readied for remote debugging.\n\nRegister for the livestream!\n\nCheck out our first Firefox for Android webinar from October.\n\nTime: Every Monday, Tuesday\n\nSimeon also hosts weekly open “office hours” for anyone interested in signing up to receive 1:1 guidance on Firefox for Android extension development. These open office hours are only scheduled to run through December, so don’t be shy to tap Simeon’s expertise as you prepare your extension for mobile release.\n\nSorry to bury the lede, but we’re also giving away this one of a kind “Early Add-opter” t-shirt to the first 200 developers who… 1) make their extension functional on Android; and 2) email us at firefox-android-addon-support [at] mozilla.com with a link to your extension’s AMO listing page. If your extension works as expected on Firefox for Android and you’re one of the first 200 to reach out we’ll be in touch with the t-shirt ordering details.\n\nCan you imagine yourself wearing this t-shirt, just chilling after you’ve made your desktop extension compatible on Firefox for Android? \n\nCATEGORIES: developers, mobile\n\nOCT\n5\n2023\n\n7 responses\n\nWe recently identified a bug in the addons.mozilla.org (AMO) external API that caused all signing requests to mark extension submissions as being Android compatible. A fix for this bug will be pushed on Thursday, October 12th.\n\nWhen the fix lands, the signing endpoint will stop marking extensions as being Android compatible by default, and instead check the extension’s manifest.json for a property in \"browser_specific_settings\" named “gecko_android”. If present, that object’s \"strict_min_version\" and \"strict_max_version\" properties will be used to set the Firefox for Android minimum and maximum values on AMO.\n\nThis change also affects community tools that send signing requests to AMO using the web API. This includes, but is not limited to:\n\nTo continue marking your extension as Android compatible on AMO, ensure that your manifest.json file includes a \"browser_specific_settings.gecko_android\" object. You can declare the minimum browser version supported using the \"strict_min_version\" properties of this object.\n\nTo stop marking your extension as Android compatible on AMO, ensure that your manifest.json file does not include a \"browser_specific_settings.gecko_android\" object.\n\nFor example, to signal that your extension works in Firefox for Android, you would include the following snippet in your extension’s manifest.\n\nYou may also want to check the version compatibility settings for your extension on AMO.\n\nTAGS: amo, android, upload API\n\nCATEGORIES: developers, mobile, webextensions\n\nSEP\n27\n2023\n\n21 responses\n\nIn August we encouraged developers to start preparing their desktop extensions for Firefox Android open availability on addons.mozilla.org (AMO). The project is progressing well and we’re on track to launch the open mobile ecosystem on AMO in December. We have more infrastructure development and testing to complete in the coming weeks, but as we move toward release we’ll keep you informed of the project’s status right here on this blog, add-ons forums, and social channels.\n\nTo help our developer community prepare for Firefox Android open extension availability on AMO — and to ensure Firefox Android users have an exciting selection of extensions to choose from — we’ve compiled a list of popular desktop extensions (with mobile API compatibility) we’re inviting the add-ons community to help test on Firefox Android. If you’re intrigued to try some new extensions on your Firefox Android phone and offer feedback, we’d love to hear your thoughts.\n\nTest extensions are only currently discoverable on AMO via 119 Beta and 120 Nightly versions of Firefox Android. If you’re not already on Beta or Nightly, please follow these links for installing Firefox Android Beta and Nightly.\n\nOnce you’re ready to roll with Firefox Android (Beta/Nightly) on your phone, just follow these simple test steps:\n\nThen feel free to repeat testing with as many other test extensions as you like. Have fun with it! The feedback you provide will be extremely helpful to developers hoping to optimize their desktop extensions for Android usage.\n\nIf you have a desktop extension you want to prepare for Android availability on AMO, a good place to start is checking your desktop extension’s APIs against those supported for Android. It is also important that developers migrate to non-persistent background pages. In order to mark your extension as compatible with Firefox Android, add the gecko_android key inside browser_specific_settings (more info) in your manifest.json file (this is also a requirement when submitting your extension using the AMO API, e.g. with the web-ext tool). During this period you are welcome to update your extension on AMO to address issues while running in Firefox Android; and mark your extension as Android compatible to be ready for discoverability on AMO in December.\n\nPlease note — once you’re ready to test the mobile version of your extension, create a collection on AMO and test it on Firefox for Android Nightly (you’ll need to make a one-time change to Nightly’s advanced settings; please see the “Enable general extension support setting in Nightly” section of this post for details). If you’d prefer to polish your extension before publishing it on AMO, you can also debug and run the extension with web-ext.\n\nIt’s been exciting to see so many developers embrace this moment to make their desktop extensions available for a new mobile audience. When AMO opens the general availability of Android extensions in December, Firefox Android users will be thrilled at all of the innovative ways they’ll be able to customize their mobile browsing experience.\n\nIf you’re a developer with technical questions about mobile extension migration, please visit our support forum for Firefox Android extensions. You can also book office hours support every Monday and Tuesday.\n\nCATEGORIES: developers, mobile\n\nAUG\n10\n2023\n\n52 responses\n\nIn the coming months Mozilla will launch support for an open ecosystem of extensions on Firefox for Android on addons.mozilla.org (AMO). We’ll announce a definite launch date in early September, but it’s safe to expect a roll-out before the year’s end. Here’s everything developers need to know to get their Firefox desktop extensions ready for Android usage and discoverability on AMO…\n\nFor the past few years Firefox for Android officially supported a small subset of extensions while we focused our efforts on strengthening core Firefox for Android functionality and understanding the unique needs of mobile browser users. Today, Mozilla has built the infrastructure necessary to support an open extension ecosystem on Firefox for Android. We anticipate considerable user demand for more extensions on Firefox for Android, so why not start optimizing your desktop extension for mobile-use right away?\n\n“There is so much creative potential to unlock within the mobile browser space. Mozilla wants to provide developers with the best support we can so they’re equipped and empowered to build modern mobile WebExtensions.” — Giorgio Natili, Firefox Director of Engineering\n\n\nTo support our ecosystem of extension developers, we will create additional guides, resources and host community events to support your transition to a managed multi-process environment like Android.\n\nWe recently introduced support for multi-process in Firefox for Android Nightly. This means extensions are no longer hosted in the main process as Firefox’s user interface. This is a key consideration since Android is prone to shutting down resource-intensive processes, such as extensions. To mitigate the risk of unexpected extension termination, we’ve introduced event page architecture to be non-persistent and more resilient to process termination. Thus we strongly encourage developers to transition from persistent backgrounds to non-persistent Event pages to improve their extension’s stability. In summary, this means:\n\nOnce you’re ready to test the mobile version of your extension, create a collection on AMO and test it on Firefox for Android Nightly (note you’ll need to make a one-time change to Nightly’s advanced settings; please see the “Enable general extension support setting in Nightly” section of this post for details). If you’d prefer to polish your extension before publishing it on AMO, you can also debug and run the extension with web-ext.\n\nThis is an exciting time for developers seeking to expand the reach of their desktop extensions into the mobile Android space. For community support and input, you’re welcome to join the conversation on Firefox Add-ons Discourse.\n\nCATEGORIES: developers, mobile\n\nMAY\n17\n2023\n\n3 responses\n\nThe declarativeNetRequest (DNR) extension API is now available to all extensions starting from Firefox 113, released last week. Extensions with functionality that can be expressed in terms of declarative rules are highly encouraged to transition to the DNR API. Documentation is available at declarativeNetRequest (MDN).\n\nDNR allows extensions to declare rules that describe how the browser should handle network requests. These rules enable Firefox to process network requests without involving the extension further. In comparison with the blocking webRequest API, this offers the following benefits:\n\nSome extensions require more flexibility than DNR offers, and we are committed to supporting both the DNR and blocking webRequest APIs to ensure that Firefox users have access to the best privacy tools available.\n\nWhat’s next\n\nThe DNR implementation is not final. We are working on further optimizations and additional functionality, which are tracked as dependencies of bug 1687755. Our work is not limited to Firefox; where it makes sense we try to establish cross-browser consensus in the WebExtensions Community Group (WECG), as seen at WECG issues with topic:dnr.\n\nAre you interested in experimenting with the declarativeNetRequest API? Try out one of the examples at https://github.com/mdn/webextensions-examples/tree/main/dnr-dynamic-with-options. New to Firefox extension development? See the Test and debug section of the Extension Workshop to get started.\n\nCATEGORIES: developers, webextensions\n\nDEC\n15\n2022\n\n8 responses\n\nDec. 12, 2023 UPDATE: Please see this post for the most updated information around extensions on Firefox for Android.\n\n*************************************\n\nAs we continue to develop extensions support on Firefox for Android, we’re pleased to announce new additions to our library of featured Android extensions. To access featured extensions on Firefox for Android, tap Settings -> Add-ons.\n\nBased on currently available APIs, performance evaluations, and listening to requests from the Mozilla community, here are five new extensions now available to Firefox for Android users…\n\nMozilla’s own Firefox Relay is now available for mobile usage. The extension lets you easily generate email masks that will forward messages to your authentic email while hiding your address from unwanted spam, or worse, hackers.\n\nTampermonkey on Android.\n\nOne of the most popular userscript managers makes its way to mobile. Tampermonkey top features include automatic update checks, an intuitive display of running scripts, plus browser and cloud storage sync.\n\nHave you ever wanted your news or other web pages (even PDF’s) read aloud so your hands and eyes are free to focus on other things? Read-Aloud: A Text to Speech Voice Reader can now accommodate you on Android — in 40+ languages.\n\nMore than just an effective ad blocker, AdNauseum punches back against privacy invasive ad tech by clicking a bunch of blocked ads in the background so advertisers can’t build an accurate profile of your interests.\n\nA simple extension that provides a powerful privacy feature — ClearURLs automatically strips away tracking elements from web links you open.\n\nBy following these instructions you can now create your own custom extension collections on Firefox for Android Beta (previously, collections were only available on Nightly). Name the collection anything you like, so long as there aren’t any spaces in its title. When creating your collection, you’ll see a number in the Custom URL field; this is your user ID. You’ll need the collection name and user ID to configure Beta in the following way:\n\nOnce created, simply add extensions to your collection. Each collection generates a custom URL so you’re to share it with others.\n\nAbsolutely. Right now we’re focused on implementing Manifest version 3 (MV3) for Firefox desktop (i.e. wide ranging foundational changes to WebExtensions API). In 2023 we’ll begin work on the mobile adoption of MV3. Though we’re still early in planning, MV3 will certainly offer a number of advances for mobile extensions, such as elegant handling of process restarts and improved security by splitting extensions into their own processes, while also retaining critical MV2 features that support privacy and ad blocking capabilities. Indeed our goal is to design MV3 for mobile in such a manner we’re able to open up the discoverability of mobile extensions beyond the short list available today. As plans take shape, we’ll be sure to keep you informed. In the meantime you’re welcome to join conversations about extensions development on Firefox Add-ons Discourse.\n\nTAGS: android\n\nCATEGORIES: featured addons, mobile\n\nNOV\n17\n2022\n\n11 responses\n\nStarting November 21, 2022 add-on developers are welcome to upload their Firefox Manifest version 3 (MV3) compatible extensions to addons.mozilla.org (AMO) and have them signed as MV3 extensions. Getting an early jump on MV3 signing enables you to begin testing your extension’s future functionality on Nightly to ensure a smooth eventual transition to MV3 in Firefox.\n\nTo be clear, Firefox will continue to support MV2 extensions for the foreseeable future, even as we welcome MV3 extensions in the release to general availability in Firefox 109 (January 17, 2023). Our goal has been to ensure a seamless transition from MV2 to MV3 for extension developers. Taking a gradual approach and gathering feedback as MV3 matures, we anticipate opportunities will emerge over time to modify our initial MV3 offering. In these instances, we intend to take the time necessary to make informed decisions about our approach.\n\nTowards the end of 2023 — once we’ve had time to evaluate and assess MV3’s rollout (including identifying important MV2 use cases that will persist into MV3) — we’ll decide on an appropriate timeframe to deprecate MV2. Once this timeframe is established, we’ll communicate MV2’s closure process with advance notice. For now, please see this guide for supporting both MV2 and MV3 versions of your extension on AMO.\n\nFirefox MV3 offers simplified and consolidated APIs, enhanced security and privacy mechanisms, and functionality to better support mobile platforms. As we continue to collaborate with other browser vendors and the developer community to shape MV3, we recognize cross-browser compatibility as a fundamental consideration. That said, we’re also implementing distinct elements to suit Firefox’s product and community needs. We want to give extension developers creative flexibility and choice, while ensuring users maintain access to the highest standards of extension customization and security. Firefox MV3 stands apart from other iterations of MV3 in two critical ways:\n\nOver subsequent releases next year, we’ll continue to expand Firefox MV3 compatibility.\n\nMV3 also ushers an exciting user interface change in the form of the new extensions button (already available on Firefox Nightly). This will give users direct control over which extensions can access specific web sites.\n\nThe extensions button will give Firefox users direct control over website specific extension permissions.\n\nUsers are able to review, grant, or revoke MV3 extension access to any website. MV2 extensions will display in the button interface, but permissions access is unavailable. Please see this post for more information about the new extensions button.\n\nIf you’re planning to migrate your MV2 extension to MV3, there are steps you can take today to get started. We always encourage feedback from our developer community, so don’t hesitate to get in touch:\n\nTAGS: manifest v3\n\nCATEGORIES: developers, webextensions\n\nVisit the gallery\n\nReturn to top\nMozilla\n\nExcept where otherwise noted, content on this site is licensed under the Creative Commons Attribution Share-Alike License v3.0 or any later version."
  },
  {
    "url": "https://discourse.mozilla.org/c/add-ons/35",
    "title": "Latest Add-ons topics - Mozilla Discourse",
    "h1": "N/A",
    "paragraphs": ""
  },
  {
    "link": "https://chat.mozilla.org/#/room/%23addons:mozilla.org",
    "error": "Navigation timeout of 30000 ms exceeded"
  },
  {
    "url": "https://monitor.mozilla.org/?utm_medium=mozilla-websites&utm_source=mdn-banner&utm_campaign=mdn-xsell&utm_content=banner-placement-housead-monitor-b-na",
    "title": "Mozilla Monitor",
    "h1": "N/A",
    "paragraphs": "We scan data breaches to see if your data has been leaked and give you steps to fix it.\n\nOur mission is to put control of your personal data back in your hands. We’ll help you resolve data breaches and keep your info private — and we’ll respect your privacy in the process.\n\nData leaks are unfortunately part of our digital lives. Your passwords, contact details, financial information, and other personal info can be exposed, putting you at risk of identity theft.\n\nScan your email to get started\n\nSince 2018, we’ve helped people in ⁨237⁩ countries protect their data when it has been exposed.\n\nAS SEEN IN\n\nWe believe in your right to privacy, so data breach monitoring protection is always free.\n\nTake back control of your data"
  },
  {
    "url": "https://developer.mozilla.org/en-US/advertising",
    "title": "Advertise with us | MDN",
    "h1": "Tell it better",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nAt MDN, we champion user privacy and we stand by Mozilla's Ad targeting guidelines. We pride ourselves with an ethical advertising approach that ensures ads are context-based, free from tracking pixels, and don't involve personal data sharing.\n\nWhile we understand that advertisers rely on attribution to gauge campaign effectiveness, we also find that current methods pose privacy concerns. In line with our vision of protecting user privacy and personal data, Mozilla is part of a working group to develop Interoperable Private Attribution (IPA), a privacy-preserving attribution solution. We aim to enable attribution without tracking, enhancing ad quality and value.\n\nUntil this becomes a reality, we are working with advertising partners who support our privacy goals. For now, that means collaborating without attribution and developing a better way together. Join us in this journey!\n\nWe collaborate with vetted advertisers who share our vision for web development. We display at most two static ads per page. We offer exclusive opportunities for prominent homepage visibility, providing advertisers a unique way to capture our audience's attention. We are also happy to collaborate on writing and publishing sponsored content on our blog.\n\nMDN is a go-to resource for over 17 million web developers monthly, providing open-source documentation on CSS, HTML, JavaScript, and Web APIs. We boast 90% customer satisfaction and offer comprehensive learning materials for beginners, who make up about 10% of our audience.\n\nReady to advertise on MDN? Complete this form, and we'll respond shortly. Discover more about Mozilla's Ad targeting guidelines and Privacy policy.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/plus?ref=nope#subscribe",
    "title": "MDN Plus",
    "h1": "More MDN. Your MDN.",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nNo need to scroll through page after page to find your answers. Introducing an AI assistant that can answer all your web development questions in real time. Powered by OpenAI GPT-3.5 and GPT-4.\n\nYour playground to learn and share your amazing work with the world. By simply logging in, you can now spread your creativity far and wide.\n\nThe Web doesn't have a changelog, but MDN can help. You can personalize and filter compatibility changes based on browsers or the tech category you are interested in whether that is JavaScript, CSS, etc.\n\nNo more haphazard hunting through the vast virtual library: unleash your inner curator and collect your favorite articles in one place for convenient consultation.\n\nTaking your projects beyond the nearest wifi signal? Say goodbye to inaccessible pages or cluttered tabs. With MDN Plus, have the fully navigable resources of MDN at your disposal even when offline.\n\nSupport MDN and enjoy a focused, ad-free experience alongside other features such as curated collections, custom web platform updates, offline access, and more. Subscribers to paid tiers of MDN Plus have the option to browse MDN without ads.\n\nFree\n\nIncludes:\n\nUS$5.00\n/month\nBilled monthly\n\nIncludes unlimited access to:\n\nUS$10.00\n/month\nBilled monthly\n\nIncludes unlimited access to:\n\n* Do you need MDN Plus for your company? Let us know and we’ll get back to you when it becomes available.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.chrome.com/docs/extensions/reference/",
    "title": "Extensions / Reference  |  Chrome for Developers",
    "h1": "N/A",
    "paragraphs": "developer.chrome.com uses cookies to deliver and enhance the quality of its services and to analyze traffic. If you agree, cookies are also used to serve advertising and to personalize the content and advertisements that you see. Learn more."
  },
  {
    "url": "https://extensionworkshop.com/documentation/develop/porting-a-google-chrome-extension/",
    "title": "Porting a Google Chrome extension | Firefox Extension Workshop",
    "h1": "Porting a Google Chrome extension",
    "paragraphs": "The browser extension APIs are designed to promote cross-browser compatibility among extensions. The WebExtension APIs is therefore, to a large extent, code-compatible with the extension API supported by Google Chrome and Opera. Extensions written for these browsers will, in most cases, run in Firefox with just a few changes. Almost all of the WebExtension APIs provide support for callback functions under the chrome namespace, the same as Chrome. The only APIs that aren't supported in the chrome namespace are those that are intentionally incompatible with Chrome. In those cases, the API documentation page states that support is provided only in the browser namespace. The process of porting an extension from Chrome or Opera is, therefore, relatively straightforward:\n\nIf you use the Chrome command-line option for loading an unpacked extension, check out the web-ext tool which automates temporary installation in Firefox for development.\n\nTags:  webextensions \n\nContributors: jennyevans blossomica aseffasamson rebloor Uemmra3 Makyen wbamberg andrewtruongmoz AndreiPetcu kumar303 yfdyh000 \n\nLast update: jennyevans May 19, 2019\n\nDevelop\n\nDevelop\n\nDevelop\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#guides",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#references",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#firefox_workflow",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/",
    "title": "Firefox Extension Workshop | Get help creating & publishing Firefox extensions.",
    "h1": "Extend the Web",
    "paragraphs": "Get help creating and publishing Firefox add-ons that make browsing smarter, safer, and faster.\n\nYou’ll find the resources you need, whether you’re getting started with extension development, preparing to launch your innovation, or developing a custom enterprise solution.\n\nGet your great idea into the hands of millions of Firefox users. Join an international community of developers. Be supported every step of the way. And, when you build for Firefox first, it’s easy to port your extension to other browsers, saving you valuable development time.\n\nLearn more about extensions\n\nYour extension can control browser tabs. Use the API to open, close, move, hide, and perform other tab management actions.\n\nLearn more about tabs\n\nUse Firefox's powerful built-in search capabilities to open up the web for users from within your own extension.\n\nLearn about enhancing content\n\nThink the browser is missing a feature, such as a built-in calculator, music streaming, or language translation? Add a toolbar button to expose your extension's new capabilities.\n\nVisit example\n\nView more extension code examples\n\nExplore live extensions\n\nAn extension is a simple collection of files that modify the browser’s appearance and behavior. It can add user interface elements, alter content, or perform background tasks that enhance browsing.\n\nLearn more about extension anatomy\n\nManifest.json\n\nManifest.json\n\nAdd toolbar buttons, menu choices, and—only in Firefox—sidebars to display additional content. Manage tab behavior and create pop-up windows that respond to user events.\n\nLearn more\n\nChange webpage content. Remove ads, highlight key words, and reformat elements for readability.\n\nLearn more\n\nManage long-term configuration beyond the current tab, and respond to user events such as button clicks and menu selections.\n\nLearn more\n\nIt's easy to create your cross-browser extension for Firefox. Where your development journey begins depends on your skill and experience.\n\nMDN web docs will onboard you to the basics. With tutorials from simple user interface changes to complex event handling, MDN covers the structure and API behind extensions. Once you know the fundamentals, come back here to learn how Firefox takes extension development to the next level.\n\nLearn the fundamentals on MDN\n\nIf you know the basics of extension development, you’re ready to create an extension for Firefox. We’ve got all the resources you need right here. Learn about cross-browser development. Get tips on testing. Make user updates smooth and painless.\n\nLearn\n\nDevelop\n\nTest & Debug\n\nPublish\n\nManage\n\nMozilla takes the safety and privacy of its users very seriously. Be sure to review and follow these practices and policies so you can make your great idea a reality.\n\nLearn about security best practices\n\nLearn about our policies\n\nFirefox is at the forefront of cross-browser compatibility. Firefox add-ons are built using the WebExtensions API, so your creation will be accessible to users no matter what browser they use.\n\nLearn about browser differences\n\nPort a Google Chrome Extension\n\nSee if your extension works in Firefox. Simply upload your .crx file.\n\nTest your extension\n\nWhen you build on Firefox, you build with a community of add-on developers. And they’re eager to share their expertise and answer your questions.\n\nAsk questions in the forum\n\nEmail the community\n\nLearn more about the community\n\nLearn about enhancing the API\n\n2024/03/01\n\nLike a lot of us during the pandemic lockdown, Shubham Bose found himself consuming more YouTube content than ever before. That’s when he started to notice all the unwanted oddities appearing in his YouTube search results — irrelevant suggested videos, …\n\nThe post Developer Spotlight: YouTube Search Fixer appeared first on .\n\nContinue reading\n\n2023/12/14\n\nWoo-hoo you did it! Hundreds of add-on developers heeded the call to make their desktop extensions compatible for today’s debut of a new open ecosystem of Firefox for Android extensions. More than 450 Firefox for Android extensions are now discoverable …\n\nThe post A new world of open extensions on Firefox for Android has arrived appeared first on .\n\nContinue reading\n\n2023/11/28\n\nStarting December 14, 2023, extensions marked as Android compatible on addons.mozilla.org (AMO) will be openly available to Firefox for Android users. “We’ve been so impressed with developer enthusiasm and preparation,” said Giorgio Natili, Firefox Director of Engineering. “Just a few …\n\nThe post Open extensions on Firefox for Android debut December 14 (but you can get a sneak peek today) appeared first on .\n\nContinue reading\n\nVisit add-ons blog\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://discourse.mozilla.org/c/add-ons/35",
    "title": "Latest Add-ons topics - Mozilla Discourse",
    "h1": "N/A",
    "paragraphs": ""
  },
  {
    "url": "https://matrix.to/#/!CuzZVoCbeoDHsxMCVJ:mozilla.org?via=mozilla.org&via=matrix.org&via=humanoids.be",
    "title": "You're invited to talk on Matrix",
    "h1": "N/A",
    "paragraphs": "Preview this link using the mozilla.org homeserver (privacy policy), use another server or continue without a preview.\n\nThis invite uses Matrix, an open network for secure, decentralized communication."
  },
  {
    "url": "https://wiki.mozilla.org/Matrix",
    "title": "403 Forbidden",
    "h1": "403 Forbidden",
    "paragraphs": ""
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Firefox_workflow_overview",
    "title": "Firefox workflow overview - Mozilla | MDN",
    "h1": "Firefox workflow overview",
    "paragraphs": "Your next revenue stream. Build apps and reach over 180K customers on the monday.com app marketplace.\nStart building\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\n* Or distribute your extension for sideloading, desktop apps, or in an enterprise.\n\nHave an extension you want to bring to Firefox? We provide advice, guidelines, and tools to help making make porting straightforward. To get started, visit Porting a Google Chrome extension.\n\nThis page was last modified on Mar 7, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_manifests",
    "title": "Native manifests - Mozilla | MDN",
    "h1": "Native manifests",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.Mozilla ads\n\nFast, secure and built by the leader in internet privacy. Get a VPN from a name you can trust.\nMozilla ads\n\nNative manifests are specially formatted JSON files that are provisioned on the user's computer by some means outside the extension installation process. For example, a native manifest might be provisioned by a device administrator or by a native application installer.\n\nThere are three different types of native manifest:\n\nFor all native manifests, you need to arrange things so the browser can find the manifest. The section on manifest location describes these rules.\n\nThe native messaging manifest contains a single JSON object with the following properties:\n\nName of the native application.\n\nThis must match the name passed into runtime.connectNative() or runtime.sendNativeMessage() by the extension.\n\nOn MacOS and Linux, it must also match the native messaging manifest's filename (excluding the .json extension).\n\nOn Windows, it must match the name of the registry key you create, that contains the location of the native messaging manifest.\n\nThe name must match the following regular expression: \"^\\w+(\\.\\w+)*$\". This means that it may only contain (lowercase or uppercase) alphanumeric characters, underscores, and dots. It may not start or end with a dot, and a dot cannot be followed by another dot.\n\nPath to the native application.\n\nOn Windows, this may be relative to the manifest itself. On MacOS and Linux it must be absolute.\n\nDescribes the method used to connect the extension with the app.\n\nCurrently, only one value can be given here, \"stdio\", which indicates that messages are received by the app using standard input (stdin) and sent using standard output (stdout).\n\nAn array of Add-on ID values. Each value represents an extension which is allowed to communicate with this native application.\n\nNote that this means you will probably want to include the browser_specific_settings key in your extension's manifest.json file, so you can set an explicit ID during development.\n\nFor example, here's a manifest for the ping_pong native application:\n\nThis allows the extension whose ID is ping_pong@example.org to connect, by passing the name ping_pong into the relevant runtime API function. The application itself is at /path/to/native-messaging/app/ping_pong.py.\n\nThe managed storage manifest contains a single JSON object with the following properties:\n\nThe ID of the extension that can access this storage, given as the ID you've specified in the extension's browser_specific_settings key.\n\nThis must be \"storage\".\n\nA JSON object that may contain any valid JSON values, including strings, numbers, booleans, arrays, or objects. This will become the data in the browser.storage.managed storage area.\n\nFor example:\n\nGiven this JSON manifest, the favourite-color-examples@mozilla.org extension could access the data using code like this:\n\nThe PKCS #11 manifest is a file containing a JSON object with the following properties:\n\nName of the PKCS #11 module.\n\nThis must match the name used in the pkcs11 API.\n\nOn MacOS and Linux, it must also match the manifest's filename (excluding the extension).\n\nOn Windows, it must match the name of the registry key you create, which contains the location of the manifest.\n\nThe name must match the following regular expression: \"^\\w+(\\.\\w+)*$\". This means that it may only contain lowercase alphanumeric characters, underscores and dots. It may not start or end with a dot, and a dot cannot be followed by another dot.\n\nDescription of the module.\n\nThis is used to set the friendly name for the module in the browser's UI (for example, the \"Security Devices\" dialog in Firefox).\n\nPath to the module.\n\nOn Windows, this may be relative to the manifest itself. On MacOS and Linux it must be absolute.\n\nAn array of Add-on ID values. Each value represents an extension which is allowed to interact with the module.\n\nNote: This means you will probably want to include the browser_specific_settings key in your extension's manifest.json file, so you can set an explicit ID during development.\n\nFor example:\n\nGiven this JSON manifest, saved as my_module.json, the my-extension@mozilla.org extension could install the security module at /path/to/libpkcs11testmodule.dylib using code like this:\n\nOn Linux and macOS, you need to store the manifest in a particular place. On Windows, you need to create a registry key that points to the manifest's location.\n\nThe detailed rules are the same for all the manifest types, except that the penultimate component of the path identifies the type of manifest. The examples below show the form for each of the three different types. In all the examples, <name> is the value of the name property in the manifest.\n\nFor global visibility, create a registry key with the following name:\n\nThe key should have a single default value, which is the path to the manifest.\n\nWarning: As of Firefox 64, the 32-bit registry view Wow6432Node will be checked first for these keys, followed by the \"native\" registry view. Use whichever is appropriate for your application.\n\nFor Firefox 63 and older: This key should not be created under Wow6432Node, even if the app is 32-bit. Previous versions of the browser will always look for the key under the \"native\" view of the registry, not the 32-bit emulation. To ensure that the key is created in the \"native\" view, you can pass the KEY_WOW64_64KEY or KEY_WOW64_32KEY flags into RegCreateKeyEx. See Accessing an Alternate Registry View.\n\nFor per-user visibility, create a registry key with the following name:\n\nThe key should have a single default value, which is the path to the manifest.\n\nFor global visibility, store the manifest in:\n\nFor per-user visibility, store the manifest in:\n\nFor global visibility, store the manifest in either:\n\nor:\n\nFor per-user visibility, store the manifest in:\n\nThis page was last modified on Aug 2, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/documentation/develop/temporary-installation-in-firefox/",
    "title": "Temporary installation in Firefox | Firefox Extension Workshop",
    "h1": "Temporary installation in Firefox",
    "paragraphs": "This article describes how you can temporarily install an extension in Firefox for testing and debugging. The extension stays installed until you remove it or restart Firefox.\n\nFor extension development, automate the processes described on this page by using web-ext.\n\nNote that this is not how end-users should install add-ons in Firefox. End-users install add-ons by downloading and opening packaged add-ons that have been signed by Mozilla. To learn how you get an add-on packaged and signed, see Publishing your extension.\n\nTo install an extension temporarily:\n\nThe extension installs and remains installed until you remove it or restart Firefox.\n\nTo reload the extension, click \"Reload\":\n\nThis:\n\nIf you use the command line for development, check out web-ext. It automates the temporary installation and automatically reloads your extension when its source code changes.\n\nAn extension can detect whether it was installed from about:debugging, rather than as a signed extension downloaded from addons.mozilla.org. It does this by listening for the runtime.onInstalled event, and checking the value of details.temporary.\n\nThe temporary installation of an extension doesn’t fully mimic the behavior of a signed extension. For example, if the extension makes installation time permission requests, these are not displayed as part of the temporary installation process. Also, features, such as local storage, persist even if the extension is removed and the browser restarted.\n\nFor information on how to address these situations, see Test permission requests and Testing persistent and restart features.\n\nTags:  webextensions \n\nContributors: caitmuenster ldevernay rebloor Abhro wbamberg devSchnitzel andrewtruongmoz hellosct1 kumar303 Rob--W \n\nLast update: rebloor Jun 02, 2023\n\nDevelop\n\nDevelop\n\nDevelop\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/documentation/develop/debugging/",
    "title": "Debugging | Firefox Extension Workshop",
    "h1": "Debugging",
    "paragraphs": "This article explains how to use the Firefox developer tools to debug extensions.\n\nAn extension can consist of several components—background scripts, popups, options pages, content scripts, sidebars, and alike—and you'll use slightly different workflows to debug each component. Each component has a section in this article, and you can read each section in isolation. We'll begin by introducing the developer tools, which you'll use to debug all the pieces of your extension.\n\nYou use an implementation of the developer tools called Toolbox to debug extensions. To open Toolbox for an extension:\n\nA new tab opens showing Inspector in the Toolbox.\n\nTo debug your extension, you'll use:\n\nThis console shows messages from your background script and extension pages; other logs may appear elsewhere.\nThere is an overview of all relevant places to look for messages at Viewing log output.\n\nFor much of the debugging work, it's useful to be able to view Console with Inspector or Debugger. You do this using the split console, press esc to activate this mode.\n\nYou can now drag the toolbox tab to a separate window, so you can place it alongside the window where you're executing the extension.\n\nYour extension can generate log messages, e.g. with the Console API or by triggering (uncaught) errors.\n\nLog messages can usually be viewed via the Console of the context where the script runs.\nThe Developer tools toolbox at about:debugging shows log messages from extension scripts. For specific cases, see:\n\nLog messages from content scripts can be viewed in the developer tools of the tab where the content script runs instead of about:debugging, see:\n\nLog messages not associated with an extension script, such as the stderr output of the nativeMessaging API\ncan only be viewed via the Browser Console. This console contains messages from the whole browser, including your and other extensions.\nIt occasionally contains more detailed information about errors reported to your extension. For more information, see:\n\nWe use the notify-link-clicks-i18n extension example to illustrate the debugging features relevant to background scripts. This example is in the webextensions-examples repository.\n\nBackground scripts enable an extension to monitor and react to events in the browser, such as navigating to a new page, removing a bookmark, or closing a tab. These scripts can be persistent or non-persistent. Persistent background scripts remain loaded for the lifetime of the extension. In contrast, non-persistent background scripts load when needed to respond to an event and unloaded when they become idle. Non-persistent background scripts are recommended because they consume less of the browser's resources.\n\nBackground scripts are loaded inside an invisible background page: by default, this is an empty HTML document, but you can specify a custom page and define it as the background page using the manifest.json background key.\n\nTo debug background scripts, use the Toolbox Debugger in the split console view so you can view the Console below Debugger.\n\nTo get started, open your background script in Sources.\n\nAs you run your extension, the Console displays logged output, including calls to console.log() made by the extension's background scripts and any errors the browser raises as it executes these scripts. Note that the console shows all errors raised by the browser, not just errors related to your extension's code.\n\nWhen you debug a non-persistent background script, the background script won't go idle while the toolbox is open. However, if you need to terminate the background page, you can do so in about:debugging.\n\nFor example, the notify-link-clicks-i18n example extension logs a message from its background script when it receives a message from one of its content scripts.\n\nUsing the Console command line, you can access and modify the objects created by your background scripts. For example, you can call the notify() function:\n\nIn the Debugger you can set breakpoints, step through code, modify the extension's state, and do everything else you'd expect to be able to do in a debugger.\n\nFor more information about using the debugger, see the Debugger guide.\n\nWe use the favourite-colour extension example to illustrate the debugging features relevant to options pages. This example is in the webextensions-examples repository.\n\nAn options pages is an HTML page shown when the user accesses your extension's preferences in Add-ons Manager, either by opening Add-ons Manager themselves or using a link provided in your extension. You use an options page to enable the user to set and save options and settings that affect the behavior of your extension. Options pages display in an iframe in Add-ons Manager.\n\nTo debug options pages, use the Toolbox Debugger in the split console view so you can view the Console below Debugger.\n\nTo get started:\n\nIn the Debugger you can set breakpoints, step through code, modify the extension's state, and do everything else you'd expect to be able to do in a debugger. Any messages logged by your code display in Console.\n\nTo debug the options page's HTML and CSS, point the tools at the iframe that hosts the page. To do this:\n\nFor more information about using Inspector, see the Inspector guide.\n\nWe use the beastify extension example to illustrate the debugging features relevant to popups. This example is in the webextensions-examples repository.\n\nPopups are dialogs attached to browser or page actions. Popups are specified using an HTML document that can include CSS and JavaScript, which define styling and behavior.\n\nTo debug popups, use the Toolbox Debugger in the split console view so you can view the Console below Debugger.\n\nTo debug a popup it needs to be visible (so that its HTML document is loaded). However, having opened a popup, if you click outside the popup it closes and its code unloads. This would appear to make debugging rather difficult. To overcome this challenge, in the options menu, click Disable Popup Auto-Hide.\n\nNow, when you open a popup it stays open and its code remains loaded.\n\nDisable popup auto-hide also applies to built-in browser popups, such as the options menu. The setting doesn't persist across sessions. When you close the window, the setting reverts to auto-hide popups.\n\nInternally, this option toggles the ui.popup.disable_autohide preference, which you can toggle manually from about:config.\n\nWith the popup open, its JavaScript sources are listed in Debugger. In the Debugger you can set breakpoints, step through code, modify the extension's state, and do everything else you'd expect to be able to do in a debugger. Any messages logged by your code display in Console.\n\nTo inspect the popup's HTML and CSS, use Inspector in the split console view so you can view the Console below Inspector. You can review and modify the popup's HTML and CSS in Inspector, as you would with any webpage.\n\nIf your extension has multiple HTML documents open, click the page select icon () to open the popup's document.\n\nWe use the notify-link-clicks-i18n extension example to illustrate the debugging features relevant to content scripts. This example is in the webextensions-examples repository.\n\nA content script is a part of your extension that runs in the context of a webpage; it enables your extension to react to events on the webpage and make changes to a webpage's content.\n\nBecause Firefox is multiprocess, content scripts run in a different process to other parts of an extension. Therefore, to debug content scripts, you use the developer tools for the page containing the script. To do this:\n\nIf you've already activated the split console view, so you can view the Console below Debugger, the tools open in this mode. Otherwise, press esc to activate this mode.\n\nSelect your content scripts listed in Sources. You can set breakpoints, step through code, modify the extension's state, and do everything else you'd expect to be able to do in a debugger. Any messages logged by your code display in Console.\n\nIf the developer tools tab was not open when the content script injected, the content script may not be list in Sources. If you experience this behavior, reloading the page with the developer tools open should provide a fix.\n\nWe use the annotate-page extension example to illustrate the debugging features relevant to sidebars. This example is in the webextensions-examples repository.\n\nA Sidebar is a pane displayed at the side of the browser window, next to the web page. Sidebars are specified using an HTML document that can include CSS and JavaScript, which define styling and behavior.\n\nTo debug a sidebar, use the Toolbox Debugger in the split console view so you can view the Console below Debugger.\n\nTo debug a sidebar, open the sidebar and locate its JavaScript in Debugger.\n\nIn the Debugger you can set breakpoints, step through code, modify the extension's state, and do everything else you'd expect to be able to do in a debugger. Any messages logged by your code display in Console.\n\nTo inspect the sidebar's HTML and CSS, use Inspector in the split console view so you can view the Console below Inspector. You can review and modify the sidebar's HTML and CSS in Inspector, as you would with any webpage.\n\nIf your extension has multiple HTML documents open, click the page select icon () to open the sidebar's document.\n\nWe use the annotate-page extension example to illustrate the debugging features relevant to extension storage. This example is in the webextensions-examples repository.\n\nAn extension can store data using the Storage API. To view this data, in the Toolbox open the Storage tab and locate Extension Storage.\n\nWe use the devtools-panels extension example to illustrate the debugging features relevant to developer tools pages and panels. This example is in the webextensions-examples repository.\n\nDeveloper tools are extended with a hidden HTML page that is loaded when the tools are opened. From the hidden HTML page, developer tools panels can be added; these are HTML pages displayed as a tool tab in the browser UI.\n\nTo debug development tools pages and panels, use the Toolbox Debugger in the split console view so you can view the Console below Debugger.\n\nTo debug additions to the developer tools, open the developer tools and any custom panels, and locate their JavaScript in Debugger.\n\nIn the Debugger you can set breakpoints, step through code, modify the extension's state, and do everything else you'd expect to be able to do in a debugger. Any messages logged by your code display in Console.\n\nTo debug the custom developer tools pages' HTML and CSS:\n\nYou can review and modify the custom development tools page HTML and CSS in Inspector, as you would with any webpage.\n\nFor information on debugging permission requests, see Test permission requests.\n\nIf your extension could be affected by the browser restarting, such as when a session is restored, you may want to test to ensure your code works as expected in those conditions.\n\nFor more details, see Testing persistent and restart features.\n\nTags:  debugging  firefox  guide  mozilla  webextensions \n\nContributors: majordwarf rebloor irenesmith hellosct1 janat08 MNizam0802 ExE-Boss Dietrich freaktechnik suterj andrewtruongmoz wbamberg CaemU carlin-scott matthewjwein abdullahdiaa aroraharsh010 \n\nLast update: aroraharsh010 Jan 24, 2020\n\nDevelop\n\nDevelop\n\nDevelop\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/documentation/develop/request-the-right-permissions/",
    "title": "Request the right permissions | Firefox Extension Workshop",
    "h1": "Requesting the right permissions",
    "paragraphs": "Or how to avoid permissions discouraging users from installing your extensions.\n\nTo help make users aware of the potential impact of installing an extension, Firefox will display a message showing what permissions an extension is requesting when it's installed. The prompt looks something like this:\n\nAlso, if an extension update requires additional permissions the user is prompted to approve the permissions before the updated version is installed:\n\nIf the user chooses not to approve the permissions and cancels the update, the previous version remains installed and available for use.\n\nThese messages have the potential to discourage some users from installing your extension, as the messages might suggest it's doing something “scary”. We provide users with an explanation of these permissions messages and guidance on how to judge if they're appropriate. However, there are several things you can do to reduce the likelihood of users abandoning the install of your extension because of these messages, these include:\n\nTip: Permission warnings aren't issued when you load an unpacked extension. For information on how to see the standard runtime permission flow, see Test permission requests.\n\nNot all permissions result in advice being given to the user. The permissions that trigger the display of a message and the messages they trigger are:\n\n* This warning can be suppressed by setting the optional permission \"devtools\" and requesting the permission with the permissions API. See Request permissions at runtime.\n\nThe permissions that display messages and the messages they display may be different in other browsers. For information about viewing the permission message in Chrome, see Viewing Warnings.\n\nThe following permissions don't get alerted to users:\n\nThis section looks at situations where you might be asking for more permissions than your extension needs and what you should do about them.\n\nThis may seem obvious, but if you create an extension by using an earlier example as a template or you remove a feature during development or testing, you may be asking for permissions your extension doesn't need. Addressing this is a case of doing a manual check of your code against the permissions (permissions and optional_permissions) that you're requesting in the extension's manifest.json.\n\nTake an extension you're developing to help-color blind users. At the user's request you're going to look for and update CSS in a web page to replace colors the user may have difficulty distinguishing with safe colors. You obviously need to access and update CSS on every page your user visits. You could do this by requesting the \"tabs\" permission and host permission for \"<all_urls>\".\n\nRequesting these permissions results in the user getting this advice:\n\nThe alternative is to request \"activeTab\". This permission provides your extension with the same capabilities but only for the active tab and only when run from the extension's UI (that is from a toolbar button, navigation bar button, context menu, or shortcut key).\n\nImportantly, \"activeTab\" doesn't result in the display of a permissions message when installing the extension.\n\nAs noted in the previous example, requesting host permission \"<all_urls>\" results in the permissions request message Access your data for all websites. If your extension is designed to work with one or a small number of websites or domains, narrow the request. On installation users will get details for the first four websites or domains you request access to.\n\nIf you request access to more than four websites or domains, the message will list the first three and indicate the number of other requests.\n\nOnly ask for \"unlimitedStorage\" permission if you expect your extension's local data storage to exceed 5MB if it's not going to exceed that amount, don't ask for it.\n\nNote: Firefox doesn't currently restrict local storage size, although it does ask users to approve this permission request if you make it. Firefox may add a restriction in the future. If that happens, the limit is unlikely to be less than Chrome's current 5 MB restriction.\n\nUsers may not understand the context of permissions requested during installation. The alternative approach is to request permissions as they are needed, using the Permissions API, and thereby provide the user with context.\n\nA typical scenario for using this approach is the \"geoLocation\" permission. Say you've written a note-taking extension that includes the ability to add a minimap of the note takers location. Requesting location access during installation might leave the user unclear why the extension needs to access location, so they might not install it. However, if permission to use location is requested when the user first tries the feature to add a minimap, they'll get a clearer understanding of why the permission is needed and be more likely to grant it. And should they choose not to grant the permission, the extension can offer a graceful fall-back—in this example, not adding the minimap—but the important outcome of this approach is that the user has installed and used your extension.\n\nMaking a runtime permission request is straightforward. Include any permissions you want to request under the manifest.json optional_permissions key. Then pass the permissions you want granted to permissions.request, which prompts the user to grant the permissions. true is returned if the user grants the request, false if they don't.\n\nYou can't request all the permissions available to \"permissions\" using optional permissions. You can't request the following API permissions:\n\nThere are a couple of things to note:\n\nFor more information about optional permissions, see optional_permissions and the permissions example.\n\nPermissions messages are most likely to prevent a user from installing your extension because they don't understand why permissions are being requested. While the user can get general advice on the impact of a permission, it may not be sufficient for them to understand why a permission is being requested in your extension.\n\nTo address this issue, provide information in your extension's AMO description that explains what permissions your extension is requesting and why.\n\nA good example of this approach is Gesturefy, which offers users this advice:\n\nPermissions explained:\n\nTags:  add-ons  beginner  extensions  how-to  intermediate  permissions \n\nContributors: caitmuenster Zearin_Galaurum rebloor evilpie hellosct1 freaktechnik \n\nLast update: Zearin_Galaurum Mar 19, 2021\n\nDevelop\n\nDevelop\n\nDevelop\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/documentation/develop/getting-started-with-web-ext/",
    "title": "Getting started with web-ext | Firefox Extension Workshop",
    "h1": "Getting started with web-ext",
    "paragraphs": "web-ext is a command line tool designed to speed up various parts of the extension development process, making development faster and easier. This article explains how to install and use web-ext.\n\nweb-ext is a node-based application. You install it with brew or the nodejs npm tool.\n\nInstall with brew using:\n\nInstall with npm using:\n\nweb-ext requires the current LTS (long-term support) versions of NodeJS.\n\nTo test whether the installation worked run the following command, which displays the web-ext version number:\n\nweb-ext will notify you when it is time to update to the newest version. To update your global install, use the command npm install -g web-ext.\n\nBefore you start using web-ext locate an example extension to use—if you don’t have one, use one from the webextensions-examples repo. If you would like to start from scratch, use our community developed boilerplating tool to get started with a fresh extension.\n\nTest an extension in Firefox by cd'ing into your extensions’s root directory and entering:\n\nThis starts Firefox and loads the extension temporarily in the browser, just as you can on the about:debugging page. Note that this web-ext method has the same limitations regarding prompts for permissions and restart features as about:debugging.\n\nSee the run reference guide to learn more.\n\nThe run command watches your source files and tells Firefox to reload the extension after you edit and save a file. For example, if you changed the name property in your manifest.json file, Firefox displays the new name. This makes it easy to try out new features because you can see the effect immediately. The automatic reloading feature is active by default, you use it like this:\n\nYou can also press the r key in the web-ext terminal to trigger an extension reload.\n\nIf you experience unexpected behavior with the reloading feature, please file a bug. You can also disable reloading like this:\n\nExtension reloading is only supported in Firefox 49 or higher.\n\nTo run your extension in a version of Firefox Desktop other than the default, use the --firefox option to specify a full path to the binary file. Here is an example for Mac OS:\n\nOn Windows, the path needs to include firefox.exe, for example:\n\nSee the run command reference to learn more.\n\nFirefox 48 was the first stable version to use the WebExtension platform, but it doesn't allow web-ext to install an extension remotely. You need to run your extension in Firefox 48 using:\n\nTo run your extension in Firefox for Android, follow these instructions to set up your computer and device.\n\nWith your device connected to your development computer, run:\n\nThis command displays the device ID for your connected Android device or devices. If you don't see a list of device IDs, make sure you set up the device for development correctly.\n\nNow, add the device ID to the command:\n\nIf you've multiple versions of Firefox installed, you may need to choose a specific version. For example:\n\nThe first time you run this command, you may need to grant Android permissions for the APK. This is because the command needs read/write access to the device storage, so that Firefox for Android can run on a temporary profile. The web-ext output guides you in how to grant these permissions.\n\nThe web-ext command does not alter any of your existing Firefox for Android preferences or data. To see more information about how web-ext is interacting with your device, run the command with --verbose.\n\nSee the run command reference to learn more.\n\nWhen using web-ext run to test an extension on Firefox for Android, you'll notice a message like this in the console output:\n\nThis is a remote debugger port that you can connect to with Firefox's developer tools. In this case, you'd connect to host localhost on port 51499.\n\nSee this guide for more information about debugging an extension on Firefox for Android.\n\nWhen you execute web-ext run, the extension gets installed temporarily until you close Firefox. This does not violate any signing restrictions. If instead you create a zip file with web-ext build and try to install it into Firefox, you will see an error telling you that the add-on is not signed. You will need to use an unbranded build or use a development build to install unsigned extensions.\n\nBy default, the run command will create a temporary Firefox profile. To run your extension with a specific profile use the --firefox-profile option, like this:\n\nThis option accepts a string containing the name of your profile or an absolute path to the profile directory. This is helpful if you want to manually configure some settings that will always be available to the run command.\n\nThe run command does not save any changes made to the custom profile specified by --firefox-profile. To keep changes, add this option:\n\nThis may be helpful if your extension has many different run states.\n\nThis option makes the profile specified by --firefox-profile completely insecure for daily use. It turns off auto-updates and allows silent remote connections, among other things. Specifically, it will make destructive changes to the profile that are required for web-ext to operate.\n\nOnce you've tested your extension and verified that it's working, you can turn it into a package for submitting to addons.mozilla.org using the following command:\n\nThis outputs a full path to the generated .zip file that can be loaded into a browser.\n\nThe generated .zip file doesn't work on Firefox without signing or adding browser_specific_settings.gecko.id key into manifest.json. For more information, please refer to the WebExtensions and the Add-on ID page.\n\nweb-ext build is designed to ignore files that are commonly not wanted in packages, such as .git, node_modules, and other artifacts.\n\nSee the build reference guide to learn more.\n\nAs an alternative to publishing your extension on addons.mozilla.org, you can self-host your package file but it needs to be signed by Mozilla first. The following command packages and signs a ZIP file, then returns it as a signed XPI file for distribution:\n\nThe API options are required to specify your addons.mozilla.org credentials.\n\nIf you've listed the extension on addons.mozilla.org, see Signing a test version of a listed extension.\n\nSee the sign reference guide to learn more.\n\nweb-ext supports signing extensions that do not declare the browser_specific_settings.gecko.id property in their manifest. The first time you sign an extension without an explicit ID, addons.mozilla.org will generate an ID and web-ext will save it to .web-extension-id in the working directory. You should save the ID file so that you can sign future versions of the same extension. If you lose the ID file, you will have to add back the browser_specific_settings.gecko.id property or use the --id option when signing, for example:\n\nIf you're working in an environment that restricts access to certain domains, you can try using a proxy when signing:\n\nSee the --api-proxy option to learn more.\n\nThe following domains are used for signing and downloading files:\n\nIf you've listed an extension on addons.mozilla.org, use web-ext to create a signed but unlisted version for testing purposes. For example, you may wish to distribute an alpha or beta version to users for early feedback and testing.\n\nFirst, change the version number in your manifest.json so that it is different from the latest listed version. Then, create the unlisted version by using the --channel option like this:\n\nThis signs and downloads an XPI file that can be installed into Firefox.\n\nOnce you've finished testing, to publish the extension you must define --channel as listed, as the channel option defaults to the one used previously. So, after incrementing the version in your manifest.json, run:\n\nThis publishes and submits your extension for review as if you had uploaded it to addons.mozilla.org.\n\nSetting --channel=listed for a new version of a listed extension is not well supported. It uploads your new version to addons.mozilla.org as if you'd submitted it manually. However, the command will fail and you'll have to check addons.mozilla.org/developers/addons for the correct status.\n\nSee the sign reference guide to learn more.\n\nBefore trying out your extension with the run command or submitting your package to addons.mozilla.org, use the lint command to make sure your manifest and other source files do not contain any errors. You can also set strict_min_version in your extension’s manifest file and lint will report on the permissions, manifest keys, and web extension APIs used that are not available in that version. Example:\n\nThis uses the addons-linter library to walk through your source code directory and report any errors, such as the declaration of an unknown permission.\n\nSee the lint reference guide to learn more.\n\nYou can specify --config=my-config.js to set default values for any option. Here is an example with the build command:\n\nThe file should be a CommonJS module as understood by NodeJS and must export each configuration value. Here is how you would set the default value of --verbose to true:\n\nIf you want to specify options that only apply to a specific command, you nest the configuration under the command name. Here is an example of adding configuration for --overwrite-dest that only applies to the build command as well as --firefox that only applies to the run command:\n\nTo create a configuration key for a command line option, you remove the preceding dashes and convert the name to camel case. As you can see from this example, --overwrite-dest was converted to overwriteDest.\n\nIf an option can be specified multiple times on the command line then you define it as an array. For example, here is how to specify multiple --ignore-files patterns:\n\nweb-ext will also try to load its configuration options from a \"webExt\" property included in the package.json file in the current directory:\n\nweb-ext will load existing configuration files in the following order:\n\nIf a home directory config and a local directory config define the same option, the value from the latter file will be used.\n\nTo disable automatic loading of configuration files, set this option:\n\nTo diagnose an issue related to config files, re-run your command with --verbose. This will tell you which config file affected which option value.\n\nThe preceding commands use default directories for the extension source and artifact creation (for example, built .zip files). The defaults are:\n\nYou can specify different source and destination directories using the --source-dir and --artifacts-dir options when running your commands. Their values can be relative or absolute paths, but must always be specified as strings. Here is an example of specifying both options when building an extension:\n\nTo see in detail what web-ext is doing when you run a command, include the --verbose option. For example:\n\nYou can list all commands and options like this:\n\nYou can list options for a specific command by adding it as an argument:\n\nYour extension can detect whether it was installed using web-ext run, rather than as a built and signed extension downloaded from addons.mozilla.org. Listen for the runtime.onInstalled event and check the value of details.temporary.\n\nYou can use web-ext as a NodeJS module. Here is more information, with example code.\n\nweb-ext repo\nweb-ext command reference\n\nTags:  guide  installing  packaging  testing  tools  web-ext  webextension \n\nContributors: caitmuenster rebloor Sheppy kumar303 platy hellosct1 lgreco wbamberg andrewtruongmoz saintsebastian arai tofumatt chrisdavidmills ankushduacodes \n\nLast update: ankushduacodes Jan 27, 2021\n\nDevelop\n\nDevelop\n\nDevelop\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/documentation/develop/differences-between-desktop-and-android-extensions/",
    "title": "Differences between desktop and Android extensions | Firefox Extension Workshop",
    "h1": "Differences between desktop and Android extensions",
    "paragraphs": "There are some important distinctions to be aware of when developing an extension for Android.\n\nFirefox for Android offers a subset of the WebExtensions APIs available to the desktop version of Firefox. Some of these differences are due to the nature of the Android environment and therefore the features Firefox can implement, others are where Firefox for Android does not offer all the desktop features. This article explores these differences and how they affect your add-on development.\n\nA detailed list of the WebExtension APIs supported in Firefox for Android is provided on the Browser support for JavaScript APIs page and details of the supported manifest.json keys are provided on the manifest.json section page.\n\nFor information about extension development in Firefox for Android, please see this article.\n\nFirefox for Android offers a streamlined version of the UI found in desktop Firefox, ensuring Firefox offers an enjoyable and engaging experience on mobile. Some differences relate to how the Android UI differs from the desktop UIs found in Linux, Mac OS, and Windows. For example, Android does not support a windowing environment, and devices do not usually include a physical keyboard from which keyboard shortcuts can be issued. Other differences relate to optimizing usability on smaller mobile device screens.\n\nAs a result of the UI differences, extensions for Firefox for Android do not support the following APIs and manifest.json keys:\n\nThere are some other related features that are not supported, these are:\n\nDeveloper tools for Firefox for Android are provided through remote debugging mechanisms over USB or Wi-Fi that connect to the WebIDE on a desktop. Therefore, Firefox for Android does not provide any built-in developer tools and its extensions do not support the APIs to extend the developer tools:\n\nYou reveal your add-on as an option under the Add-ons item in the Firefox for Android browser menu. Depending on the manifest version used by your app, you add an option like this:\n\nNote that the browserAction and action popup content opens as an overlay, covering the browser window until the user closes the overlay.\n\nYou can also manipulate tabs on Firefox for Android. The tabs API enables you to perform most of the actions you can on the desktop, the main exceptions are:\n\nThe process model on Android kills idle processes to maintain device performance. Among the processes Android can kill are extension processes. To account for this behavior, extensions should be designed to recover after they have been killed. Event pages, or non-persistent background scripts, are the best mechanism to support this. If your extension uses persistent background script, learn how to convert them to event pages.\n\nYou do not have the ability to interact with native applications as runtime.connectNative() and runtime.sendNativeMessage() are not available.\n\nPermissions to use certain WebExtension APIs must be requested in the manifest.json file. On the desktop version of Firefox users are warned when an extension requests a permission and are given the option to deny the add-on that permission. However, on Firefox for Android permissions are granted automatically and the user isn’t given the option to deny them. It is currently planned to resolve this issue in Firefox 57.\n\nDesktop Firefox supports the local, managed, session, and sync storage areas.\n\nFirefox for Android supports local, session, and sync storage. However, data in sync storage is not synchronized with the user's Mozilla account from Firefox for Android. More details can be found in bug 1625257.\n\nFirefox for Android doesn't support the managed storage area. All calls to StorageArea methods are rejected.\n\nTags:  add-ons  guide  mobile  webextensions \n\nContributors: caitmuenster ExE-Boss gokulakrishna hellosct1 ramkumar.kr94 andrewtruongmoz rebloor wbamberg dotproto \n\nLast update: rebloor Jan 17, 2024\n\nDevelop\n\nDevelop\n\nDevelop\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://extensionworkshop.com/documentation/publish/promoting-your-extension/",
    "title": "Promoting your extension or theme | Firefox Extension Workshop",
    "h1": "Promoting your extension or theme",
    "paragraphs": "So you’ve written a great extension, but only a few people have found and installed it from addons.mozilla.org (AMO)—despite your efforts to create an appealing listing. So, how do you encourage more people to install your extension? This page looks at how.\n\nHowever, before you start investing in encouraging more people to install your extension, spend some time to make sure that your extension is well-polished and professional. There is little point chasing new installs if they result in disappointing ratings and reviews. Remember to follow the content and UX guidelines, include proper onboarding, and make sure your extension’s performance is good. Even if you think you’ve done this already, it’s always worth checking again.\n\nAdd a snazzy button to your website or blog telling people to \"Get the add-on.\" We offer buttons in two sizes:\n\nSimply save these images, put them on your website, and link them to your add-on’s listing on addons.mozilla.org.\n\nThe button is also available as an .svg file.\n\nReal world word-of-mouth can still be a surprisingly effective driver of extension installs. Whether you’re a solo first-time extension developer or an established commercial developer, spreading the word among friends, family, and school, college, or work colleagues can be a very cost-effective way to drive installs of your extension.\n\nIf you’ve created a great extension, get on and talk about it. Look for events where speakers are welcome or meetups where potential users might gather. If your extension focuses on fishing, look for a local fishing club and see if they have a regular meet you could talk to. Other options might include a computer society or maker group. You should consider any group that is likely to be interested in hearing about extension development in general or the features of your extension in particular.\n\nIf this isn’t your first extension or you are creating an extension to complement a web service, make your users aware of the new offering. If you contact your users directly, using email for example, make sure you do so within the parameters of your privacy policy. Remember, you have many other channels you can use, such as social media, forums, or your newsletter. Don’t forget that you can promote your new extension when you upgrade your existing extensions (see Best practices for onboarding, upboarding, and offboarding users).\n\nUsing social media can be a very effective way of promoting your extension. Consider doing the following when using social media:\n\nEnthusiastic and engaged users can often be your greatest advocates. The power of personal connections and word-of-mouth means that even a modest number of people can rapidly drive installs. To engage with and nurture your users:\n\nYour social media account may provide an adequate vehicle for user interaction and exchange of information. However, as your user base grows or if your extension requires more in-depth help and support, a forum or user group may prove to be an effective tool. Forums and user groups can be particularly beneficial in relation to your extension support, as engaged forum members will often help answer support questions and spread the word about your extension.\n\nIf you don’t feel you’re ready to manage a forum or user group you can also create a support thread on the Mozilla add-on forum: tag the thread title with “[Support]” and include your extension name. This is also an unobtrusive way of making the Mozilla forum community more aware of your extension.\n\nIndependent endorsements of your extension can help to boost installs significantly. You first need to identify bloggers and news media that might be interested in featuring or reviewing your extension. Look for websites or print publications that focus on areas related to your extension’s features as well as technology in general. It might be difficult to generate interest among high profile sites; it may be easier to start with bloggers and news media with a niche or regional focus.\n\nOnce you have a target list of bloggers and media, create a “press pack.” This pack should include:\n\nIf you have a modest budget, consider running a small search term campaign using Google Ads. This can be a cost-effective way of reaching potential installers where they are searching the web for information related to the features of your extension.\n\nIf you haven’t used online advertising before, Google Academy for Ads provides courses on how to run an effective online ad campaign.\n\nTags:  add-on  distribution  guide  promote \n\nContributors: irenesmith rebloor \n\nLast update: irenesmith Mar 18, 2019\n\nPublish\n\nPublish\n\nFor developers:\n@mozamo\n\nFor end users:\n@rockyourfirefox\n\nMatrix\n\nCommunity forum\n\nStay up-to-date on news and events for Firefox extension developers.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#javascript_apis",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions#manifest_keys",
    "title": "Browser extensions - Mozilla | MDN",
    "h1": "Browser extensions",
    "paragraphs": "See what your team could do with The DevSecOps Platform. Take GitLab for a spin.\n30 day free trial\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nExtensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.\n\nThe technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.\n\nWhether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.\n\nGet comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.\n\nDiscover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.\n\nNote: If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.\n\nDiscover what extensions can do before building your first extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox.\n\nGet detailed information on the concept that underpin extensions from an overview of the JavaScript API, through content scripts, match patterns, working with files, internationalization, and content security policy, to more advanced subjects such as native messaging, using the devtools APIs, and native manifests.\n\nDiscover all the user interface components you can use in your extensions, with coding examples and tips.\n\nFrom patterns you'll regularly use such as work with the Tabs API and adding a button to the toolbar to more advanced topics such as intercepting HTTP requests and working with contextual identities, you'll find a range of tutorials to get you started.\n\nWhen you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:\n\nGet comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.\n\nGet full details about the manifest keys, including all their properties and settings. There's also detailed information on the compatibility of each key with the major browsers.\n\nThis page was last modified on Jun 8, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Browser_compatibility_for_manifest.json",
    "title": "Browser compatibility for manifest.json - Mozilla | MDN",
    "h1": "Browser compatibility for manifest.json",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.Mozilla ads\n\nGet 24/7 breach monitoring and automatic alerts if you’ve been affected. Try Firefox Monitor.\nMozilla ads\n\nTip: you can click/tap on a cell for more information.\n\nThis page was last modified on Jul 10, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://github.com/mdn/content/blob/main/CONTRIBUTING.md",
    "title": "content/CONTRIBUTING.md at main · mdn/content · GitHub",
    "h1": "Search code, repositories, users, issues, pull requests...",
    "paragraphs": "We read every piece of feedback, and take your input very seriously.\n\n\n            To see all available qualifiers, see our documentation.\n          \n\nThanks for taking the time to contribute to MDN Web Docs! 🎉\n\nThis document covers project setup steps along with a set of guidelines for contributing to MDN Web Docs content. Everyone participating in this project is expected to follow our Code of Conduct. If you want to jump right in, see Getting started with MDN Web Docs for an overview of how to join, and the Contribute page on MDN for a filtered list of tasks.\n\nBefore contributing, make sure you're familiar with the project guidelines and conventions:\n\nWe expect contributors to MDN to have some knowledge of web technologies before working on content. We've put together relevant resources to get up to speed on specific topics before contributing:\n\nThere are a few things to keep in mind about content on MDN and how it is maintained:\n\nEach document's index.md starts with front-matter, which is written in YAML. The YAML is read by the MDN build system and is used to read the metadata of a document.\n\nThe front-matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines (---). Front-matter defines the document's title and slug, and may also include status, browser-compat and specification information. Here's an example of front-matter from the JavaScript page:\n\nYou'll need a GitHub account to contribute to MDN Web Docs. If you are comfortable working with git and GitHub, you can skip ahead to Contributing to MDN. If you've created a new GitHub account and want to know what to do next, you can choose one of the following ways to manage changes:\n\nIf you want to make a small change like fixing a typo, the GitHub UI is the easiest way to get started. If you've found a typo on the JavaScript landing page, for example, you can propose a fix as follows:\n\nFrom there, the GitHub UI will walk you through the rest by creating a fork and a branch to commit your changes to. After you have made changes to your branch, the goal is to open a pull request for your changes to be incorporated.\n\nA pull request represents the work you want to be reviewed, approved, and merged into the main branch of the MDN repository. See the Creating a pull request for more details on creating and handling pull requests successfully.\n\nIf you're not certain of the changes that you want to make, get in touch with us!\n\nNote: You can click the View the source on GitHub link at the bottom of an MDN page to jump directly to the page source on GitHub.\n\nIf you want to make changes to more than one file, the GitHub UI is not very efficient because you have to make separate pull requests for each file you want to change. Instead of using the GitHub UI, you need to use git or a client like the GitHub Desktop or GitHub CLI. The following examples are using plain git commands, but you can use any of the clients mentioned above to perform the equivalent actions.\n\nTo fork and clone the repository:\n\nCreate a fork of the mdn/content repository to freely experiment with branches and changes. Assuming your GitHub username is octocat, your fork would be a copy of the mdn/content repository in your account at https://github.com/octocat/content.\n\nClone your fork to your local machine. Assuming your GitHub username is octocat, you would do something like this:\n\nCreate a remote to keep your clone and fork (https://github.com/octocat/content) up-to-date. This example adds a remote named upstream, but you can name it mdn or any other name you like.\n\nWhen you run git remote -v, you'll see that you have two remotes: upstream and origin. The origin remote is your fork (https://github.com/octocat/content) and the upstream remote is the mdn/content repository.\n\nKeep your fork up-to-date often. You can do this by fetching the latest changes from the mdn/content repository and merging them into your fork.\n\nCreate a branch for your changes. This example creates a branch named fix-typo:\n\nThe previous sections describe how to get started using the GitHub UI to make small changes to a single file and how to create a fork and clone the repository to prepare for making larger changes. This section describes how to build the project locally and how to prepare your changes for submission.\n\nTo serve the site locally, you need to have Node.js and Yarn 1 (Classic) installed. You can check if these are installed by running the following commands:\n\nAfter you have installed Node.js and Yarn, you can install the dependencies using yarn:\n\nAfter you have installed all dependencies, you can start the local preview using yarn start:\n\nOnce started, a live preview is available at http://localhost:5042/\n\nSet your preferred editor by adding EDITOR=... into a .env file in the project root. To specify VS Code as your preferred editor, for example, use the following command:\n\nYou can set the EDITOR environment variable to any editor you like. When browsing a page server locally, you can press Open in your editor to edit the current file in your preferred editor.\n\nTo edit files and track your changes, you should use feature branches. Feature branches are created from the main branch and should be named after the feature you're working on. This will make it easier to submit a pull request for your changes.\n\nNote: Open a discussion if your changes will contain large, complex or structural changes. Ask for feedback before embarking on large tasks.\n\nWhen the server is running, make the changes you would like to make to one or more index.md files.\n\nOpen a browser and navigate to the equivalent pages you've changed. If you changed files/en-us/web/javascript/index.md, you would navigate to http://localhost:5042/en-us/docs/web/javascript in your browser, for example.\n\nCheck for errors by clicking Show flaws on each previewed page. You may be able to fix flaws by running:\n\nCommit your changes to the branch (our example is using the fix-typo branch) and push the changes to your fork's remote:\n\nTo ensure that all MDN documents follow the same formatting, we use both Prettier and Markdownlint to format and lint Markdown files. This helps us enforce uniform styling across all documents with minimal reviewer intervention.\n\nIf you have a local checkout of the repository and have installed the dependencies, or you are using github.dev, a pre-commit hook will be installed which automatically runs while making a commit. To save some headache and improve your work flow while authoring, you may wish to configure your editor to automatically run Prettier. Alternatively, you may run yarn fix:md in the command line to manually format all Markdown files.\n\nNote: Automatically formatting changes does not work for pull requests opened using the GitHub Web UI as described in the \"Simple changes\" section. This may result in failed status checks on pull requests. If you're not sure about how to fix this, get in touch with us! for help.\n\nAdding a new document is relatively straightforward, especially if you can start by copying the index.md of a similar document. There are a few things to keep in mind:\n\nMoving one or more documents (or an entire tree of documents) is made easier with the yarn content move command. This command moves the file and fixes up redirects automatically. You can use this command as shown below:\n\nWarning Don't edit the _redirects.txt file manually. See the Redirecting a document section for more information.\n\nTo use yarn content move, provide the slug of the document you'd like to move (e.g., Learn/Accessibility), and the slug of its new location (e.g., Learn/A11y). The locale of the existing document can be provided as an optional third argument (this defaults to en-US). If the document you'd like to move contains child documents (i.e. it represents a document tree), the yarn content move command will move the entire tree.\n\nLet's say you want to move the entire /en-US/Learn/Accessibility tree to /en-US/Learn/A11y, you can do so as follows:\n\nStarting from a fresh branch:\n\nMove files with yarn content move. This will delete and modify existing files, as well as create new files.\n\nOnce files are moved we need to update references to those files in the other content files as well. Use following command to update all the references automatically in one go:\n\nCommit all the changes and push your branch to the remote:\n\nSimilar to moving files, you can delete documents or a tree of documents easily by using the yarn content delete command.\n\nWarning: Don't delete files or directories from the repository manually; the yarn content delete command handles the necessary changes such as updating the _wikihistory.json file.\n\nYou can use this command as shown below:\n\nTo use yarn content delete, provide the slug of the document you'd like to delete (e.g., Learn/Accessibility), and the locale as an optional second argument (this defaults to en-US). If the slug of the page you wish to delete contains special characters, include it in quotes. For example:\n\nIf the document has child documents (i.e., the document represents a document tree), you must specify the -r, --recursive option, else the command will fail. Say you want to delete the entire /en-US/Learn/Accessibility tree and redirect all the deleted documents to Web/Accessibility. You can perform the following steps:\n\nStart from a fresh branch.\n\nRun the yarn content delete command and redirect all deleted documents.\n\nWarning: You should always add a redirect when deleting documents. If there is no obvious alternative, redirect to the nearest \"parent\" of the deleted topic. If you forget to redirect when deleting a file, you can do it afterwards. See the Redirecting a document section.\n\nCommit all of the changes and push your branch to the remote.\n\nIf you are moving a document as shown above you don't need to create a redirect. However, you may need to do so when fixing a broken link or after deleting a document without the --redirect flag.\n\nYou may do this by using the yarn content add-redirect command.\n\nStart a fresh branch to work in:\n\nAdd a redirect with yarn content add-redirect. The target page can be a page on MDN or an external URL:\n\nCommit all of the changed files and pushing your branch to your fork:\n\nOnce you've made your changes and pushed them to a branch on your fork, you can create a pull request to propose your changes to the mdn/content repository. Someone from the MDN team or the MDN Web Docs community will review your changes and provide feedback.\n\nFor details on what to do next, see the pull request etiquette section to see how to handle pull requests and get your content merged successfully.\n\nThis is the exciting part of contributing to MDN as you're almost done with the contribution process! Here are some things to keep in mind at this point:\n\nDuring reviews, you may be asked to answer questions about your work or to make changes to your suggested edits. This is a common part of the process of making changes in open source projects. There are some important rules of etiquette to remember that will help during the review stage.\n\nCheck tests that are run automatically for pull requests (see .github/workflows). If one or more of these tests fail, you must fix them. Your pull request will not be approved and merged if there are failing tests. If you don't know how to resolve the underlying issue(s), you can ask for help.\n\nResolve conflicts if your pull request has merge conflicts with the main branch. This is usually done by merging the main branch into your feature branch (git pull upstream main), and then pushing the updated branch to your fork (git push).\n\nGroup logical changes in each pull request so that it contains a single change or a related set of changes. If a pull request becomes too large or contains too many unrelated changes, a reviewer may close your pull request and ask you to submit a new pull request for each set of changes.\n\nDon't re-open pull requests closed by a reviewer.\n\nDon't use git rebase of main over your branch. Your changes are replayed on top of the current main branch at that point in time. This might confuse reviewers as notifications on GitHub lead to nowhere.\n\nWhen contributing to the content you agree to license your contributions according to our license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/contributors.txt",
    "title": "",
    "h1": "N/A",
    "paragraphs": ""
  },
  {
    "url": "https://github.com/mdn/content/blob/main/files/en-us/mozilla/add-ons/webextensions/index.md?plain=1",
    "title": "content/files/en-us/mozilla/add-ons/webextensions/index.md at main · mdn/content · GitHub",
    "h1": "Search code, repositories, users, issues, pull requests...",
    "paragraphs": "We read every piece of feedback, and take your input very seriously.\n\n\n            To see all available qualifiers, see our documentation.\n          "
  },
  {
    "url": "https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fissues%2Fnew%3Ftemplate%3Dpage-report.yml%26mdn-url%3Dhttps%253A%252F%252Fdeveloper.mozilla.org%252Fen-US%252Fdocs%252FMozilla%252FAdd-ons%252FWebExtensions%26metadata%3D%253C%2521--%2BDo%2Bnot%2Bmake%2Bchanges%2Bbelow%2Bthis%2Bline%2B--%253E%250A%253Cdetails%253E%250A%253Csummary%253EPage%2Breport%2Bdetails%253C%252Fsummary%253E%250A%250A%2A%2BFolder%253A%2B%2560en-us%252Fmozilla%252Fadd-ons%252Fwebextensions%2560%250A%2A%2BMDN%2BURL%253A%2Bhttps%253A%252F%252Fdeveloper.mozilla.org%252Fen-US%252Fdocs%252FMozilla%252FAdd-ons%252FWebExtensions%250A%2A%2BGitHub%2BURL%253A%2Bhttps%253A%252F%252Fgithub.com%252Fmdn%252Fcontent%252Fblob%252Fmain%252Ffiles%252Fen-us%252Fmozilla%252Fadd-ons%252Fwebextensions%252Findex.md%250A%2A%2BLast%2Bcommit%253A%2Bhttps%253A%252F%252Fgithub.com%252Fmdn%252Fcontent%252Fcommit%252F4e0fe2b61a65f3334debdb473ba9c937a878426b%250A%2A%2BDocument%2Blast%2Bmodified%253A%2B2023-06-08T12%253A10%253A10.000Z%250A%250A%253C%252Fdetails%253E",
    "title": "Sign in to GitHub · GitHub",
    "h1": "Sign in to GitHub",
    "paragraphs": "\n        Enable JavaScript to use your passkey.\n\n\n\n      This browser or device is reporting partial passkey support.\n\n\n\n    Webauthn isn't supported. Use a different browser or device to use your passkey.\n\n\n\n    \n  \n  \n\n    Waiting for input from browser interaction...\n  \n\nSign in with a passkey\n\nNew to GitHub? Create an account"
  },
  {
    "url": "https://www.ionos.com/hosting/deploy-now.html?itc=A10HRDY5-DWGP1F-RODSOUO&ac=OM.US.US890K428682T7073a&utm_source=BSA24&utm_medium=display&utm_campaign=PTN-US-MIX-OMAX-EXT-AWR---&image=&utm_content=mozilladevlopertakeovermar2024",
    "title": "Deploy Now » Build and Deploy via GitHub | IONOS",
    "h1": "Deploy Now",
    "paragraphs": "Domains & SSL\n\nDomains\n\nCreate your address on the web.\n\nFind your domain name faster with AI.\n\nCombine your name with America's address.\n\nBuy a .com domain and get 50% off our website builder.\n\nGet your mission online with a trustable domain.\n\nMove your domain name to IONOS.\n\nSecurity\n\nSecure site traffic and build trust.\n\nProtect your domain from threats.\n\nUse Case\n\nStand out with .app, .nyc, .dev, and more!\n\nTransfer your domain to IONOS.\n\nRegister up to 100 domains with one search.\n\nHosting for a climate-neutral future\n\nWebsites\n\nWebsites\n\nCreate your own website easily.\n\nOur experts build your website.\n\nOnline Marketing\n\nImprove your SEO with rankingCoach.\n\nSend and manage email campaigns easily\n\nSell online with Google and help from us.\n\nGet found faster online and on location.\n\nUse Cases\n\nFind the right way to build your website.\n\nShowcase your portfolio online quickly.\n\nDiscover our website designs.\n\nGet online faster with help from AI.\n\nCompare our online marketing solutions.\n\nHosting for a climate-neutral future\n\neCommerce\n\nOnline Stores\n\nCreate your own online store.\n\nGet your online store built by experts.\n\nAdd-Ons\n\nTurn any website into an online store.\n\nSell across social media with one shop.\n\nHosting\n\nHost your WooCommerce website with IONOS.\n\nPowerful hosting for this open-source eCommerce solution.\n\nReliable hosting tailored to PrestaShop.\n\nPower your Shopware store with cloud server hosting.\n\nHost your OpenCart store on performance cloud servers.\n\nResources\n\nCompare our eCommerce solutions.\n\nOptimize your store with helpful tips.\n\nHosting for a climate-neutral future\n\nHosting\n\nShared Hosting\n\nFast, scalable hosting for any website.\n\nGet powerful web hosting on Windows® Server 2022.\n\nDeploy your site, app, or PHP project from GitHub.\n\nUnmanaged Hosting\n\nWith root access, NVMe storage, and Plesk license.\n\nOther Hosting Solutions\n\nCompare shared and dedicated hosting.\n\nRun older PHP versions securely with updates and security checks.\n\nFast, scalable hosting plus tools for web professionals.\n\nBuild faster sites with leaner hosting.\n\nOptimized hosting, plus free Joomla! extensions.\n\nHosting for a climate-neutral future\n\nWordPress\n\nShared WordPress Hosting\n\nOptimized for speed, reliability and control.\n\nEasy, hassle-free WordPress for any project.\n\nWordPress eCommerce\n\nFast WordPress hosting optimized for WooCommerce.\n\nOther WordPress Solutions\n\nReliable WordPress hosting designed for client websites.\n\nHosting for a climate-neutral future\n\nEmail & Office\n\nEmail\n\nReach out with your own email address.\n\nThe world's leading calendar and email solution.\n\nSend and manage email campaigns easily\n\nOffice\n\nPowerful Exchange email and Microsoft's trusted productivity suite.\n\nCollaborate smarter with Google's cloud-powered tools.\n\nOnline Storage & Backup\n\nSecure and share your data on the go.\n\nSafeguard your emails against loss.\n\nProtect your data from viruses, ransomware, and loss.\n\nUse Cases\n\nCompare our productivity products.\n\nMigrate your email to IONOS.\n\nHosting for a climate-neutral future\n\nServers\n\nVirtual Servers\n\nWith root access, NVMe storage, and Plesk license\n\nPay as you go with your own scalable private server.\n\nDedicated Servers\n\nGet enterprise hardware with unlimited traffic\n\nServer Tools\n\nSecure your server or cloud infrastructure.\n\nAdd a popular, preinstalled app to any IONOS server.\n\nMeet any client demand with scalable servers.\n\nResources\n\nCompare our server solutions.\n\nHosting for a climate-neutral future\n\nMore\n\nCompany\n\nCommunity\n\nTools\n\nSupport\n\nDomains & Hosting\n\nCloud Computing\n\nNew Supports PHP projects\n\nDeploy Now\n\nGo live in just three simple steps.\n\n1\n\nConnect your repository to Deploy Now and push your changes.\n\n2\n\nWe set up a GitHub Actions workflow to run your build.\n\n3\n\nResults are deployed on reliable IONOS infrastructure automatically.\n\nDeploy Now detects your framework and configures your build automatically.\n\nShorten development times with a platform built for convenience.\n\nGit repository choice\n\nGitHub users and organization owners can connect both private and public repositories.\n\nAuto framework detection\n\nWe automatically scan your repository for the framework you use, and then set up your workflow using GitHub Actions.\n\nGitHub app install\n\nConnect your GitHub repo with our reliable hosting infrastructure easily using the Deploy Now App.\n\nWorkflow customization\n\nCustomize your automated GitHub Actions workflow anytime by simply editing YAML files.\n\nFile-based configuration\n\nManage your file persistency, environment variables or remote commands easily via configuration files.\n\nEasy staging\n\nYour feature branches go live with their own preview URL for automatic staging and faster feedback.\n\nSecure by design\n\nDeploy with automatic SSL on DDoS-protected and georedundant infrastructure.\n\nCustom domains\n\nConnect any domain to your project as a custom domain. Deploy Now supports all top-level domains.\n\nLog-based visitor stats\n\nAnalyze visitor growth, session length, and visit history with a free-to-use dashboard.\n\nGet 3 Starter Projects with your Deploy Now Membership.\n\nLearn more about project types and features.\n\nAdd Static or PHP Projects to your Deploy Now Membership on demand. Cancel anytime.\n\nUse cases\n\nStatic site generators & single page apps\n\nStatic site generators & single page apps\n\nPHP apps\n\nStorage per deployment\n\n50 MB\n\n1 GB\n\n10 GB\n\nStaging deployments \n      .cls-1 {\n        opacity: 0;\n      }\n\n      .cls-2 {\n        fill: #fff;\n      }\n\n      .cls-3 {\n        fill: #001b41;\n      }\n    \n\n1\n\n5\n\n5\n\nIONOS infrastructure \n      .cls-1 {\n        opacity: 0;\n      }\n\n      .cls-2 {\n        fill: #fff;\n      }\n\n      .cls-3 {\n        fill: #001b41;\n      }\n    \n\nGeoredundancy & DDoS protection\n\nLog-based visitor stats\n\nPHP runtime environnment\n\n–\n\n–\n\nPHP 8.2 or earlier\n\nDatabases\n\n–\n\n–\n\n2 GB MariaDB with phpMyAdmin access\n\nIncluded in Deploy Now Membership\n\n–\n\n–\n\nPrice\n\n3 projects for $4/month\n\n1 project for $2/month\n\n1 project for $7/month\n\nStarter Project\n\nStatic site generators & single page apps\n\nStatic Project\n\nStatic site generators & single page apps\n\nPHP Project\n\nPHP apps\n\nStarter Project\n\n50 MB\n\nStatic Project\n\n1 GB\n\nPHP Project\n\n10 GB\n\nStarter Project\n\n1\n\nStatic Project\n\n5\n\nPHP Project\n\n5\n\nStarter Project\n\nStatic Project\n\nPHP Project\n\nStarter Project\n\nStatic Project\n\nPHP Project\n\nStarter Project\n\nStatic Project\n\nPHP Project\n\nStarter Project\n\n–\n\nStatic Project\n\n–\n\nPHP Project\n\nPHP 8.2 or earlier\n\nStarter Project\n\n–\n\nStatic Project\n\n–\n\nPHP Project\n\n2 GB MariaDB with phpMyAdmin access\n\nStarter Project\n\nStatic Project\n\n–\n\nPHP Project\n\n–\n\nStarter Project\n\n3 projects for $4/month\n\nStatic Project\n\n1 project for $2/month\n\nPHP Project\n\n1 project for $7/month\n\nStarter Project\n\nStatic Project\n\nPHP Project\n\nwaynecovell.co.uk\n\nTime is my most valuable resource. Deploy Now makes implementing my projects that much faster.\n\nWayne\n\nDeveloper and Blogger\n\nWe host in our proprietary, ISO-certified data centers in the US, UK and Germany.\n\nWe mirror all your data in multiple data centers ensuring seamless recovery and 99.99% uptime.\n\nWe use our own server shield technology to keep your site online and protected from malicious attacks.\n\nThe future of hosting is sustainable. Our largest data center in the US and all our data centers in the UK and Germany are powered by renewable energy.\n\nLearn more\n\nDeveloping for clients? Partner with IONOS and boost your efficiency.\n\nPEYMAN H - JAN 28 2024\n\nGood Service. Great Friendly Support. Great Web Tool\n\nOKNO IR - JAN 27 2024\n\nSafe and stable servers.\n\nSC - JAN 27 2024\n\nIONOS is amazing. Great support people and sales people. Good competitive prices. There's always someone available to help with tech issues. It's a pleasure to work with IONOS.\n\nDeploy Now supports popular static site generators such as Hugo, Gatsby, Jekyll, Nuxt, Next, Jigsaw, Gridsome, Hexo, or Vuepress. You can also set up any static site generator manually. Additionally, Deploy Now supports single page applications based on Angular, React or Vue. Deploy Now does not support Node.JS server-side rendering.\n\nYes. Using Deploy Now, you can easily deploy single page applications using React, Vue or Angular from GitHub.\n\nYes! As long as you are the owner of the GitHub account for your organization, you can also deploy your code using Deploy Now for free.\n\nFirst, you need to create a GitHub account and link it to Deploy Now. The Deploy Now setup wizard lets you link your repository, create a third-party repository, or get started using a Deploy Now sample project. You can then modify your code via GitHub, and Deploy Now will automatically update your website.\n\nOnce you have linked your GitHub account to Deploy Now, you can select an existing repository from the wizard. If you are working with multiple branches, you can choose which branch should be defined as the productive branch. Deploy Now automatically adds a configuration file to your repository that defines the GitHub Actions workflow.\n\nWe may have the ideal solution for you.\n\n© 2024 IONOS Inc.\n\nFederal and provincial sales taxes may apply. See General Terms and Conditions."
  },
  {
    "url": "https://developer.mozilla.org/en-US/",
    "title": "MDN Web Docs",
    "h1": "Resources for Developers,\nby Developers",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nDocumenting web technologies, including CSS, HTML, and JavaScript, since 2005.\n\nThe JavaScript console is an essential tool for web development. Learn new and fun ways to use the console to display data and debug your code.\n\nWhat can web designers and developers do to build a more sustainable web? This post explores the environmental impacts of web technologies and looks at some of the ways we can build greener websites.\n\nThe CSS Custom Highlight API provides a mechanism for styling arbitrary text ranges on a document by using JavaScript to create the ranges, and CSS to style them.\n\nThe <color> CSS data type represents a color. A <color> may also include an alpha-channel transparency value, indicating how the color should composite with its background.\n\nLift-off: The MDN Curriculum launch\ndeveloper.mozilla.org\n\nBaseline's evolution on MDN\ndeveloper.mozilla.org\n\nIntroducing the MDN Playground: Bring your code to life!\ndeveloper.mozilla.org\n\nchore(api): Remove screenshots from EmbedLiveSample calls\nmdn/content\n\n[es] sync translated content\nmdn/translated-content\n\nImprove the links meaning for the Accessibility and SEO.\nmdn/content\n\nRemove page for SVG onclick attribute\nmdn/content\n\nfeat(CSS): Add interactive example for `text-wrap`\nmdn/content\n\nUpdate index.md\nmdn/content\n\n[zh-cn] sync translated content\nmdn/translated-content\n\nzh-cn: fix the broken link in Regular Expressions guide\nmdn/translated-content\n\n[ja] sync translated content\nmdn/translated-content\n\nchore(zh-cn): sync translate content\nmdn/translated-content\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://mozilla.social/@mdn",
    "title": "Posts | MDN Web Docs (@MDN@mozilla.social) | Mozilla.social",
    "h1": "N/A",
    "paragraphs": "Sign in to follow profiles or hashtags, favourite, share and reply to posts, or interact from your account on a different server.\n\n@MDN@mozilla.social\n\nMDN Web Docs is an open-source, collaborative project that documents web platform technologies, including CSS, HTML, JavaScript, and Web APIs.\n\nWe also provide extensive learning resources for aspiring developers and students.\n\n@MDN@mozilla.social\n\nIn our latest post, explore how TestGrid (testgrid.io/) is reshaping test automation for the better.\n\nFrom automating mobile and web app testing to embracing codeless solutions, learn how they are streamlining quality assurance processes.\n\ndeveloper.mozilla.org/en-US/bl\n\n#MDNBlogUpdate #Sponsored"
  },
  {
    "url": "https://twitter.com/mozdevnet",
    "title": "MDN Web Docs (@MozDevNet) / X",
    "h1": "N/A",
    "paragraphs": ""
  },
  {
    "url": "https://github.com/mdn/",
    "title": "MDN Web Docs · GitHub",
    "h1": "Search code, repositories, users, issues, pull requests...",
    "paragraphs": "We read every piece of feedback, and take your input very seriously.\n\n\n            To see all available qualifiers, see our documentation.\n          \n\nMDN Web Docs is an open-source, collaborative project that documents web platform technologies, including CSS, HTML, JavaScript, and Web APIs. We also provide extensive 🧑‍🎓 learning resources for beginning developers and students.\n\nNote: By participating in and contributing to our projects and discussions, you acknowledge that you have read and agree to the Mozilla community participation guidelines.\n\nMDN's mission is to provide a blueprint for a better internet and empower a new generation of developers and content creators to build it.\n\nThe power of MDN Web Docs lies in its vast community of active readers and contributors. Since 2005, approximately 45,000 contributors have created the documentation we know and love. Together, contributors have created over 45,000 documents that make up an up-to-date, comprehensive, and free resource for web developers worldwide. In addition to English-language articles, over 35 volunteers lead translation and localization efforts for Chinese, French, Japanese, Korean, Portuguese, Russian, and Spanish.\n\nYou can be part of MDN Web Docs, whether it be through ✍️ content contributions, ⚙️ engineering, or ↔️ translation work. The MDN Web Docs project welcomes contributions from everyone who shares our goals and wants to contribute constructively and respectfully within our community. 🧘‍♂️\n\nWe're proud to have a global community of contributors and developers, who also want to say 👋\n\nYou can ask questions or get in touch with the MDN Web Docs team and community through any of our communication channels.\n\nThis repository contains compatibility data for Web technologies as displayed on MDN\n\n JSON  4.7k  1.9k\n\nThe content behind MDN Web Docs\n\n Markdown  8.6k  22.4k\n\nHome of the MDN live code editor interactive examples\n\n HTML  690  493\n\nThe source repository of all translated content for MDN Web Docs\n\n Markdown  1.6k  7.9k\n\nThe platform code behind MDN Web Docs\n\n TypeScript  1.1k  440\n\nA place to provide feedback and suggestions for MDN Web Docs\n\n 114  44\n\nThe platform code behind MDN Web Docs\n\nThe content behind MDN Web Docs\n\nThe source repository of all translated content for MDN Web Docs\n\nCode examples that accompany various MDN DOM and Web API documentation pages\n\nCode examples that accompany the MDN CSS documentation\n\nThis repository contains compatibility data for Web technologies as displayed on MDN\n\nBuilder of Bits aka The MDN Web Docs interactive examples, example builder\n\nThe clean kuma (🤖🧹)\n\nSample todo app built with the React/ReactDOM framework.\n\nHome of the MDN live code editor interactive examples"
  },
  {
    "url": "https://developer.mozilla.org/en-US/blog/rss.xml",
    "title": "",
    "h1": "N/A",
    "paragraphs": ""
  },
  {
    "url": "https://developer.mozilla.org/en-US/about",
    "title": "About MDN",
    "h1": "Build it better",
    "paragraphs": "GitLab is the most comprehensive AI-powered DevSecOps Platform. Software. Faster.\nBuild Software Fast\nMozilla ads\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nMDN Web Docs is an open-source, collaborative project documenting Web platform technologies, including CSS, HTML, JavaScript, and Web APIs. We also provide an extensive set of learning resources for beginning developers and students.\n\nWe're always striving to connect developers more seamlessly with the tools and information they need to easily build projects on the open Web. Since our beginnings in 2005, Mozilla and the community have amassed around 45,000 pages of free, open-source content.\n\nThis guiding principle has made MDN Web Docs the go-to repository of independent information for developers, regardless of brand, browser or platform. We are an open community of devs, writers, and other technologists building resources for a better Web, with over 17 million monthly MDN users from all over the world. Anyone can contribute, and each of the 45,000 individuals who have done so over the past decades has strengthened and improved the resource. We also receive content contributions from our partners, including Microsoft, Google, Samsung, Igalia, W3C and others. Together we continue to drive innovation on the Web and serve the common good.\n\nThrough our GitHub documentation repository, contributors can make changes, submit pull requests, have their contributions reviewed and then merged with existing content. Through this workflow, we welcome the vast knowledge and experience of our developer community while maintaining a high level of quality, accurate content.\n\nOur constant quest for innovation starts here, with you. Every part of MDN (docs, demos and the site itself) springs from our incredible open community of developers. Please join us!\nGet Involved →\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://www.mozilla.org/en-US/careers/listings/?team=ProdOps",
    "title": "Mozilla Careers — All open positions at Mozilla",
    "h1": "Feel good about your work again",
    "paragraphs": "Firefox is no longer supported on Windows 8.1 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\n\n      \n        Download Firefox ESR 64-bit\n      \n    \n\n\n      \n        Download Firefox ESR 32-bit\n      \n    \n\nFirefox is no longer supported on macOS 10.14 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\nGet the not-for-profit-backed browser on Windows, Mac or Linux.\n\nGet the customizable mobile browser for Android smartphones.\n\nGet the mobile browser for your iPhone or iPad.\n\nSimply private mobile browsing.\n\nLearn how Firefox treats your data with respect.\n\nRead about new Firefox features and ways to stay safe online.\n\nGet the details on the latest Firefox updates.\n\nView all Firefox Browsers\n\nSee if your email has appeared in a company’s data breach.\n\nHelp prevent Facebook from collecting your data outside their site.\n\nSave and discover the best stories from across the web.\n\nGet protection beyond your browser, on all your devices.\n\nLearn how each Firefox product protects and respects your data.\n\nSign up for new accounts without handing over your email address.\n\nNew features and tools for a customized MDN experience\n\nView all Products\n\nLearn about the values and principles that guide our mission.\n\nMeet the not-for-profit behind Firefox that stands for a better web.\n\nJoin the fight for a healthy internet.\n\nStories about how our people and products are changing the world for the better.\n\nMeet the team that’s building technology for a better internet.\n\nWork for a mission-driven organization that makes people-first products.\n\nLearn about Mozilla and the issues that matter to us.\n\n\n          More About Mozilla\n        \n\nGet the Firefox browser built just for developers.\n\nCheck out the home for web developer resources.\n\nDonate your voice so the future of the web can hear everyone.\n\nDiscover ways to bring bright ideas to life.\n\nBring your drive, your creativity, your big ideas and your new perspectives to make the difference we’re aiming for.\n\nNo jobs found that match the selected filters.\n\nSubscribe to our open positions RSS feed\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://support.mozilla.org/en-US/products/mdn-plus",
    "title": "MDN Plus Help",
    "h1": "MDN Plus Support",
    "paragraphs": "\n                Get support from our contributors or staff members.\n              \n\n\n                Dig into the knowledge base, tips and tricks, troubleshooting, and so much more.\n              \n\n\n                Find help for common issues and learn about the benefits a Mozilla account provides.\n              \n\n\n        Popular Searches:\n\n        \n          Update Firefox\n          Profiles\n          Firefox Sync\n        \n      \n\nExplore the knowledge base.\n\nWe’re here for you! If you haven’t found a solution after exploring our help articles, you can get in touch with our support team.\n\nMDN Plus allows you to auto-renew, so you don’t have to worry about your subscription. Learn the steps to update your payment method in this article.\n\nMDN is displayed in light mode by default. You can enable dark mode and switch back to light mode at any time on any page.\n\nMDN offline allows you to browse MDN without an internet connection. It can also enable you to have a faster experience while saving data.\n\nGet notifications for the latest developments on MDN and in our Android and iOS apps. You can watch MDN Plus content and get customizable notifications when documentation changes, CSS features launch and APIs ship.\n\nGrow and share your expertise with others. Answer questions and improve our knowledge base.\n\nLearn More\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\n\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/MDN/Community/Issues",
    "title": "Guidelines to open and work on issues - The MDN Web Docs project | MDN",
    "h1": "Guidelines to open and work on issues",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.Mozilla ads\n\nView the web from your users’ perspective. Use Mozilla VPN to test software globally.\nMozilla ads\n\nAs a contributor, you can report and work on issues.\n\nAfter you report an issue, the issue gets triaged. Issue triaging is typically done by people assigned the role of a maintainer or an owner.\n\nWhile reporting an issue or participating in a conversation in an issue, always ensure that your inputs are contributing to the overall progress of the project. Consider whether the issues you open and your comments in an issue are constructive and on topic and are not just adding noise.\n\nDo the following:\n\nAvoid doing the following:\n\nIssues are used to track bugs. An issue must be a single actionable task or a collection of related actionable tasks and must have a clear outcome.\n\nIf you think you've found a bug with the content on MDN Web Docs or with the look and feel of the website, search the current open issues in the relevant repository and make sure nobody else has reported the issue.\n\nIf the issue you're opening is not to report a bug but to perform a series of tasks, you can create the issue as a task list. Explain the context or reason for performing the tasks in the description. Ensure that you list all the actionable tasks as a checklist.\n\nFor example:\n\nRemember that if you take on an issue, the expectation is for the work to be completed in a timely manner. If you're not able to make any progress for a week after being assigned or can no longer complete the required task, leave a comment and unassign yourself from the issue.\n\nThese are the general steps for working on an issue:\n\nNote: An issue with the needs triage label indicates that the MDN Web Docs core team has not reviewed the issue yet, and you shouldn't begin work on it.\n\nIf you spot a bug — whether it's a problem with the website's look and feel or an error in documentation — you can try to fix it yourself. Learn how you can contribute by going through our contribution guide.\n\nIf the bug is small, such as a typo or a minor sentence improvement, or involves an uncontroversial fix, submit a pull request with the changes.\n\nFor all other type of bugs, begin by opening the issue. Add a comment about your intent to work on the issue and if possible, describe your proposed solution or steps to fix the issue. Wait for the issue to be triaged, so that the MDN Web Docs team can verify that the issue is legit and approves your proposed solution.\n\nNote: If you open a pull request before the issue has been triaged, your time and effort might go waste if the linked issue is deemed invalid or the solution does not match the one expected by the MDN Web Docs team. After the issue is triaged, assign the issue to yourself.\n\nUsing the guidelines on working on an issue, try to fix the problem by updating the appropriate source, such as:\n\nEach repository includes useful information to guide you on how to contribute.\n\nIf you are a maintainer or an owner in the MDN Web Docs GitHub organization, you are responsible for triaging issues in one or more MDN Web Docs repository.\n\nThe overall process for triaging includes some general and some issue-specific tasks.\n\nThese are the guidelines to follow while triaging each issue.\n\nThese are some of the things to keep in mind while reviewing the validity of an issue:\n\nReview each issue against the following checklist to ensure that the issue contains the described information for someone to start working on the bug:\n\nIf any of the above information is not present, then you should ask the author of the issue to provide these details, and add the needs info label to the issue. Resume triaging the issue only after those details have been provided (after which, you can remove the needs info label). It is okay to wait for up to a week to get a response from the author.\n\nFor each bug, set a priority label based on the severity of the issue to help people who want to work on the most important issues or areas.\n\nIn general, critical issues should be fixed immediately and are most likely handled by MDN Web Docs staff and peers.\n\nIf possible, add information that can help contributors to fix the issue. The information can be in the form of steps, general approach, links to other similar fixed issues, or reading resources. A well-laid out plan or steps is especially required in issues that are labeled good first issue and can help ramp up new contributors quickly. You can time-box this task to 5-10 minutes.\n\nFor example, as a triager, you can add the following information to the issue you are triaging:\n\nNext, set the following labels as appropriate:\n\nNote: After the triage process is complete, remove the needs triage label.\n\nThis page was last modified on Oct 11, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://developer.mozilla.org/en-US/community",
    "title": "Contribute to MDN",
    "h1": "Community for a better web",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nThe power of MDN lies in its vast, vital community of active users and contributors. Since 2005, approximately 45,000 contributors have created the documentation we know and love. Together, contributors have created over 45,000 documents that make up an up-to-date, comprehensive, and free resource for web developers around the world. In addition to English-language articles, over 35 volunteers lead translation and localization efforts for Chinese, French, Japanese, Korean, Portuguese, Russian, and Spanish. With over 200 commits per week, the culture of active contribution is going strong. And you can be a part of it.\n\nMDN collaborates with partners from across the industry, including standards bodies, browser vendors, and other industry leaders. Since 2017, these collaborators are formally represented through the Product Advisory Board (PAB). MDN is an influential resource and the PAB helps ensure that MDN’s influence puts the web first, not any one vendor or organization, and respects the needs of web developers across the industry. Each quarter, the PAB meets to discuss problems, prioritize content creation, and make connections for future collaborations.\n\nMDN has a unique place right now as a vendor-neutral and authoritative documentation and information resource for web developers. The MDN PAB has helped to bring feedback from the wider web community (including standards engineers, web browser makers and open source developers) into MDN to help keep it strong. As a member of the web community and a fan of MDN it’s been great to be a part of.\n\nOpen Web Docs (OWD), an independent open source organization, is one of the most productive contributors to MDN Web Docs. OWD contributes as part of their mission to support “web platform documentation for the benefit of web developers & designers worldwide.” The team at OWD has led or contributed to many projects to improve documentation on MDN. They're an invaluable partner in the day-to-day work of making MDN. Read more about OWD’s activities in their 2022 Impact and Transparency Report and get continuous updates on their Mastodon account.\n\nOpen Web Docs strongly believes in MDN as critical infrastructure for the web platform. As a vendor-neutral organization, we are supporting MDN with an independent editorial voice and with the needs of the global community of web developers and designers in mind.\n\nMDN's resources are entirely available under various open source licenses. Detailed information on licensing for reuse of MDN content, especially regarding copyrights and attribution, can be found here.\n\nWe are an open community of developers building resources for a better web, regardless of brand, browser, or platform. Anyone can contribute, and each person who does makes us stronger. Together we can continue to drive innovation on the web to serve the greater good. It starts here, with you. Join us!\n\nNo matter your specific level of expertise, individual strengths, and interests in coding or writing, there are many ways for you to get involved and tackle important documentation tasks.\n\nAre you ready to become an active part of the MDN community but not sure where to begin? We've got you covered. See our step-by-step directions for making your first contribution to MDN on GitHub.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://discourse.mozilla.org/c/mdn/236",
    "title": "Latest MDN topics - Mozilla Discourse",
    "h1": "N/A",
    "paragraphs": ""
  },
  {
    "url": "https://discord.com/invite/Gt4Qf6q67h",
    "title": "Discord",
    "h1": "MDN Web Docs Community",
    "paragraphs": ""
  },
  {
    "url": "https://hacks.mozilla.org/",
    "title": "Home - Mozilla Hacks - the Web developer blog",
    "h1": "HACKS",
    "paragraphs": "Following the success of Interop 2023, we are pleased to confirm that the project will continue in 2024 with a new selection of focus areas, representing areas of the web platform where we think we can have the biggest positive impact on users and web developers.\n\nSign up for the Mozilla Developer Newsletter:\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n  \n\nDuring the Firefox 120 beta cycle, a new crash signature appeared on our radars with significant volume. Engineers working on Firefox, explore the subtle pitfalls of combining compiler flags.\n\nPuppeteer now supports the next-generation, cross-browser WebDriver BiDi standard. This new protocol makes it easy for web developers to write automated tests that work across multiple browser engines.\n\nA month ago, we introduced our Nightly package for Debian-based Linux distributions. Today, we are proud to announce we made our .deb package available for Developer Edition and Beta!\n\nWe're thrilled to announce the first release of llamafile, inviting the open source community to join this groundbreaking project. With llamafile, you can effortlessly convert large language model (LLM) weights into executables. Imagine transforming a 4GB file of LLM weights into a binary that runs smoothly on six different operating systems, without requiring installation.\n\nMozilla has just launched the AI Guide, a collaborative hub for developers to join forces, inspire each other, and lead the way in groundbreaking generative AI advancements. The AI Guide’s initial focus begins with language models and the aim is to become a collaborative community-driven resource covering other types of models.\n\nTo deliver against our vision and enable a better online experience for everyone, we’ve been working hard on making Firefox even faster. We’re extremely happy to report that this has resulted in a significant improvement in speed over the past year.\n\nProtecting user privacy is a core element of Mozilla’s vision for the web and the internet at large. In pursuit of this vision, we’re pleased to announce new partnerships with Fastly and Divvi Up to deploy privacy-preserving technology in Firefox.\n\nFirefox performance on Vue.js has improved significantly throughout the year. Most recently, we sped up reactivity with Proxy optimizations. This change landed in Firefox 118, so it’s currently on Beta and will ride along to Release by the end of September.\n\nThis blog post will walk through how we developed UniFFI: a Rust library for auto-generating foreign language bindings. We will walk through some of the issues that arose along the way and how we handled them.\n\nArtificial intelligence may well prove one of the most impactful and disruptive technologies to come along in years. We want to understand, support, and contribute to these efforts because we believe that they offer one of the best ways to help ensure that the AI systems that emerge are truly trustworthy. With this in mind, a small team within Mozilla’s innovation group recently undertook a hackathon at our headquarters in San Francisco. Our objective: build a Mozilla internal chatbot prototype.\n\nExcept where otherwise noted, content on this site is licensed under the Creative Commons Attribution Share-Alike License v3.0 or any later version."
  },
  {
    "url": "https://www.mozilla.org/en-GB/",
    "title": "Internet for people, not profit — Mozilla (UK)",
    "h1": "Mission-driven. People-powered.",
    "paragraphs": "Firefox is no longer supported on Windows 8.1 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\n\n      \n        Download Firefox ESR 64-bit\n      \n    \n\n\n      \n        Download Firefox ESR 32-bit\n      \n    \n\nFirefox is no longer supported on macOS 10.14 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\nGet the not-for-profit-backed browser on Windows, Mac or Linux.\n\nGet the customisable mobile browser for Android smartphones.\n\nGet the mobile browser for your iPhone or iPad.\n\nSimply private mobile browsing.\n\nLearn how Firefox treats your data with respect.\n\nRead about new Firefox features and ways to stay safe online.\n\nGet the details on the latest Firefox updates.\n\nView all Firefox Browsers\n\nSee if your email has appeared in a company’s data breach.\n\nHelp prevent Facebook from collecting your data outside their site.\n\nSave and discover the best stories from across the web.\n\nGet protection beyond your browser, on all your devices.\n\nLearn how each Firefox product protects and respects your data.\n\nSign up for new accounts without handing over your email address.\n\nNew features and tools for a customised MDN experience\n\nView all Products\n\nLearn about the values and principles that guide our mission.\n\nMeet the not-for-profit behind Firefox that stands for a better web.\n\nJoin the fight for a healthy internet.\n\nStories about how our people and products are changing the world for the better.\n\nMeet the team that’s building technology for a better internet.\n\nWork for a mission-driven organisation that makes people-first products.\n\nLearn about Mozilla and the issues that matter to us.\n\n\n          More About Mozilla\n        \n\nGet the Firefox browser built just for developers.\n\nCheck out the home for web developer resources.\n\nDonate your voice so the future of the web can hear everyone.\n\nDiscover ways to bring bright ideas to life.\n\nWe’re not a normal tech company. The things we create prioritise people and their privacy over profits. We exist to make the internet a healthier, happier place for everyone.\n\n“The health of the internet and online life is why we exist.”\n\n“Mozilla is taking bets to show the world there’s a business to be made with trustworthy AI. That includes putting things like human rights, data protection and transparency at the core of how these complex systems work.”\n\nMozilla consists of two organisations. The Mozilla Corporation is wholly owned by the non-profit 501(c) Mozilla Foundation. Which means we aren’t beholden to any shareholders — only to our mission.\n\nYour voice. Your code. Your ideas. There are literally thousands of ways you can contribute to Mozilla.\n\nThe Mozilla project was founded in San Francisco in 1998, when the Netscape browser made the radical decision to give away its program code to the public to build on and improve. At that time, one company had a virtual monopoly on how people experienced the internet.\n\nEventually, the open-source Mozilla project morphed into the wildly popular first version of Firefox.\n\nToday, Mozilla continues its movement toward a better internet with millions of active community members spanning the globe, advocating for ethical tech, trustworthy AI and producing privacy-first products that give more power to the people.\n\nGet news and tips from Mozilla to stay safe and informed on everything that makes the web a healthier place.\n\n\n  Afghanistan\n\n  Akrotiri\n\n  Albania\n\n  Algeria\n\n  American Samoa\n\n  Andorra\n\n  Angola\n\n  Anguilla\n\n  Antarctica\n\n  Antigua and Barbuda\n\n  Argentina\n\n  Armenia\n\n  Aruba\n\n  Ashmore and Cartier Islands\n\n  Australia\n\n  Austria\n\n  Azerbaijan\n\n  Bahamas, The\n\n  Bahrain\n\n  Baker Island\n\n  Bangladesh\n\n  Barbados\n\n  Bassas da India\n\n  Belarus\n\n  Belgium\n\n  Belize\n\n  Benin\n\n  Bermuda\n\n  Bhutan\n\n  Bolivia\n\n  Bosnia and Herzegovina\n\n  Botswana\n\n  Bouvet Island\n\n  Brazil\n\n  British Indian Ocean Territory\n\n  Brunei\n\n  Bulgaria\n\n  Burkina Faso\n\n  Burma\n\n  Burundi\n\n  Cambodia\n\n  Cameroon\n\n  Canada\n\n  Cape Verde\n\n  Caribbean Netherlands\n\n  Cayman Islands\n\n  Central African Republic\n\n  Chad\n\n  Chile\n\n  China\n\n  Christmas Island\n\n  Clipperton Island\n\n  Cocos (Keeling) Islands\n\n  Colombia\n\n  Comoros\n\n  Congo (Brazzaville)\n\n  Congo (Kinshasa)\n\n  Cook Islands\n\n  Coral Sea Islands\n\n  Costa Rica\n\n  Croatia\n\n  Cuba\n\n  Curaçao\n\n  Cyprus\n\n  Czechia\n\n  Côte d’Ivoire\n\n  Denmark\n\n  Dhekelia\n\n  Diego Garcia\n\n  Djibouti\n\n  Dominica\n\n  Dominican Republic\n\n  Ecuador\n\n  Egypt\n\n  El Salvador\n\n  Equatorial Guinea\n\n  Eritrea\n\n  Estonia\n\n  Eswatini\n\n  Ethiopia\n\n  Europa Island\n\n  Falkland Islands (Islas Malvinas)\n\n  Faroe Islands\n\n  Fiji\n\n  Finland\n\n  France\n\n  French Guiana\n\n  French Polynesia\n\n  French Southern and Antarctic Lands\n\n  Gabon\n\n  Gambia, The\n\n  Gaza Strip\n\n  Georgia\n\n  Germany\n\n  Ghana\n\n  Gibraltar\n\n  Glorioso Islands\n\n  Greece\n\n  Greenland\n\n  Grenada\n\n  Guadeloupe\n\n  Guam\n\n  Guatemala\n\n  Guernsey\n\n  Guinea\n\n  Guinea-Bissau\n\n  Guyana\n\n  Haiti\n\n  Heard Island and McDonald Islands\n\n  Honduras\n\n  Hong Kong\n\n  Howland Island\n\n  Hungary\n\n  Iceland\n\n  India\n\n  Indonesia\n\n  Iran\n\n  Iraq\n\n  Ireland\n\n  Isle of Man\n\n  Israel\n\n  Italy\n\n  Jamaica\n\n  Jan Mayen\n\n  Japan\n\n  Jarvis Island\n\n  Jersey\n\n  Johnston Atoll\n\n  Jordan\n\n  Juan de Nova Island\n\n  Kazakhstan\n\n  Kenya\n\n  Kingman Reef\n\n  Kiribati\n\n  Korea, North\n\n  Korea, South\n\n  Kosovo\n\n  Kuwait\n\n  Kyrgyzstan\n\n  Laos\n\n  Latvia\n\n  Lebanon\n\n  Lesotho\n\n  Liberia\n\n  Libya\n\n  Liechtenstein\n\n  Lithuania\n\n  Luxembourg\n\n  Macau\n\n  Madagascar\n\n  Malawi\n\n  Malaysia\n\n  Maldives\n\n  Mali\n\n  Malta\n\n  Marshall Islands\n\n  Martinique\n\n  Mauritania\n\n  Mauritius\n\n  Mayotte\n\n  Mexico\n\n  Micronesia, Federated States of\n\n  Midway Islands\n\n  Moldova\n\n  Monaco\n\n  Mongolia\n\n  Montenegro\n\n  Montserrat\n\n  Morocco\n\n  Mozambique\n\n  Namibia\n\n  Nauru\n\n  Navassa Island\n\n  Nepal\n\n  Netherlands\n\n  New Caledonia\n\n  New Zealand\n\n  Nicaragua\n\n  Niger\n\n  Nigeria\n\n  Niue\n\n  Norfolk Island\n\n  North Macedonia\n\n  Northern Mariana Islands\n\n  Norway\n\n  Oman\n\n  Pakistan\n\n  Palau\n\n  Palmyra Atoll\n\n  Panama\n\n  Papua New Guinea\n\n  Paracel Islands\n\n  Paraguay\n\n  Peru\n\n  Philippines\n\n  Pitcairn Islands\n\n  Poland\n\n  Portugal\n\n  Puerto Rico\n\n  Qatar\n\n  Romania\n\n  Russia\n\n  Rwanda\n\n  Réunion\n\n  Saint Barthélemy\n\n  Saint Helena, Ascension, and Tristan da Cunha\n\n  Saint Kitts and Nevis\n\n  Saint Lucia\n\n  Saint Martin\n\n  Saint Pierre and Miquelon\n\n  Saint Vincent and the Grenadines\n\n  Samoa\n\n  San Marino\n\n  Saudi Arabia\n\n  Senegal\n\n  Serbia\n\n  Seychelles\n\n  Sierra Leone\n\n  Singapore\n\n  Sint Maarten\n\n  Slovakia\n\n  Slovenia\n\n  Solomon Islands\n\n  Somalia\n\n  South Africa\n\n  South Georgia and South Sandwich Islands\n\n  South Sudan\n\n  Spain\n\n  Spratly Islands\n\n  Sri Lanka\n\n  Sudan\n\n  Suriname\n\n  Svalbard\n\n  Sweden\n\n  Switzerland\n\n  Syria\n\n  São Tomé and Príncipe\n\n  Taiwan\n\n  Tajikistan\n\n  Tanzania\n\n  Thailand\n\n  Timor-Leste\n\n  Togo\n\n  Tokelau\n\n  Tonga\n\n  Trinidad and Tobago\n\n  Tromelin Island\n\n  Tunisia\n\n  Turkey\n\n  Turkmenistan\n\n  Turks and Caicos Islands\n\n  Tuvalu\n\n  Uganda\n\n  Ukraine\n\n  United Arab Emirates\n\n  United Kingdom\n\n  United States\n\n  Uruguay\n\n  Uzbekistan\n\n  Vanuatu\n\n  Vatican City\n\n  Venezuela\n\n  Vietnam\n\n  Virgin Islands, British\n\n  Virgin Islands, U.S.\n\n  Wake Island\n\n  Wallis and Futuna\n\n  West Bank\n\n  Western Sahara\n\n  Yemen\n\n  Zambia\n\n  Zimbabwe\n\n\n\n\n  Deutsch\n\n  English\n\n  Français\n\n\n\n\n            \n               HTML\n            \n            \n               Text\n            \n          \n\n\n          \n             I’m okay with Mozilla handling my info as explained in this Privacy Notice\n          \n        \n\nSign Up Now\nWe will only send you Mozilla-related information.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons licence.\n\nMozilla\n\nFree – In Google Play\n\nFree – In the App Store"
  },
  {
    "url": "https://www.mozilla.org/en-US/privacy/websites/",
    "title": "Websites, Communications & Cookies Privacy Notice — Mozilla",
    "h1": "Websites, Communications & Cookies Privacy Notice",
    "paragraphs": "Firefox is no longer supported on Windows 8.1 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\n\n      \n        Download Firefox ESR 64-bit\n      \n    \n\n\n      \n        Download Firefox ESR 32-bit\n      \n    \n\nFirefox is no longer supported on macOS 10.14 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\nGet the not-for-profit-backed browser on Windows, Mac or Linux.\n\nGet the customizable mobile browser for Android smartphones.\n\nGet the mobile browser for your iPhone or iPad.\n\nSimply private mobile browsing.\n\nLearn how Firefox treats your data with respect.\n\nRead about new Firefox features and ways to stay safe online.\n\nGet the details on the latest Firefox updates.\n\nView all Firefox Browsers\n\nSee if your email has appeared in a company’s data breach.\n\nHelp prevent Facebook from collecting your data outside their site.\n\nSave and discover the best stories from across the web.\n\nGet protection beyond your browser, on all your devices.\n\nLearn how each Firefox product protects and respects your data.\n\nSign up for new accounts without handing over your email address.\n\nNew features and tools for a customized MDN experience\n\nView all Products\n\nLearn about the values and principles that guide our mission.\n\nMeet the not-for-profit behind Firefox that stands for a better web.\n\nJoin the fight for a healthy internet.\n\nStories about how our people and products are changing the world for the better.\n\nMeet the team that’s building technology for a better internet.\n\nWork for a mission-driven organization that makes people-first products.\n\nLearn about Mozilla and the issues that matter to us.\n\n\n          More About Mozilla\n        \n\nGet the Firefox browser built just for developers.\n\nCheck out the home for web developer resources.\n\nDonate your voice so the future of the web can hear everyone.\n\nDiscover ways to bring bright ideas to life.\n\nWe care about your privacy. When Mozilla (that’s us) collects information about you, our Mozilla Privacy Policy describes how we handle that information.\n\nThis privacy notice applies to Mozilla operated websites and mobile apps, which include the domains mozilla.org, and firefox.com, among others. This includes, for example, addons.mozilla.org, bugzilla.mozilla.org, careers.mozilla.org, community.mozilla.org, developer.mozilla.org, foundation.mozilla.org, people.mozilla.org, support.mozilla.org, and wiki.mozilla.org.\n\nWe may receive personal information from you based on your interaction with us on social media platforms, if you submit a job, intern, grant or fellow application, if you volunteer as a Mozilla community member, if you submit user feedback or a request to us, if you sign up for an account or for a subscription, or if you engage with a product or policy campaign. \n\nSocial Media: If you engage with our accounts on external social media platforms, such as X (formerly Twitter) and Facebook, we may receive personal information about you. If you use these networks, their privacy policies apply, and you are encouraged to read them.\n\nJob, Intern, Grant & Fellow Applicants: Applicants for employment, internship, grant, or fellowship opportunities with Mozilla are required to give us a name, street address, telephone number, email address, and resume, and sometimes additional information as well. We use this information to process and evaluate applications and to communicate with applicants about opportunities. We use Greenhouse to handle employment and intern applications, and Fluxx.io to handle fellowship and MOSS grant applications.\n\nContributors: Volunteering for Mozilla as a community contributor may require Mozilla and others to communicate with you at the email address that you provide in connection to your contribution and to recognize your efforts. If you contribute to Bugzilla, or our code bases, then your email address and possibly your name will be publicly available to all internet users. If you create an account on Mozilla Connect (platform powered by Khoros, which has its own privacy notice), your name, your avatar, your posts and replies and other information you share will be accessible to Mozilla and other community members. If you create a profile at people.mozilla.org, it will be accessible to Mozilla employees and Mozilla contributors; you can edit your profile data at Profile Settings. We sometimes use contributor information from sources (such as Bugzilla) in dashboards to visually share aggregated data on the Mozilla community. An example is https://wiki.mozilla.org/Contribute/Dashboards. Where possible, we try to minimize contact information that is publicly displayed.\n\nUser Feedback: You can provide feedback to us on our products and services on webpages like connect.mozilla.org, through an in-product experience, or through channels such as email, Bugzilla, Matrix, a social media account, our Get Involved page, or through a group like Student Ambassadors. Please minimize the personal information you choose to share on these forums because your comments may be accessible to the public.\n\nAccounts & Subscriptions: Some websites, for example Add-Ons for Firefox, Relay, Monitor, and MDN, require account creation. For account management we use Mozilla accounts, GitHub, or custom systems; learn more about how to manage your Mozilla account data. You may periodically receive emails in connection with your account or through subscriptions. Our email management vendors are SalesForce Marketing Cloud, Amazon Simple Email Service, Mailchimp, SocketLabs, Campaign Monitor or Acoustic, and you can unsubscribe using the link at the bottom of the relevant email. \n\nProduct & Policy Campaigns: Some of our webpages host product or policy campaigns. For example, you can request a link by email or SMS to install Firefox on your mobile device or petition your legislators on internet issues. We may use third parties to manage these campaigns and handle any data that you choose to submit. \n\nWe may use cookies, clear GIFs, third-party web analytics, device information, and IP addresses for functionality and to better understand user interaction with our products, services, and communications. \n\nFunctionality: We may use information such as cookies, device information, and IP addresses to enhance functionality of certain products, services, and communications. For example:\n\nMetrics: We may also use cookies, device information, and IP addresses, along with clear GIFs, cookies and third-party services to help us understand in the aggregate how users engage with our products, services, communications, websites, online campaigns, snippets, devices, and other platforms. We use:\n\nFraud Prevention: Mozilla has implemented third-party technology, Google’s Invisible reCAPTCHA, that operates in the background on some of our websites in order to identify fraudulent activity. Use of the Invisible reCAPTCHA is governed by the Google Privacy Policy and Terms of Use.\n\nYou can control individual cookie preferences, indicate your cookie preferences to others, and opt out of web analytics and optimization tools. \n\nCookie History: You can accept or decline individual cookies in your preferences in the Tools/Options/Privacy history section. Note that certain features of our products and services may not function properly without the aid of cookies. \n\nDo Not Track: Mozilla does not track users across third-party websites to provide targeted advertising. In addition, if you have configured your browser to send a “Do Not Track” signal when accessing our websites, Mozilla will not utilize any of the tools described in the Metrics section.\n\nEmail: Our marketing communications are optional to receive and you can unsubscribe from the footer of the email or by updating your Mozilla email preferences, or for Thunderbird’s newsletter, on the Thunderbird website.\n\nAnalytics & Optimization: Follow the instructions below to prevent data collection about your visits to Mozilla websites:\n\nSocial Media: The social sharing buttons on Mozilla websites are designed not to share data with the applicable social media provider until you specifically click the relevant social media icon.\n\nSome Mozilla websites allow you to make purchases (such as apps or gear), contribute funds to specific Mozilla projects, or make donations in support of Mozilla public and charitable programs. These transactions are often handled by Mozilla’s third-party vendors.\n\nPayment Processing: When you purchase something via a Mozilla website, contribute funds or make donations, you will send payment through one of our third-party payment providers: Stripe, Apple Pay, PayPal, Venmo or Google Pay. Mozilla receives a record of your account (including your billing address and the last four digits of your payment method) and (where relevant) the status of your account’s subscription; we may also receive your name, mailing address, and/or email address. This data is used for payment processing, fraud detection and record-keeping purposes. \n\nContact and Donation Information: We use Acoustic, Salesforce, Fundraise Up and Campaign Monitor to email receipts and store records, which are retained for 10 years from the date of last payment. If you make a donation to the Mozilla Foundation or Thunderbird, we use Fundraise Up to manage our donations and provide transactional receipts to donors.\n\nTo make requests regarding your personal data, please contact us through our Data Subject Access Request Portal. If you have any other questions regarding personal data or our privacy practices, please contact us at compliance@mozilla.com. We respond to all requests we receive from individuals wishing to exercise their data protection rights in accordance with applicable data protection laws.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://www.mozilla.org/en-US/privacy/websites/#cookies",
    "title": "Websites, Communications & Cookies Privacy Notice — Mozilla",
    "h1": "Websites, Communications & Cookies Privacy Notice",
    "paragraphs": "Firefox is no longer supported on Windows 8.1 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\n\n      \n        Download Firefox ESR 64-bit\n      \n    \n\n\n      \n        Download Firefox ESR 32-bit\n      \n    \n\nFirefox is no longer supported on macOS 10.14 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\nGet the not-for-profit-backed browser on Windows, Mac or Linux.\n\nGet the customizable mobile browser for Android smartphones.\n\nGet the mobile browser for your iPhone or iPad.\n\nSimply private mobile browsing.\n\nLearn how Firefox treats your data with respect.\n\nRead about new Firefox features and ways to stay safe online.\n\nGet the details on the latest Firefox updates.\n\nView all Firefox Browsers\n\nSee if your email has appeared in a company’s data breach.\n\nHelp prevent Facebook from collecting your data outside their site.\n\nSave and discover the best stories from across the web.\n\nGet protection beyond your browser, on all your devices.\n\nLearn how each Firefox product protects and respects your data.\n\nSign up for new accounts without handing over your email address.\n\nNew features and tools for a customized MDN experience\n\nView all Products\n\nLearn about the values and principles that guide our mission.\n\nMeet the not-for-profit behind Firefox that stands for a better web.\n\nJoin the fight for a healthy internet.\n\nStories about how our people and products are changing the world for the better.\n\nMeet the team that’s building technology for a better internet.\n\nWork for a mission-driven organization that makes people-first products.\n\nLearn about Mozilla and the issues that matter to us.\n\n\n          More About Mozilla\n        \n\nGet the Firefox browser built just for developers.\n\nCheck out the home for web developer resources.\n\nDonate your voice so the future of the web can hear everyone.\n\nDiscover ways to bring bright ideas to life.\n\nWe care about your privacy. When Mozilla (that’s us) collects information about you, our Mozilla Privacy Policy describes how we handle that information.\n\nThis privacy notice applies to Mozilla operated websites and mobile apps, which include the domains mozilla.org, and firefox.com, among others. This includes, for example, addons.mozilla.org, bugzilla.mozilla.org, careers.mozilla.org, community.mozilla.org, developer.mozilla.org, foundation.mozilla.org, people.mozilla.org, support.mozilla.org, and wiki.mozilla.org.\n\nWe may receive personal information from you based on your interaction with us on social media platforms, if you submit a job, intern, grant or fellow application, if you volunteer as a Mozilla community member, if you submit user feedback or a request to us, if you sign up for an account or for a subscription, or if you engage with a product or policy campaign. \n\nSocial Media: If you engage with our accounts on external social media platforms, such as X (formerly Twitter) and Facebook, we may receive personal information about you. If you use these networks, their privacy policies apply, and you are encouraged to read them.\n\nJob, Intern, Grant & Fellow Applicants: Applicants for employment, internship, grant, or fellowship opportunities with Mozilla are required to give us a name, street address, telephone number, email address, and resume, and sometimes additional information as well. We use this information to process and evaluate applications and to communicate with applicants about opportunities. We use Greenhouse to handle employment and intern applications, and Fluxx.io to handle fellowship and MOSS grant applications.\n\nContributors: Volunteering for Mozilla as a community contributor may require Mozilla and others to communicate with you at the email address that you provide in connection to your contribution and to recognize your efforts. If you contribute to Bugzilla, or our code bases, then your email address and possibly your name will be publicly available to all internet users. If you create an account on Mozilla Connect (platform powered by Khoros, which has its own privacy notice), your name, your avatar, your posts and replies and other information you share will be accessible to Mozilla and other community members. If you create a profile at people.mozilla.org, it will be accessible to Mozilla employees and Mozilla contributors; you can edit your profile data at Profile Settings. We sometimes use contributor information from sources (such as Bugzilla) in dashboards to visually share aggregated data on the Mozilla community. An example is https://wiki.mozilla.org/Contribute/Dashboards. Where possible, we try to minimize contact information that is publicly displayed.\n\nUser Feedback: You can provide feedback to us on our products and services on webpages like connect.mozilla.org, through an in-product experience, or through channels such as email, Bugzilla, Matrix, a social media account, our Get Involved page, or through a group like Student Ambassadors. Please minimize the personal information you choose to share on these forums because your comments may be accessible to the public.\n\nAccounts & Subscriptions: Some websites, for example Add-Ons for Firefox, Relay, Monitor, and MDN, require account creation. For account management we use Mozilla accounts, GitHub, or custom systems; learn more about how to manage your Mozilla account data. You may periodically receive emails in connection with your account or through subscriptions. Our email management vendors are SalesForce Marketing Cloud, Amazon Simple Email Service, Mailchimp, SocketLabs, Campaign Monitor or Acoustic, and you can unsubscribe using the link at the bottom of the relevant email. \n\nProduct & Policy Campaigns: Some of our webpages host product or policy campaigns. For example, you can request a link by email or SMS to install Firefox on your mobile device or petition your legislators on internet issues. We may use third parties to manage these campaigns and handle any data that you choose to submit. \n\nWe may use cookies, clear GIFs, third-party web analytics, device information, and IP addresses for functionality and to better understand user interaction with our products, services, and communications. \n\nFunctionality: We may use information such as cookies, device information, and IP addresses to enhance functionality of certain products, services, and communications. For example:\n\nMetrics: We may also use cookies, device information, and IP addresses, along with clear GIFs, cookies and third-party services to help us understand in the aggregate how users engage with our products, services, communications, websites, online campaigns, snippets, devices, and other platforms. We use:\n\nFraud Prevention: Mozilla has implemented third-party technology, Google’s Invisible reCAPTCHA, that operates in the background on some of our websites in order to identify fraudulent activity. Use of the Invisible reCAPTCHA is governed by the Google Privacy Policy and Terms of Use.\n\nYou can control individual cookie preferences, indicate your cookie preferences to others, and opt out of web analytics and optimization tools. \n\nCookie History: You can accept or decline individual cookies in your preferences in the Tools/Options/Privacy history section. Note that certain features of our products and services may not function properly without the aid of cookies. \n\nDo Not Track: Mozilla does not track users across third-party websites to provide targeted advertising. In addition, if you have configured your browser to send a “Do Not Track” signal when accessing our websites, Mozilla will not utilize any of the tools described in the Metrics section.\n\nEmail: Our marketing communications are optional to receive and you can unsubscribe from the footer of the email or by updating your Mozilla email preferences, or for Thunderbird’s newsletter, on the Thunderbird website.\n\nAnalytics & Optimization: Follow the instructions below to prevent data collection about your visits to Mozilla websites:\n\nSocial Media: The social sharing buttons on Mozilla websites are designed not to share data with the applicable social media provider until you specifically click the relevant social media icon.\n\nSome Mozilla websites allow you to make purchases (such as apps or gear), contribute funds to specific Mozilla projects, or make donations in support of Mozilla public and charitable programs. These transactions are often handled by Mozilla’s third-party vendors.\n\nPayment Processing: When you purchase something via a Mozilla website, contribute funds or make donations, you will send payment through one of our third-party payment providers: Stripe, Apple Pay, PayPal, Venmo or Google Pay. Mozilla receives a record of your account (including your billing address and the last four digits of your payment method) and (where relevant) the status of your account’s subscription; we may also receive your name, mailing address, and/or email address. This data is used for payment processing, fraud detection and record-keeping purposes. \n\nContact and Donation Information: We use Acoustic, Salesforce, Fundraise Up and Campaign Monitor to email receipts and store records, which are retained for 10 years from the date of last payment. If you make a donation to the Mozilla Foundation or Thunderbird, we use Fundraise Up to manage our donations and provide transactional receipts to donors.\n\nTo make requests regarding your personal data, please contact us through our Data Subject Access Request Portal. If you have any other questions regarding personal data or our privacy practices, please contact us at compliance@mozilla.com. We respond to all requests we receive from individuals wishing to exercise their data protection rights in accordance with applicable data protection laws.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://www.mozilla.org/en-US/about/legal/terms/mozilla/",
    "title": "Websites &amp; Communications Terms of Use — Mozilla",
    "h1": "Websites & Communications Terms of Use",
    "paragraphs": "Firefox is no longer supported on Windows 8.1 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\n\n      \n        Download Firefox ESR 64-bit\n      \n    \n\n\n      \n        Download Firefox ESR 32-bit\n      \n    \n\nFirefox is no longer supported on macOS 10.14 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\nGet the not-for-profit-backed browser on Windows, Mac or Linux.\n\nGet the customizable mobile browser for Android smartphones.\n\nGet the mobile browser for your iPhone or iPad.\n\nSimply private mobile browsing.\n\nLearn how Firefox treats your data with respect.\n\nRead about new Firefox features and ways to stay safe online.\n\nGet the details on the latest Firefox updates.\n\nView all Firefox Browsers\n\nSee if your email has appeared in a company’s data breach.\n\nHelp prevent Facebook from collecting your data outside their site.\n\nSave and discover the best stories from across the web.\n\nGet protection beyond your browser, on all your devices.\n\nLearn how each Firefox product protects and respects your data.\n\nSign up for new accounts without handing over your email address.\n\nNew features and tools for a customized MDN experience\n\nView all Products\n\nLearn about the values and principles that guide our mission.\n\nMeet the not-for-profit behind Firefox that stands for a better web.\n\nJoin the fight for a healthy internet.\n\nStories about how our people and products are changing the world for the better.\n\nMeet the team that’s building technology for a better internet.\n\nWork for a mission-driven organization that makes people-first products.\n\nLearn about Mozilla and the issues that matter to us.\n\n\n          More About Mozilla\n        \n\nGet the Firefox browser built just for developers.\n\nCheck out the home for web developer resources.\n\nDonate your voice so the future of the web can hear everyone.\n\nDiscover ways to bring bright ideas to life.\n\nJune 23, 2016\n\nPlease read the terms of this entire document  (“Terms”) carefully because it explains your rights and responsibilities when you visit any of Mozilla’s websites (“Websites”), or related feeds, social media, newsletters, source code repositories, and emails (together with Websites, these are collectively referred to as “Communications”). By accessing or signing up to receive Communications, you agree to be bound by these Terms.\n\nOur Websites include multiple domains such as mozilla.org, mozillians.org, firefox.com, mozillafestival.org, openstandard.com, openbadges.org and webmaker.org. You may also recognize our Websites by nicknames such as Bugzilla@Mozilla, BMO, MozWiki, MoPad, MozReps, MDN, Marketplace, One and Done, SUMO, and AMO. Some of our Websites connect you with links, apps or add-ons that are provided by other parties and are subject to separate Terms.\n\nSome Websites require you to register for an account in order to access additional features of a Website or another Mozilla service. If applicable, additional terms will be presented to you. You are responsible for all activities under your account.\n\nSome Websites allow you to create a username during registration. Your use of a username must comply with our Acceptable Use Policy.\n\nOur Communications include content such as articles, images, photographs, comments, software code, audio and video clips, and other materials (collectively, “Content”).  Content is authored by Mozilla, contributors to Mozilla projects, and other sources.\n\nContent authored by Mozilla is generally made available for public sharing and reuse through open licenses such as Creative Commons (for expressive material) or the Mozilla Public License (for software code).  In most cases we ask Mozilla contributors to release Content under open licenses.\n\nSome Content in our Communications is acquired from sources that prohibit further use of their Content without advance permission.  Where possible, the Content or Website footer will display a notice with the applicable license. You agree to abide by such notices.  Note the following specifics:\n\nYou may contribute Content when interacting with our Communications, including but not limited to commenting on an article, blogging, contributing code, or contributing graphics or written material (each a “Submission”). Unless your Submission is made under a separate agreement with Mozilla, in which case that agreement will govern, then\n\nFor Submissions to Mozilla's open source projects:\n\nFor all other Submissions, you agree to the following in connection with each:\n\nThe Mozilla Websites, Communications & Cookies Privacy Notice describes how we handle information that we receive from you in connection with our Communications. The Privacy Notice explains, for example, that we place certain cookies on our Websites and how you can opt-out.\n\nIf you subscribe to receive our newsletters or register for an account in connection with any of our Websites, you may receive transactional emails from us in connection with your account (for example, legal, privacy, and security updates).\n\nSome of our Websites have online tools that allow you to send emails to others. For example, you can invite your contacts to events on Mozillians.  You agree not to misuse others’ email addresses (for example, by spamming them).\n\nOther Websites, like MozReps, provide tools that enable users to arrange physical events for anyone to attend. Please exercise caution and good judgment when attending events.\n\nFor more information on how to report claims of copyright or trademark infringement, please see: https://www.mozilla.org/about/legal/report-infringement/.\n\nThese Terms will continue to apply until ended by either you or Mozilla. You can choose to end them at any time for any reason by discontinuing your use of our Communications and, if applicable, deleting your account.\n\nWe may suspend or terminate your access to our Communications at any time for any reason, including, but not limited to, if we reasonably believe: (i) you have violated these Terms, our Acceptable Use Policy, or other relevant policy; (ii) you create risk or possible legal exposure for us; or (iii) our provision of the Communications to you is no longer commercially viable.\n\nIn all such cases, these Terms shall terminate, except that the following sections shall continue to apply: Indemnification, Disclaimer; Limitation of Liability, Miscellaneous.\n\nYou agree to defend, indemnify and hold harmless Mozilla, its contractors, contributors, licensors, and partners; and the respective directors, officers, employees and agents of the foregoing (\"Indemnified Parties\") from and against any and all third party claims and expenses, including attorneys' fees, arising out of or related to your use of our Communications (including, but not limited to, from your Submissions or from your violation of any these Terms).\n\nTHE COMMUNICATIONS ARE PROVIDED \"AS IS\" WITH ALL FAULTS. TO THE EXTENT PERMITTED BY LAW, MOZILLA AND THE INDEMNIFIED PARTIES HEREBY DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION WARRANTIES THAT THE COMMUNICATIONS ARE FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, AND NON-INFRINGING. YOU BEAR THE ENTIRE RISK AS TO USING THE COMMUNICATIONS FOR YOUR PURPOSES AND AS TO THE QUALITY AND PERFORMANCE OF THE COMMUNICATIONS, INCLUDING WITHOUT LIMITATION THE RISK THAT YOUR HARDWARE, SOFTWARE, OR CONTENT IS DELETED OR CORRUPTED, THAT SOMEONE ELSE GAINS UNAUTHORIZED ACCESS TO YOUR INFORMATION, OR THAT ANOTHER USER MISUSES OR MISAPPROPRIATES YOUR SUBMISSION. THIS LIMITATION WILL APPLY NOTWITHSTANDING THE FAILURE OF ESSENTIAL PURPOSE OF ANY REMEDY. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF IMPLIED WARRANTIES, SO THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\nEXCEPT AS REQUIRED BY LAW, MOZILLA AND THE INDEMNIFIED PARTIES WILL NOT BE LIABLE FOR ANY INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL, OR EXEMPLARY DAMAGES ARISING OUT OF OR IN ANY WAY RELATING TO THESE TERMS OR THE USE OF OR INABILITY TO USE THE COMMUNICATIONS, INCLUDING WITHOUT LIMITATION DIRECT AND INDIRECT DAMAGES FOR LOSS OF GOODWILL, WORK STOPPAGE, LOST PROFITS, LOSS OF DATA, AND COMPUTER FAILURE OR MALFUNCTION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES AND REGARDLESS OF THE THEORY (CONTRACT, TORT, OR OTHERWISE) UPON WHICH SUCH CLAIM IS BASED. THE COLLECTIVE LIABILITY OF MOZILLA AND THE INDEMNIFIED PARTIES UNDER THIS AGREEMENT WILL NOT EXCEED $500 (FIVE HUNDRED DOLLARS). SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL, CONSEQUENTIAL, OR SPECIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.\n\nWe may update these Terms from time to time to address a new feature of the Communications or to clarify a provision. The updated Terms will be posted online. If the changes are substantive, we will announce the update through our usual channels for such announcements such as blog posts, banners, emails, or forums. Your continued use of our Communications after the effective date of such changes constitutes your acceptance of such changes. To make your review more convenient, we will post an effective date at the top of this page.\n\nThese Terms constitute the entire agreement between you and Mozilla concerning our Communications and supersede any prior versions of these Terms. The Communications and these Terms are governed by the laws of the state of California, U.S.A., excluding its conflict of law provisions. All claims and disputes arising out of the Communications or these Terms shall be brought exclusively in the courts of Santa Clara County, California, and you consent to personal jurisdiction in those courts. If any portion of these Terms is held to be invalid or unenforceable, the remaining portions will remain in full force and effect. In the event of a conflict between a translated version of these Terms and the English language version, the English language version shall control. In the event of a conflict between these Terms and relevant additional terms, the additional terms shall control.\n\nMozilla\nAttn: Mozilla – Legal Notices\n149 New Montgomery St.\n4th Floor\nSan Francisco, CA 94105\nUSA\nTelephone: 650-903-0800\nFax: 650-903-0875\nLegal-notices at mozilla.com\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://www.mozilla.org/en-US/about/governance/policies/participation/",
    "title": "Community Participation Guidelines — Mozilla",
    "h1": "Mozilla Community Participation Guidelines",
    "paragraphs": "Firefox is no longer supported on Windows 8.1 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\n\n      \n        Download Firefox ESR 64-bit\n      \n    \n\n\n      \n        Download Firefox ESR 32-bit\n      \n    \n\nFirefox is no longer supported on macOS 10.14 and below.\n\nPlease download Firefox ESR (Extended Support Release) to use Firefox.\n\nGet the not-for-profit-backed browser on Windows, Mac or Linux.\n\nGet the customizable mobile browser for Android smartphones.\n\nGet the mobile browser for your iPhone or iPad.\n\nSimply private mobile browsing.\n\nLearn how Firefox treats your data with respect.\n\nRead about new Firefox features and ways to stay safe online.\n\nGet the details on the latest Firefox updates.\n\nView all Firefox Browsers\n\nSee if your email has appeared in a company’s data breach.\n\nHelp prevent Facebook from collecting your data outside their site.\n\nSave and discover the best stories from across the web.\n\nGet protection beyond your browser, on all your devices.\n\nLearn how each Firefox product protects and respects your data.\n\nSign up for new accounts without handing over your email address.\n\nNew features and tools for a customized MDN experience\n\nView all Products\n\nLearn about the values and principles that guide our mission.\n\nMeet the not-for-profit behind Firefox that stands for a better web.\n\nJoin the fight for a healthy internet.\n\nStories about how our people and products are changing the world for the better.\n\nMeet the team that’s building technology for a better internet.\n\nWork for a mission-driven organization that makes people-first products.\n\nLearn about Mozilla and the issues that matter to us.\n\n\n          More About Mozilla\n        \n\nGet the Firefox browser built just for developers.\n\nCheck out the home for web developer resources.\n\nDonate your voice so the future of the web can hear everyone.\n\nDiscover ways to bring bright ideas to life.\n\nSoftware and other innovations designed to advance our mission.\n\nBecome a volunteer contributor in a number of different areas.\n\nRead about our vision for the Web and how we intend to pursue that vision.\n\nThe heart of Mozilla is people. We put people first and do our best to recognize, appreciate and respect the diversity of our global contributors. The Mozilla Project welcomes contributions from everyone who shares our goals and wants to contribute in a healthy and constructive manner within our community. As such, we have adopted this code of conduct and require all those who participate to agree and adhere to these Community Participation Guidelines in order to help us create a safe and positive community experience for all.\n\nThese guidelines aim to support a community where all people should feel safe to participate, introduce new ideas and inspire others, regardless of:\n\nOpenness, collaboration and participation are core aspects of our work — from development on Firefox to collaboratively designing curriculum. We gain strength from diversity and actively seek participation from those who enhance it. These guidelines exist to enable diverse individuals and groups to interact and collaborate to mutual advantage. This document outlines both expected and prohibited behavior.\n\nThese guidelines outline our behavior expectations as members of the Mozilla community in all Mozilla activities, both offline and online. Your participation is contingent upon following these guidelines in all Mozilla activities, including but not limited to:\n\nThese guidelines work in conjunction with our Anti-Harassment/Discrimination Policies[1], which sets out protections for, and obligations of, Mozilla employees. The Anti-Harassment/Discrimination Policy is crafted with specific legal definitions and requirements in mind.\n\nWhile these guidelines / code of conduct are specifically aimed at Mozilla’s work and community, we recognize that it is possible for actions taken outside of Mozilla’s online or in person spaces to have a deep impact on community health. (For example, in the past, we publicly identified an anonymous posting aimed at a Mozilla employee in a non-Mozilla forum as clear grounds for removal from the Mozilla community.) This is an active topic in the diversity and inclusion realm. We anticipate wide-ranging discussions among our communities about appropriate boundaries.\n\nThe following behaviors are expected of all Mozillians:\n\nValue each other’s ideas, styles and viewpoints. We may not always agree, but disagreement is no excuse for poor manners. Be open to different possibilities and to being wrong. Be respectful in all interactions and communications, especially when debating the merits of different options. Be aware of your impact and how intense interactions may be affecting people. Be direct, constructive and positive. Take responsibility for your impact and your mistakes – if someone says they have been harmed through your words or actions, listen carefully, apologize sincerely, and correct the behavior going forward.\n\nWe are likely to have some discussions about if and when criticism is respectful and when it’s not. We must be able to speak directly when we disagree and when we think we need to improve. We cannot withhold hard truths. Doing so respectfully is hard, doing so when others don’t seem to be listening is harder, and hearing such comments when one is the recipient can be even harder still. We need to be honest and direct, as well as respectful.\n\nSeek diverse perspectives. Diversity of views and of people on teams powers innovation, even if it is not always comfortable. Encourage all voices. Help new perspectives be heard and listen actively. If you find yourself dominating a discussion, it is especially important to step back and encourage other voices to join in. Be aware of how much time is taken up by dominant members of the group. Provide alternative ways to contribute or participate when possible.\n\nBe inclusive of everyone in an interaction, respecting and facilitating people’s participation whether they are:\n\nThink about how you might facilitate alternative ways to contribute or participate. If you find yourself dominating a discussion, step back. Make way for other voices and listen actively to them.\n\nOur goal should not be to “win” every disagreement or argument. A more productive goal is to be open to ideas that make our own ideas better. Strive to be an example for inclusive thinking. “Winning” is when different perspectives make our work richer and stronger.\n\nMozillians come from many cultures and backgrounds. Cultural differences can encompass everything from official religious observances to personal habits to clothing. Be respectful of people with different cultural practices, attitudes and beliefs. Work to eliminate your own biases, prejudices and discriminatory practices. Think of others’ needs from their point of view. Use preferred titles (including pronouns) and the appropriate tone of voice. Respect people’s right to privacy and confidentiality. Be open to learning from and educating others as well as educating yourself; it is unrealistic to expect Mozillians to know the cultural practices of every ethnic and cultural group, but everyone needs to recognize one’s native culture is only part of positive interactions.\n\nBy matching your actions with your words, you become a person others want to follow. Your actions influence others to behave and respond in ways that are valuable and appropriate for our organizational outcomes. Design your community and your work for inclusion. Hold yourself and others accountable for inclusive behaviors. Make decisions based on the highest good for Mozilla’s mission.\n\nThe following behaviors are considered to be unacceptable under these guidelines.\n\nViolence and threats of violence are not acceptable - online or offline. This includes incitement of violence toward any individual, including encouraging a person to commit self-harm. This also includes posting or threatening to post other people’s personally identifying information (“doxxing”) online.\n\nConflicts will inevitably arise, but frustration should never turn into a personal attack. It is not okay to insult, demean or belittle others. Attacking someone for their opinions, beliefs and ideas is not acceptable. It is important to speak directly when we disagree and when we think we need to improve, but such discussions must be conducted respectfully and professionally, remaining focused on the issue at hand.\n\nHurtful or harmful language related to:\n\nis not acceptable. This includes deliberately referring to someone by a gender that they do not identify with, and/or questioning the legitimacy of an individual’s gender identity. If you’re unsure if a word is derogatory, don’t use it. This also includes repeated subtle and/or indirect discrimination; when asked to stop, stop the behavior in question.\n\nUnwelcome sexual attention or unwelcome physical contact is not acceptable. This includes sexualized comments, jokes or imagery in interactions, communications or presentation materials, as well as inappropriate touching, groping, or sexual advances. Additionally, touching a person without permission, including sensitive areas such as their hair, pregnant stomach, mobility device (wheelchair, scooter, etc) or tattoos is unacceptable. This includes physically blocking or intimidating another person. Physical contact or simulated physical contact (such as emojis like “kiss”) without affirmative consent is not acceptable. The sharing or distribution of sexualized images or text is unacceptable.\n\nSustained disruption of events, forums, or meetings, including talks and presentations, will not be tolerated. This includes:\n\nWe will treat influencing or leading such activities the same way we treat the activities themselves, and thus the same consequences apply.\n\nBad behavior from any Mozillian, including those with decision-making authority, will not be tolerated. Intentional efforts to exclude people (except as part of a consequence of the guidelines or other official action) from Mozilla activities are not acceptable and will be dealt with appropriately.\n\nReports of harassment/discrimination will be promptly and thoroughly investigated by the people responsible for the safety of the space, event or activity. Appropriate measures will be taken to address the situation.\n\nAnyone being asked to stop unacceptable behavior is expected to comply immediately. Violation of these guidelines can result in anyone being asked to leave an event or online space, either temporarily or for the duration of the event, or being banned from participation in spaces, or future events and activities in perpetuity.\n\nMozilla Staff are held accountable, in addition to these guidelines, to Mozilla’s staff Anti-Harassment/Discrimination Policies [1]. Mozilla staff in violation of these guidelines may be subject to further consequences, such as disciplinary action, up to and including termination of employment. For contractors or vendors, violation of these guidelines may affect continuation or renewal of contract.\n\nIn addition, any participants who abuse the reporting process will be considered to be in violation of these guidelines and subject to the same consequences. False reporting, especially to retaliate or exclude, will not be accepted or tolerated.\n\nIf you believe you’re experiencing unacceptable behavior that will not be tolerated as outlined above, please use cpg-report@mozilla.com to report. Reports are triaged by the Community Participation Guidelines Response Lead.\n\nAfter receiving a concise description of your situation, they will review and determine the next steps. In addition to conducting any investigation, they can provide a range of resources, from a private consultation to other community resources. They will involve other colleagues or outside specialists (such as legal counsel), as needed to appropriately address each situation.\n\nPlease also report to us if you observe a potentially dangerous situation, someone in distress, or violations of these guidelines, even if the situation is not happening to you.\n\nIf you feel you have been unfairly accused of violating these guidelines, please follow the same reporting process.\n\nEach physical or virtual Mozilla space shall have a designated contact.\n\nAll Mozilla events will have designated a specific safety guideline with emergency and anti-abuse contacts at the event as well as online. These contacts will be posted prominently throughout the event, and in print and online materials. Event leaders are requested to speak at the event about the guidelines and to ask participants to review and agree to them when they sign up for the event.\n\nReports will receive an email notice of receipt. Once an incident has been investigated and a decision has been communicated to the relevant parties, all have the opportunity to appeal this decision by sending an email to cpg-questions@mozilla.com.\n\nEveryone is encouraged to ask questions about these guidelines. If you are organizing an event or activity, reach out for tips for building inclusion for your event, activity or space. Your input is welcome and you will always get a response within 24 hours (or on the next weekday, if it is the weekend) if you reach out to cpg-questions@mozilla.com. Please review this change log for updates to this document.\n\nThis set of guidelines is distributed under a Creative Commons Attribution-ShareAlike license.\n\nThese guidelines have been adapted with modifications from Mozilla’s original Community Participation Guidelines, the Ubuntu Code of Conduct, Mozilla’s View Source Conference Code of Conduct, and the Rust Language Code of Conduct, which are based on Stumptown Syndicate’s Citizen Code of Conduct. Additional text from the LGBTQ in Technology Code of Conduct and the WisCon code of conduct. This document and all associated processes are only possible with the hard work of many, many Mozillians.\n\nMozilla may amend the guidelines from time to time and may also vary the procedures it sets out where appropriate in a particular case. Your agreement to comply with the guidelines will be deemed agreement to any changes to it. This policy does not form part of any Mozilla employee’s contract of employment or otherwise have contractual effect.\n\n[1] The anti-harassment policy is accessible to paid staff here.\n\nGet the Mozilla newsletter and help us keep it open and free.\n\n\n  Afghanistan\n\n  Akrotiri\n\n  Albania\n\n  Algeria\n\n  American Samoa\n\n  Andorra\n\n  Angola\n\n  Anguilla\n\n  Antarctica\n\n  Antigua and Barbuda\n\n  Argentina\n\n  Armenia\n\n  Aruba\n\n  Ashmore and Cartier Islands\n\n  Australia\n\n  Austria\n\n  Azerbaijan\n\n  Bahamas, The\n\n  Bahrain\n\n  Baker Island\n\n  Bangladesh\n\n  Barbados\n\n  Bassas da India\n\n  Belarus\n\n  Belgium\n\n  Belize\n\n  Benin\n\n  Bermuda\n\n  Bhutan\n\n  Bolivia\n\n  Bosnia and Herzegovina\n\n  Botswana\n\n  Bouvet Island\n\n  Brazil\n\n  British Indian Ocean Territory\n\n  Brunei\n\n  Bulgaria\n\n  Burkina Faso\n\n  Burma\n\n  Burundi\n\n  Cambodia\n\n  Cameroon\n\n  Canada\n\n  Cape Verde\n\n  Caribbean Netherlands\n\n  Cayman Islands\n\n  Central African Republic\n\n  Chad\n\n  Chile\n\n  China\n\n  Christmas Island\n\n  Clipperton Island\n\n  Cocos (Keeling) Islands\n\n  Colombia\n\n  Comoros\n\n  Congo (Brazzaville)\n\n  Congo (Kinshasa)\n\n  Cook Islands\n\n  Coral Sea Islands\n\n  Costa Rica\n\n  Croatia\n\n  Cuba\n\n  Curaçao\n\n  Cyprus\n\n  Czechia\n\n  Côte d’Ivoire\n\n  Denmark\n\n  Dhekelia\n\n  Diego Garcia\n\n  Djibouti\n\n  Dominica\n\n  Dominican Republic\n\n  Ecuador\n\n  Egypt\n\n  El Salvador\n\n  Equatorial Guinea\n\n  Eritrea\n\n  Estonia\n\n  Eswatini\n\n  Ethiopia\n\n  Europa Island\n\n  Falkland Islands (Islas Malvinas)\n\n  Faroe Islands\n\n  Fiji\n\n  Finland\n\n  France\n\n  French Guiana\n\n  French Polynesia\n\n  French Southern and Antarctic Lands\n\n  Gabon\n\n  Gambia, The\n\n  Gaza Strip\n\n  Georgia\n\n  Germany\n\n  Ghana\n\n  Gibraltar\n\n  Glorioso Islands\n\n  Greece\n\n  Greenland\n\n  Grenada\n\n  Guadeloupe\n\n  Guam\n\n  Guatemala\n\n  Guernsey\n\n  Guinea\n\n  Guinea-Bissau\n\n  Guyana\n\n  Haiti\n\n  Heard Island and McDonald Islands\n\n  Honduras\n\n  Hong Kong\n\n  Howland Island\n\n  Hungary\n\n  Iceland\n\n  India\n\n  Indonesia\n\n  Iran\n\n  Iraq\n\n  Ireland\n\n  Isle of Man\n\n  Israel\n\n  Italy\n\n  Jamaica\n\n  Jan Mayen\n\n  Japan\n\n  Jarvis Island\n\n  Jersey\n\n  Johnston Atoll\n\n  Jordan\n\n  Juan de Nova Island\n\n  Kazakhstan\n\n  Kenya\n\n  Kingman Reef\n\n  Kiribati\n\n  Korea, North\n\n  Korea, South\n\n  Kosovo\n\n  Kuwait\n\n  Kyrgyzstan\n\n  Laos\n\n  Latvia\n\n  Lebanon\n\n  Lesotho\n\n  Liberia\n\n  Libya\n\n  Liechtenstein\n\n  Lithuania\n\n  Luxembourg\n\n  Macau\n\n  Madagascar\n\n  Malawi\n\n  Malaysia\n\n  Maldives\n\n  Mali\n\n  Malta\n\n  Marshall Islands\n\n  Martinique\n\n  Mauritania\n\n  Mauritius\n\n  Mayotte\n\n  Mexico\n\n  Micronesia, Federated States of\n\n  Midway Islands\n\n  Moldova\n\n  Monaco\n\n  Mongolia\n\n  Montenegro\n\n  Montserrat\n\n  Morocco\n\n  Mozambique\n\n  Namibia\n\n  Nauru\n\n  Navassa Island\n\n  Nepal\n\n  Netherlands\n\n  New Caledonia\n\n  New Zealand\n\n  Nicaragua\n\n  Niger\n\n  Nigeria\n\n  Niue\n\n  Norfolk Island\n\n  North Macedonia\n\n  Northern Mariana Islands\n\n  Norway\n\n  Oman\n\n  Pakistan\n\n  Palau\n\n  Palmyra Atoll\n\n  Panama\n\n  Papua New Guinea\n\n  Paracel Islands\n\n  Paraguay\n\n  Peru\n\n  Philippines\n\n  Pitcairn Islands\n\n  Poland\n\n  Portugal\n\n  Puerto Rico\n\n  Qatar\n\n  Romania\n\n  Russia\n\n  Rwanda\n\n  Réunion\n\n  Saint Barthélemy\n\n  Saint Helena, Ascension, and Tristan da Cunha\n\n  Saint Kitts and Nevis\n\n  Saint Lucia\n\n  Saint Martin\n\n  Saint Pierre and Miquelon\n\n  Saint Vincent and the Grenadines\n\n  Samoa\n\n  San Marino\n\n  Saudi Arabia\n\n  Senegal\n\n  Serbia\n\n  Seychelles\n\n  Sierra Leone\n\n  Singapore\n\n  Sint Maarten\n\n  Slovakia\n\n  Slovenia\n\n  Solomon Islands\n\n  Somalia\n\n  South Africa\n\n  South Georgia and South Sandwich Islands\n\n  South Sudan\n\n  Spain\n\n  Spratly Islands\n\n  Sri Lanka\n\n  Sudan\n\n  Suriname\n\n  Svalbard\n\n  Sweden\n\n  Switzerland\n\n  Syria\n\n  São Tomé and Príncipe\n\n  Taiwan\n\n  Tajikistan\n\n  Tanzania\n\n  Thailand\n\n  Timor-Leste\n\n  Togo\n\n  Tokelau\n\n  Tonga\n\n  Trinidad and Tobago\n\n  Tromelin Island\n\n  Tunisia\n\n  Turkey\n\n  Turkmenistan\n\n  Turks and Caicos Islands\n\n  Tuvalu\n\n  Uganda\n\n  Ukraine\n\n  United Arab Emirates\n\n  United Kingdom\n\n  United States\n\n  Uruguay\n\n  Uzbekistan\n\n  Vanuatu\n\n  Vatican City\n\n  Venezuela\n\n  Vietnam\n\n  Virgin Islands, British\n\n  Virgin Islands, U.S.\n\n  Wake Island\n\n  Wallis and Futuna\n\n  West Bank\n\n  Western Sahara\n\n  Yemen\n\n  Zambia\n\n  Zimbabwe\n\n\n\n\n  Bahasa Indonesia\n\n  Deutsch\n\n  English\n\n  Español\n\n  Français\n\n  Polski\n\n  Português\n\n  Русский\n\n  正體中文\n\n\n\n\n            \n               HTML\n            \n            \n               Text\n            \n          \n\n\n          \n             I’m okay with Mozilla handling my info as explained in this Privacy Notice\n          \n        \n\nSign Up Now\nWe will only send you Mozilla-related information.\n\nIf you haven’t previously confirmed a subscription to a Mozilla-related newsletter, you may have to do so. Please check your inbox or your spam filter for an email from us.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  },
  {
    "url": "https://foundation.mozilla.org/",
    "title": "Just a moment...",
    "h1": "foundation.mozilla.org",
    "paragraphs": ""
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Attrib_copyright_license",
    "title": "Attribution and copyright licensing - The MDN Web Docs project | MDN",
    "h1": "Attribution and copyright licensing",
    "paragraphs": "Get real-time assistance with your coding queries. Try AI Help now!\n\nWeb technology reference for developers\n\nStructure of content on the web\n\nCode used to describe document style\n\nGeneral-purpose scripting language\n\nProtocol for transmitting web resources\n\nInterfaces for building web applications\n\nDeveloping extensions for web browsers\n\nWeb technology reference for developers\n\nLearn web development\n\nLearn web development\n\nLearn to structure web content with HTML\n\nLearn to style content using CSS\n\nLearn to run scripts in the browser\n\nLearn to make the web accessible to all\n\nA customized MDN experience\n\nGet real-time assistance and support\n\nAll browser compatibility updates at a glance\n\nLearn how to use MDN Plus\n\nFrequently asked questions about MDN Plus\n\nLearn how to fuel creativity and drive innovation at work with award-winning engineer, Ruth Amos.Mozilla ads\n\nLearn how to fuel creativity and drive innovation at work with award-winning engineer, Ruth Amos.\nMozilla ads\n\nMDN Web Doc's content is available free of charge and is available under various open-source licenses.\n\nThis section covers the types of content we provide and the copyrights and licenses that are in effect for each type if you choose to reuse any of it.\n\nNote: The content on MDN Web Docs has been prepared with the contributions of authors from both inside and outside Mozilla. Unless otherwise indicated, the content is available under the terms of the Creative Commons Attribution-ShareAlike license (CC-BY-SA), v2.5 or any later version.\n\nYour reuse of the content here is published under the same license as the original content—CC-BY-SA v2.5 or any later version. When reusing the content on MDN Web Docs, you need to ensure that attribution is given to the original content as well as to \"Mozilla Contributors\". Include a hyperlink (online) or URL (in print) to the specific page of the content being sourced. For example, to provide attribution for this article, you can write:\n\nAttributions and copyright licensing by Mozilla Contributors is licensed under CC-BY-SA 2.5.\n\nIn the above example, \"Mozilla Contributors\" links to the history of the cited page. See Recommended practices for attribution for further explanation.\n\nCode samples added on or after August 20, 2010 are in the public domain CC0. No licensing notice is necessary but if you need one, you can use: Any copyright is dedicated to the Public Domain: https://creativecommons.org/publicdomain/zero/1.0/\n\nCode samples added before August 20, 2010 are available under the MIT license; you should insert the following attribution information into the MIT template: \"© <date of last wiki page revision> <name of person who put it in the wiki>\".\n\nSince the launch of the new Yari MDN platform on December 14 2020, there is currently no way to determine which one you need. We are working on this and will update this content soon.\n\nIf you wish to contribute to MDN Web Docs, you agree that your documentation is available under the Attribution-ShareAlike license (or occasionally an alternative license already specified by the page you are editing) and that your code samples are available under Creative Commons CC-0 (a Public Domain dedication).\n\nWarning: No new pages may be created using alternate licenses.\n\nCopyright for contributed materials remains with the author unless the author assigns it to someone else.\n\nIf you have any questions or concerns about anything discussed here, please contact the MDN Web Docs team.\n\nThe rights in the logos, trademarks, and service marks of the Mozilla Foundation, as well as the look and feel of this website, are not licensed under the Creative Commons license, and to the extent they are works of authorship (like logos and graphic design), they are not included in the work that is licensed under those terms. If you use the text of documents and wish to also use any of these rights, or if you have any other questions about complying with our licensing terms for this collection, you should contact the Mozilla Foundation here: licensing@mozilla.org.\n\nIn general, we do not approve of copying content from other sources and putting it on MDN. MDN should be made up of original content wherever possible. If we receive a pull request and discover that it contains plagiarized content, we will close it and request that the submitter resubmit the change with the content rewritten into their own words.\n\nNote: Unless there is a good reason to republish the content, we will probably say \"no\". The MDN writing team's decision is final.\n\nIf someone wants to donate an article to MDN that they previously published on their blog or it makes sense to copy a complex reference sheet to MDN, there may be justification for republishing it. For these cases, discuss your plan with the MDN team beforehand:\n\nIf the content is published under a closed license:\n\nIf the content is published under an open license:\n\nWe regularly get users asking us questions about how to link to MDN Web Docs and whether or not it is even allowed. The short answer is: yes, you can link to MDN Web Docs! Not only is the hypertext link the essence of the web, it is both a way to point your users to valuable resources as well as a show of trust toward the work our community does.\n\nThis page was last modified on Jun 6, 2023 by MDN contributors.\n\nYour blueprint for a better internet.\n\nVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.\nPortions of this content are ©1998–2024 by individual mozilla.org contributors. Content available under a Creative Commons license."
  }
]